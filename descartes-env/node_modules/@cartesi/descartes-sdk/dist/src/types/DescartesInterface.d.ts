/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DescartesInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "destruct(uint256)": FunctionFragment;
    "getNonce(uint256)": FunctionFragment;
    "getResult(uint256)": FunctionFragment;
    "getSubInstances(uint256,address)": FunctionFragment;
    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "isConcerned(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "destruct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubInstances",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConcerned",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "destruct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConcerned",
    data: BytesLike
  ): Result;

  events: {};
}

export class DescartesInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DescartesInterfaceInterface;

  functions: {
    destruct(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "destruct(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, string, string]>;

    "getResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, string, string]>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  destruct(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "destruct(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonce(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getResult(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, string, string]>;

  "getResult(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, string, string]>;

  getSubInstances(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
  >;

  "getSubInstances(uint256,address)"(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
  >;

  instantiate(
    _finalTime: BigNumberish,
    _templateHash: BytesLike,
    _outputPosition: BigNumberish,
    _outputLog2Size: BigNumberish,
    _roundDuration: BigNumberish,
    parties: string[],
    _inputDrives: {
      position: BigNumberish;
      driveLog2Size: BigNumberish;
      directValue: BytesLike;
      loggerIpfsPath: BytesLike;
      loggerRootHash: BytesLike;
      provider: string;
      waitsProvider: boolean;
      needsLogger: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
    _finalTime: BigNumberish,
    _templateHash: BytesLike,
    _outputPosition: BigNumberish,
    _outputLog2Size: BigNumberish,
    _roundDuration: BigNumberish,
    parties: string[],
    _inputDrives: {
      position: BigNumberish;
      driveLog2Size: BigNumberish;
      directValue: BytesLike;
      loggerIpfsPath: BytesLike;
      loggerRootHash: BytesLike;
      provider: string;
      waitsProvider: boolean;
      needsLogger: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isActive(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isConcerned(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConcerned(uint256,address)"(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    destruct(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "destruct(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, string, string]>;

    "getResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, string, string]>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    destruct(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "destruct(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    destruct(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "destruct(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
