/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DescartesInterface extends ethers.utils.Interface {
  functions: {
    "abortByDeadline(uint256)": FunctionFragment;
    "challenge(uint256)": FunctionFragment;
    "challengeDrives(uint256)": FunctionFragment;
    "currentIndex()": FunctionFragment;
    "destruct(uint256)": FunctionFragment;
    "getCurrentState(uint256)": FunctionFragment;
    "getNonce(uint256)": FunctionFragment;
    "getPartyState(uint256,address)": FunctionFragment;
    "getResult(uint256)": FunctionFragment;
    "getState(uint256,address)": FunctionFragment;
    "getSubInstances(uint256,address)": FunctionFragment;
    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "isConcerned(uint256,address)": FunctionFragment;
    "provideDirectDrive(uint256,bytes)": FunctionFragment;
    "provideLoggerDrive(uint256,bytes32)": FunctionFragment;
    "revealLoggerDrive(uint256)": FunctionFragment;
    "submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])": FunctionFragment;
    "winByVG(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "abortByDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeDrives",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destruct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartyState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubInstances",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConcerned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "provideDirectDrive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "provideLoggerDrive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealLoggerDrive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BigNumberish, BytesLike, BytesLike[][], BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "winByVG",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "abortByDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengeDrives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "destruct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPartyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConcerned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideDirectDrive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideLoggerDrive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealLoggerDrive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winByVG", data: BytesLike): Result;

  events: {
    "ChallengeStarted(uint256)": EventFragment;
    "ClaimSubmitted(uint256,bytes32)": EventFragment;
    "DescartesCreated(uint256)": EventFragment;
    "DescartesFinished(uint256,uint8)": EventFragment;
    "DriveInserted(uint256,tuple)": EventFragment;
    "ResultConfirmed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengeStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DescartesCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DescartesFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DriveInserted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResultConfirmed"): EventFragment;
}

export class Descartes extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DescartesInterface;

  functions: {
    abortByDeadline(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "abortByDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    challenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "challenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    challengeDrives(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "challengeDrives(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    destruct(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "destruct(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentNonce: BigNumber }>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentNonce: BigNumber }>;

    getPartyState(
      _index: BigNumberish,
      _p: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        isParty: boolean;
        hasVoted: boolean;
        hasCheated: boolean;
      }
    >;

    "getPartyState(uint256,address)"(
      _index: BigNumberish,
      _p: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        isParty: boolean;
        hasVoted: boolean;
        hasCheated: boolean;
      }
    >;

    getResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, string, string]>;

    "getResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, string, string]>;

    getState(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        string[],
        string,
        ([
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          boolean,
          boolean
        ] & {
          position: BigNumber;
          driveLog2Size: number;
          directValue: string;
          loggerIpfsPath: string;
          loggerRootHash: string;
          provider: string;
          waitsProvider: boolean;
          needsLogger: boolean;
        })[],
        [boolean, boolean, boolean, BigNumber] & {
          isParty: boolean;
          hasVoted: boolean;
          hasCheated: boolean;
          arrayIdx: BigNumber;
        }
      ] & {
        user: [boolean, boolean, boolean, BigNumber] & {
          isParty: boolean;
          hasVoted: boolean;
          hasCheated: boolean;
          arrayIdx: BigNumber;
        };
      }
    >;

    "getState(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        string[],
        string,
        ([
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          boolean,
          boolean
        ] & {
          position: BigNumber;
          driveLog2Size: number;
          directValue: string;
          loggerIpfsPath: string;
          loggerRootHash: string;
          provider: string;
          waitsProvider: boolean;
          needsLogger: boolean;
        })[],
        [boolean, boolean, boolean, BigNumber] & {
          isParty: boolean;
          hasVoted: boolean;
          hasCheated: boolean;
          arrayIdx: BigNumber;
        }
      ] & {
        user: [boolean, boolean, boolean, BigNumber] & {
          isParty: boolean;
          hasVoted: boolean;
          hasCheated: boolean;
          arrayIdx: BigNumber;
        };
      }
    >;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    provideDirectDrive(
      _index: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "provideDirectDrive(uint256,bytes)"(
      _index: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    provideLoggerDrive(
      _index: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "provideLoggerDrive(uint256,bytes32)"(
      _index: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealLoggerDrive(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revealLoggerDrive(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitClaim(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      _drivesSiblings: BytesLike[][],
      _output: BytesLike,
      _outputSiblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])"(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      _drivesSiblings: BytesLike[][],
      _output: BytesLike,
      _outputSiblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    winByVG(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "winByVG(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  abortByDeadline(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "abortByDeadline(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  challenge(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "challenge(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  challengeDrives(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "challengeDrives(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  destruct(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "destruct(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentState(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCurrentState(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNonce(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPartyState(
    _index: BigNumberish,
    _p: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean] & {
      isParty: boolean;
      hasVoted: boolean;
      hasCheated: boolean;
    }
  >;

  "getPartyState(uint256,address)"(
    _index: BigNumberish,
    _p: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean] & {
      isParty: boolean;
      hasVoted: boolean;
      hasCheated: boolean;
    }
  >;

  getResult(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, string, string]>;

  "getResult(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, string, string]>;

  getState(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      string[],
      string[],
      string,
      ([BigNumber, number, string, string, string, string, boolean, boolean] & {
        position: BigNumber;
        driveLog2Size: number;
        directValue: string;
        loggerIpfsPath: string;
        loggerRootHash: string;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      })[],
      [boolean, boolean, boolean, BigNumber] & {
        isParty: boolean;
        hasVoted: boolean;
        hasCheated: boolean;
        arrayIdx: BigNumber;
      }
    ] & {
      user: [boolean, boolean, boolean, BigNumber] & {
        isParty: boolean;
        hasVoted: boolean;
        hasCheated: boolean;
        arrayIdx: BigNumber;
      };
    }
  >;

  "getState(uint256,address)"(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      string[],
      string[],
      string,
      ([BigNumber, number, string, string, string, string, boolean, boolean] & {
        position: BigNumber;
        driveLog2Size: number;
        directValue: string;
        loggerIpfsPath: string;
        loggerRootHash: string;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      })[],
      [boolean, boolean, boolean, BigNumber] & {
        isParty: boolean;
        hasVoted: boolean;
        hasCheated: boolean;
        arrayIdx: BigNumber;
      }
    ] & {
      user: [boolean, boolean, boolean, BigNumber] & {
        isParty: boolean;
        hasVoted: boolean;
        hasCheated: boolean;
        arrayIdx: BigNumber;
      };
    }
  >;

  getSubInstances(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
  >;

  "getSubInstances(uint256,address)"(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
  >;

  instantiate(
    _finalTime: BigNumberish,
    _templateHash: BytesLike,
    _outputPosition: BigNumberish,
    _outputLog2Size: BigNumberish,
    _roundDuration: BigNumberish,
    parties: string[],
    _inputDrives: {
      position: BigNumberish;
      driveLog2Size: BigNumberish;
      directValue: BytesLike;
      loggerIpfsPath: BytesLike;
      loggerRootHash: BytesLike;
      provider: string;
      waitsProvider: boolean;
      needsLogger: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
    _finalTime: BigNumberish,
    _templateHash: BytesLike,
    _outputPosition: BigNumberish,
    _outputLog2Size: BigNumberish,
    _roundDuration: BigNumberish,
    parties: string[],
    _inputDrives: {
      position: BigNumberish;
      driveLog2Size: BigNumberish;
      directValue: BytesLike;
      loggerIpfsPath: BytesLike;
      loggerRootHash: BytesLike;
      provider: string;
      waitsProvider: boolean;
      needsLogger: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isActive(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isConcerned(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConcerned(uint256,address)"(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  provideDirectDrive(
    _index: BigNumberish,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "provideDirectDrive(uint256,bytes)"(
    _index: BigNumberish,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  provideLoggerDrive(
    _index: BigNumberish,
    _root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "provideLoggerDrive(uint256,bytes32)"(
    _index: BigNumberish,
    _root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealLoggerDrive(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revealLoggerDrive(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitClaim(
    _index: BigNumberish,
    _claimedFinalHash: BytesLike,
    _drivesSiblings: BytesLike[][],
    _output: BytesLike,
    _outputSiblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])"(
    _index: BigNumberish,
    _claimedFinalHash: BytesLike,
    _drivesSiblings: BytesLike[][],
    _output: BytesLike,
    _outputSiblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  winByVG(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "winByVG(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    abortByDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "abortByDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    challenge(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "challenge(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    challengeDrives(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "challengeDrives(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    destruct(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "destruct(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartyState(
      _index: BigNumberish,
      _p: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        isParty: boolean;
        hasVoted: boolean;
        hasCheated: boolean;
      }
    >;

    "getPartyState(uint256,address)"(
      _index: BigNumberish,
      _p: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        isParty: boolean;
        hasVoted: boolean;
        hasCheated: boolean;
      }
    >;

    getResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, string, string]>;

    "getResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, string, string]>;

    getState(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        string[],
        string,
        ([
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          boolean,
          boolean
        ] & {
          position: BigNumber;
          driveLog2Size: number;
          directValue: string;
          loggerIpfsPath: string;
          loggerRootHash: string;
          provider: string;
          waitsProvider: boolean;
          needsLogger: boolean;
        })[],
        [boolean, boolean, boolean, BigNumber] & {
          isParty: boolean;
          hasVoted: boolean;
          hasCheated: boolean;
          arrayIdx: BigNumber;
        }
      ] & {
        user: [boolean, boolean, boolean, BigNumber] & {
          isParty: boolean;
          hasVoted: boolean;
          hasCheated: boolean;
          arrayIdx: BigNumber;
        };
      }
    >;

    "getState(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        string[],
        string,
        ([
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          boolean,
          boolean
        ] & {
          position: BigNumber;
          driveLog2Size: number;
          directValue: string;
          loggerIpfsPath: string;
          loggerRootHash: string;
          provider: string;
          waitsProvider: boolean;
          needsLogger: boolean;
        })[],
        [boolean, boolean, boolean, BigNumber] & {
          isParty: boolean;
          hasVoted: boolean;
          hasCheated: boolean;
          arrayIdx: BigNumber;
        }
      ] & {
        user: [boolean, boolean, boolean, BigNumber] & {
          isParty: boolean;
          hasVoted: boolean;
          hasCheated: boolean;
          arrayIdx: BigNumber;
        };
      }
    >;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    provideDirectDrive(
      _index: BigNumberish,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "provideDirectDrive(uint256,bytes)"(
      _index: BigNumberish,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    provideLoggerDrive(
      _index: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "provideLoggerDrive(uint256,bytes32)"(
      _index: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revealLoggerDrive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revealLoggerDrive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitClaim(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      _drivesSiblings: BytesLike[][],
      _output: BytesLike,
      _outputSiblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])"(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      _drivesSiblings: BytesLike[][],
      _output: BytesLike,
      _outputSiblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    winByVG(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "winByVG(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChallengeStarted(
      _index: null
    ): TypedEventFilter<[BigNumber], { _index: BigNumber }>;

    ClaimSubmitted(
      _index: null,
      _claimedFinalHash: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _index: BigNumber; _claimedFinalHash: string }
    >;

    DescartesCreated(
      _index: null
    ): TypedEventFilter<[BigNumber], { _index: BigNumber }>;

    DescartesFinished(
      _index: null,
      _state: null
    ): TypedEventFilter<
      [BigNumber, number],
      { _index: BigNumber; _state: number }
    >;

    DriveInserted(
      _index: null,
      _drive: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          boolean,
          boolean
        ] & {
          position: BigNumber;
          driveLog2Size: number;
          directValue: string;
          loggerIpfsPath: string;
          loggerRootHash: string;
          provider: string;
          waitsProvider: boolean;
          needsLogger: boolean;
        }
      ],
      {
        _index: BigNumber;
        _drive: [
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          boolean,
          boolean
        ] & {
          position: BigNumber;
          driveLog2Size: number;
          directValue: string;
          loggerIpfsPath: string;
          loggerRootHash: string;
          provider: string;
          waitsProvider: boolean;
          needsLogger: boolean;
        };
      }
    >;

    ResultConfirmed(
      _index: null
    ): TypedEventFilter<[BigNumber], { _index: BigNumber }>;
  };

  estimateGas: {
    abortByDeadline(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "abortByDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    challenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "challenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    challengeDrives(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "challengeDrives(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    destruct(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "destruct(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartyState(
      _index: BigNumberish,
      _p: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPartyState(uint256,address)"(
      _index: BigNumberish,
      _p: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getState(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provideDirectDrive(
      _index: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "provideDirectDrive(uint256,bytes)"(
      _index: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    provideLoggerDrive(
      _index: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "provideLoggerDrive(uint256,bytes32)"(
      _index: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealLoggerDrive(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revealLoggerDrive(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitClaim(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      _drivesSiblings: BytesLike[][],
      _output: BytesLike,
      _outputSiblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])"(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      _drivesSiblings: BytesLike[][],
      _output: BytesLike,
      _outputSiblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    winByVG(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "winByVG(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abortByDeadline(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "abortByDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    challenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "challenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    challengeDrives(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "challengeDrives(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destruct(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "destruct(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPartyState(
      _index: BigNumberish,
      _p: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPartyState(uint256,address)"(
      _index: BigNumberish,
      _p: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getState(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[])"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provideDirectDrive(
      _index: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "provideDirectDrive(uint256,bytes)"(
      _index: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    provideLoggerDrive(
      _index: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "provideLoggerDrive(uint256,bytes32)"(
      _index: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealLoggerDrive(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revealLoggerDrive(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitClaim(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      _drivesSiblings: BytesLike[][],
      _output: BytesLike,
      _outputSiblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])"(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      _drivesSiblings: BytesLike[][],
      _output: BytesLike,
      _outputSiblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    winByVG(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "winByVG(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
