"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Merkle__factory = void 0;
var ethers_1 = require("ethers");
var Merkle__factory = /** @class */ (function (_super) {
    __extends(Merkle__factory, _super);
    function Merkle__factory(signer) {
        return _super.call(this, _abi, _bytecode, signer) || this;
    }
    Merkle__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    Merkle__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    Merkle__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    Merkle__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    Merkle__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    return Merkle__factory;
}(ethers_1.ContractFactory));
exports.Merkle__factory = Merkle__factory;
var _abi = [
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "hashes",
                type: "bytes32[]",
            },
        ],
        name: "calculateRootFromPowerOfTwo",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "number",
                type: "uint256",
            },
        ],
        name: "getLog2Floor",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint8",
                name: "_log2Size",
                type: "uint8",
            },
        ],
        name: "getPristineHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "_position",
                type: "uint64",
            },
            {
                internalType: "bytes8",
                name: "_value",
                type: "bytes8",
            },
            {
                internalType: "bytes32[]",
                name: "proof",
                type: "bytes32[]",
            },
        ],
        name: "getRoot",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "_position",
                type: "uint64",
            },
            {
                internalType: "uint8",
                name: "_logOfSize",
                type: "uint8",
            },
            {
                internalType: "bytes32",
                name: "_drive",
                type: "bytes32",
            },
            {
                internalType: "bytes32[]",
                name: "siblings",
                type: "bytes32[]",
            },
        ],
        name: "getRootWithDrive",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "number",
                type: "uint256",
            },
        ],
        name: "isPowerOf2",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
var _bytecode = "0x6108f5610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806306c8e54b1461007157806382b0eab8146100a45780638492d93b14610157578063a734268814610217578063d7304dd914610237578063d82ae4b1146102f7575b600080fd5b61008e6004803603602081101561008757600080fd5b5035610328565b6040805160ff9092168252519081900360200190f35b610145600480360360208110156100ba57600080fd5b810190602081018135600160201b8111156100d457600080fd5b8201836020820111156100e657600080fd5b803590602001918460208302840111600160201b8311171561010757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061034c945050505050565b60408051918252519081900360200190f35b6101456004803603606081101561016d57600080fd5b6001600160401b03823516916001600160c01b031960208201351691810190606081016040820135600160201b8111156101a657600080fd5b8201836020820111156101b857600080fd5b803590602001918460208302840111600160201b831117156101d957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061049c945050505050565b6101456004803603602081101561022d57600080fd5b503560ff166104e4565b6101456004803603608081101561024d57600080fd5b6001600160401b038235169160ff6020820135169160408201359190810190608081016060820135600160201b81111561028657600080fd5b82018360208201111561029857600080fd5b803590602001918460208302840111600160201b831117156102b957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506105f4945050505050565b6103146004803603602081101561030d57600080fd5b5035610829565b604080519115158252519081900360200190f35b600080600183901c5b8015610343576001918201911c610331565b5090505b919050565b60006103588251610829565b6103935760405162461bcd60e51b81526004018080602001828103825260308152602001806108686030913960400191505060405180910390fd5b8151600114156103b957816000815181106103aa57fe5b60200260200101519050610347565b606060018351901c6001600160401b03811180156103d657600080fd5b50604051908082528060200260200182016040528015610400578160200160208202803683370190505b50905060005b835181101561048a5783818151811061041b57fe5b602002602001015184826001018151811061043257fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012082600183901c8151811061047757fe5b6020908102919091010152600201610406565b506104948161034c565b915050610347565b604080516001600160c01b0319841660208083019190915282518083036008018152602890920190925280519101206000906104db85600383866105f4565b95945050505050565b600060038260ff16101561053f576040805162461bcd60e51b815260206004820152601b60248201527f48617320746f206265206174206c65617374206f6e6520776f72640000000000604482015290519081900360640190fd5b60408260ff1611156105825760405162461bcd60e51b81526004018080602001828103825260288152602001806108986028913960400191505060405180910390fd5b60408051600060208083018290528351808403600801815260289093019093528151919092012060035b8460ff168110156105ec576040805160208082018590528183019490945281518082038301815260609091019091528051920191909120906001016105ac565b509392505050565b600060038460ff161015610649576040805162461bcd60e51b8152602060048201526017602482015276135d5cdd08189948185d081b19585cdd0818481ddbdc99604a1b604482015290519081900360640190fd5b60408460ff16111561068c5760405162461bcd60e51b81526004018080602001828103825260288152602001806108986028913960400191505060405180910390fd5b60ff841660020a600019810186166001600160401b0316156106ef576040805162461bcd60e51b8152602060048201526017602482015276141bdcda5d1a5bdb881a5cc81b9bdd08185b1a59db9959604a1b604482015290519081900360640190fd5b8460400360ff1683511461074a576040805162461bcd60e51b815260206004820152601b60248201527f50726f6f66206c656e67746820646f6573206e6f74206d617463680000000000604482015290519081900360640190fd5b8360005b8451816001600160401b0316101561081e576001600160401b038381168183161b8916166107c8578185826001600160401b03168151811061078c57fe5b60200260200101516040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209150610816565b84816001600160401b0316815181106107dd57fe5b60200260200101518260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091505b60010161074e565b509695505050505050565b6000818061083b576000915050610347565b5b6001811661084c5760011c61083c565b60011c8061085e576001915050610347565b5060009291505056fe54686520696e707574206172726179206d75737420636f6e7461696e20706f776572206f66203220656c656d656e747343616e6e6f7420626520626967676572207468616e20746865206d616368696e6520697473656c66a26469706673582212201e699353a127de7ad444e74e61fe2abc53b70dbfafc6a939cd022faf4634860664736f6c63430007040033";
