{
  "contractName": "Merkle",
  "sourceName": "cache/solpp-generated-contracts/test/TestMerkle.sol",
  "abi": [],
  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200af83c73fb638ab63b7c6a1c1d73f8954e22f881a0ced9e23d0b134900fffee464736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200af83c73fb638ab63b7c6a1c1d73f8954e22f881a0ced9e23d0b134900fffee464736f6c63430007040033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Library for Merkle proofs",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xF8 EXTCODECOPY PUSH20 0xFB638AB63B7C6A1C1D73F8954E22F881A0CED9E2 RETURNDATASIZE SIGNEXTEND SGT 0x49 STOP SELFDESTRUCT INVALID 0xE4 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
      "sourceMap": "681:1107:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xF8 EXTCODECOPY PUSH20 0xFB638AB63B7C6A1C1D73F8954E22F881A0CED9E2 RETURNDATASIZE SIGNEXTEND SGT 0x49 STOP SELFDESTRUCT INVALID 0xE4 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
      "sourceMap": "681:1107:0:-:0;;;;;;;;"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17200",
        "executionCost": "97",
        "totalCost": "17297"
      },
      "internal": {
        "calculateRootFromPowerOfTwo(bytes32[] memory)": "infinite",
        "getLog2Floor(uint256)": "infinite",
        "getPristineHash(uint8)": "infinite",
        "getRoot(uint64,bytes8,bytes32[] memory)": "infinite",
        "getRootWithDrive(uint64,uint64,bytes32,bytes32[] memory)": "infinite",
        "isPowerOf2(uint256)": "infinite"
      }
    },
    "methodIdentifiers": {}
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for Merkle proofs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/test/TestMerkle.sol\":\"Merkle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":110},\"remappings\":[]},\"sources\":{\"cache/solpp-generated-contracts/test/TestMerkle.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\n// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Library for Merkle proofs\\n\\n\\nlibrary Merkle {\\n    function getPristineHash(uint8 _log2Size)\\n        internal\\n        pure\\n        returns (bytes32 ret)\\n    {\\n        return ret;\\n    }\\n\\n    function getRoot(\\n        uint64 _position,\\n        bytes8 _value,\\n        bytes32[] memory proof\\n    ) internal pure returns (bytes32 ret) {\\n        return ret;\\n    }\\n\\n    function getRootWithDrive(\\n        uint64 _position,\\n        uint64 _logOfSize,\\n        bytes32 _drive,\\n        bytes32[] memory siblings\\n    ) internal pure returns (bytes32 ret) {\\n        return ret;\\n    }\\n\\n    function getLog2Floor(uint256 number) internal pure returns (uint32 ret) {\\n        return ret;\\n    }\\n\\n    function isPowerOf2(uint256 number) internal pure returns (bool) {\\n        return true;\\n    }\\n\\n    /// @notice Calculate the root of Merkle tree from an array of power of 2 elements\\n    /// @param hashes The array containing power of 2 elements\\n    /// @return ret The root hash being calculated\\n    function calculateRootFromPowerOfTwo(bytes32[] memory hashes)\\n        internal\\n        pure\\n        returns (bytes32 ret)\\n    {\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0x164030d91926ba240c45f4de8469c1934eb5e2436ea7c1d8a2b4969a686f1c87\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}