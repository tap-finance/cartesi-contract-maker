/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WorkerAuthManagerInterface extends ethers.utils.Interface {
  functions: {
    "authorize(address,address)": FunctionFragment;
    "deauthorize(address,address)": FunctionFragment;
    "getOwner(address)": FunctionFragment;
    "isAuthorized(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authorize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;

  events: {
    "Authorization(address,address,address)": EventFragment;
    "Deauthorization(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deauthorization"): EventFragment;
}

export class WorkerAuthManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WorkerAuthManagerInterface;

  functions: {
    authorize(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authorize(address,address)"(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deauthorize(
      _workerAddress: string,
      _dappAddresses: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deauthorize(address,address)"(
      _workerAddress: string,
      _dappAddresses: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOwner(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getOwner(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAuthorized(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAuthorized(address,address)"(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  authorize(
    _workerAddress: string,
    _dappAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authorize(address,address)"(
    _workerAddress: string,
    _dappAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deauthorize(
    _workerAddress: string,
    _dappAddresses: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deauthorize(address,address)"(
    _workerAddress: string,
    _dappAddresses: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOwner(workerAddress: string, overrides?: CallOverrides): Promise<string>;

  "getOwner(address)"(
    workerAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isAuthorized(
    _workerAddress: string,
    _dappAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAuthorized(address,address)"(
    _workerAddress: string,
    _dappAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    authorize(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorize(address,address)"(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deauthorize(
      _workerAddress: string,
      _dappAddresses: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deauthorize(address,address)"(
      _workerAddress: string,
      _dappAddresses: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwner(workerAddress: string, overrides?: CallOverrides): Promise<string>;

    "getOwner(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isAuthorized(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAuthorized(address,address)"(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Authorization(
      user: string | null,
      worker: string | null,
      dapp: string | null
    ): TypedEventFilter<
      [string, string, string],
      { user: string; worker: string; dapp: string }
    >;

    Deauthorization(
      user: string | null,
      worker: string | null,
      dapp: string | null
    ): TypedEventFilter<
      [string, string, string],
      { user: string; worker: string; dapp: string }
    >;
  };

  estimateGas: {
    authorize(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "authorize(address,address)"(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deauthorize(
      _workerAddress: string,
      _dappAddresses: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deauthorize(address,address)"(
      _workerAddress: string,
      _dappAddresses: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOwner(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwner(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(address,address)"(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorize(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authorize(address,address)"(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deauthorize(
      _workerAddress: string,
      _dappAddresses: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deauthorize(address,address)"(
      _workerAddress: string,
      _dappAddresses: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwner(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address,address)"(
      _workerAddress: string,
      _dappAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
