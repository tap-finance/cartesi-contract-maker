/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WorkerManagerImplInterface extends ethers.utils.Interface {
  functions: {
    "acceptJob()": FunctionFragment;
    "cancelHire(address)": FunctionFragment;
    "getOwner(address)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "hire(address)": FunctionFragment;
    "isAvailable(address)": FunctionFragment;
    "isOwned(address)": FunctionFragment;
    "isPending(address)": FunctionFragment;
    "isRetired(address)": FunctionFragment;
    "rejectJob()": FunctionFragment;
    "retire(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acceptJob", values?: undefined): string;
  encodeFunctionData(functionFragment: "cancelHire", values: [string]): string;
  encodeFunctionData(functionFragment: "getOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(functionFragment: "hire", values: [string]): string;
  encodeFunctionData(functionFragment: "isAvailable", values: [string]): string;
  encodeFunctionData(functionFragment: "isOwned", values: [string]): string;
  encodeFunctionData(functionFragment: "isPending", values: [string]): string;
  encodeFunctionData(functionFragment: "isRetired", values: [string]): string;
  encodeFunctionData(functionFragment: "rejectJob", values?: undefined): string;
  encodeFunctionData(functionFragment: "retire", values: [string]): string;

  decodeFunctionResult(functionFragment: "acceptJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelHire", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hire", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRetired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rejectJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retire", data: BytesLike): Result;

  events: {
    "JobAccepted(address,address)": EventFragment;
    "JobOffer(address,address)": EventFragment;
    "JobRejected(address,address)": EventFragment;
    "Retired(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JobAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Retired"): EventFragment;
}

export class WorkerManagerImpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WorkerManagerImplInterface;

  functions: {
    acceptJob(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptJob()"(overrides?: Overrides): Promise<ContractTransaction>;

    cancelHire(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelHire(address)"(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOwner(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getOwner(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUser(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUser(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hire(
      _workerAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "hire(address)"(
      _workerAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    isAvailable(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAvailable(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwned(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOwned(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPending(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPending(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRetired(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRetired(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rejectJob(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "rejectJob()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    retire(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "retire(address)"(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptJob(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptJob()"(overrides?: Overrides): Promise<ContractTransaction>;

  cancelHire(
    _workerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelHire(address)"(
    _workerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOwner(_workerAddress: string, overrides?: CallOverrides): Promise<string>;

  "getOwner(address)"(
    _workerAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getUser(_workerAddress: string, overrides?: CallOverrides): Promise<string>;

  "getUser(address)"(
    _workerAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  hire(
    _workerAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "hire(address)"(
    _workerAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  isAvailable(
    workerAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAvailable(address)"(
    workerAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwned(_workerAddress: string, overrides?: CallOverrides): Promise<boolean>;

  "isOwned(address)"(
    _workerAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPending(workerAddress: string, overrides?: CallOverrides): Promise<boolean>;

  "isPending(address)"(
    workerAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRetired(
    _workerAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRetired(address)"(
    _workerAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rejectJob(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "rejectJob()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  retire(
    _workerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "retire(address)"(
    _workerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptJob(overrides?: CallOverrides): Promise<void>;

    "acceptJob()"(overrides?: CallOverrides): Promise<void>;

    cancelHire(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelHire(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwner(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOwner(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getUser(_workerAddress: string, overrides?: CallOverrides): Promise<string>;

    "getUser(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    hire(_workerAddress: string, overrides?: CallOverrides): Promise<void>;

    "hire(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAvailable(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAvailable(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwned(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOwned(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPending(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPending(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRetired(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRetired(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rejectJob(overrides?: CallOverrides): Promise<void>;

    "rejectJob()"(overrides?: CallOverrides): Promise<void>;

    retire(_workerAddress: string, overrides?: CallOverrides): Promise<void>;

    "retire(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    JobAccepted(
      worker: string | null,
      user: string | null
    ): TypedEventFilter<[string, string], { worker: string; user: string }>;

    JobOffer(
      worker: string | null,
      user: string | null
    ): TypedEventFilter<[string, string], { worker: string; user: string }>;

    JobRejected(
      worker: string | null,
      user: string | null
    ): TypedEventFilter<[string, string], { worker: string; user: string }>;

    Retired(
      worker: string | null,
      user: string | null
    ): TypedEventFilter<[string, string], { worker: string; user: string }>;
  };

  estimateGas: {
    acceptJob(overrides?: Overrides): Promise<BigNumber>;

    "acceptJob()"(overrides?: Overrides): Promise<BigNumber>;

    cancelHire(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelHire(address)"(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOwner(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwner(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUser(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hire(
      _workerAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "hire(address)"(
      _workerAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    isAvailable(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAvailable(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwned(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOwned(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPending(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPending(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRetired(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRetired(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectJob(overrides?: PayableOverrides): Promise<BigNumber>;

    "rejectJob()"(overrides?: PayableOverrides): Promise<BigNumber>;

    retire(_workerAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "retire(address)"(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptJob(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptJob()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    cancelHire(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelHire(address)"(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwner(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUser(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hire(
      _workerAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "hire(address)"(
      _workerAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    isAvailable(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAvailable(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwned(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwned(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPending(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPending(address)"(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRetired(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRetired(address)"(
      _workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectJob(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "rejectJob()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    retire(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "retire(address)"(
      _workerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
