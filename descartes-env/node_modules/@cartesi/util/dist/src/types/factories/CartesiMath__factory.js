"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartesiMath__factory = void 0;
const contracts_1 = require("@ethersproject/contracts");
class CartesiMath__factory extends contracts_1.ContractFactory {
    constructor(signer) {
        super(_abi, _bytecode, signer);
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static connect(address, signerOrProvider) {
        return new contracts_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.CartesiMath__factory = CartesiMath__factory;
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_num",
                type: "uint256",
            },
        ],
        name: "getLog2TableTimes1M",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_num",
                type: "uint256",
            },
        ],
        name: "log2ApproxTimes1M",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x610439610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806332ef283b14610045578063e3581b6814610074575b600080fd5b6100626004803603602081101561005b57600080fd5b5035610091565b60408051918252519081900360200190f35b6100626004803603602081101561008a57600080fd5b5035610107565b600080805b60038160ff1610156100fb576000604051806101a00160405280610180815260200161028461018091398260ff166001870360030201815181106100d657fe5b01602001516001600160f81b03191660ff60088402161c929092179150600101610096565b5060e81c90505b919050565b6000808211610155576040805162461bcd60e51b81526020600482015260156024820152744e756d6265722063616e6e6f74206265207a65726f60581b604482015290519081900360640190fd5b6000826001141561016a576000915050610102565b5b608083111561018057600192831c920161016b565b61019f61018c84610091565b61019983620f42406101a6565b90610208565b9392505050565b6000826101b557506000610202565b828202828482816101c257fe5b04146101ff5760405162461bcd60e51b81526004018080602001828103825260218152602001806102636021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156101ff576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f770000000f4240182f421e8480236e082771822ad63a2dc6c0305e8532b04834c96736b3c23876d73a187a3b9d4a3d09003e5ea63fa0c540d17741f28843057d440ba745062945f60246dc1047b917488dc7495aba4a207c4adf8a4b98544c4b404cf8aa4da0e64e44434ee3054f7d6d5013b750a61a5134c851bff05247bd52cc58534de753cc8d54486954c19c55384255ac75561e50568de956fb575766b057d00758376f589cfa5900ba5962bc59c3135a21ca5a7ef15ada945b34bf5b8d805be4df5c3aea5c8fa95ce3265d356c5d86835dd6735e25455e73005ebfad5f0b525f55f75f9fa25fe85a60302460770860bd0a61023061467f6189fd61ccae620e98624fbf62902762cfd5630ecd634d12638aa963c7966403dc643f7f647a8264b4e864eeb56527ec6560906598a365d029660724663d9766738566a8f066ddda6712476746386779af67acaf67df3a6811526842fa68743268a4fc68d55c6905536934e169640a6992cf69c13169ef326a1cd46a4a186a76ff6aa38c6acfc0a26469706673582212204f905fe0579cad7d46c7f4e810e21ce57ab2a65919f34804a7c6c2ba21f5863164736f6c63430007040033";
