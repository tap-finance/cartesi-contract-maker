/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VGInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "claimVictoryByTime(uint256)": FunctionFragment;
    "getCurrentState(uint256)": FunctionFragment;
    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getNonce(uint256)": FunctionFragment;
    "getPartitionGameIndex(uint256)": FunctionFragment;
    "getPartitionQuerySize(uint256)": FunctionFragment;
    "getSubInstances(uint256,address)": FunctionFragment;
    "instantiate(address,address,uint256,address,bytes32,bytes32,uint256)": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "isConcerned(uint256,address)": FunctionFragment;
    "settleVerificationGame(uint256)": FunctionFragment;
    "startMachineRunChallenge(uint256)": FunctionFragment;
    "stateIsFinishedChallengerWon(uint256)": FunctionFragment;
    "stateIsFinishedClaimerWon(uint256)": FunctionFragment;
    "winByPartitionTimeout(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimVictoryByTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxInstanceDuration",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartitionGameIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartitionQuerySize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubInstances",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConcerned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleVerificationGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startMachineRunChallenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsFinishedChallengerWon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsFinishedClaimerWon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "winByPartitionTimeout",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimVictoryByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxInstanceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPartitionGameIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPartitionQuerySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConcerned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleVerificationGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startMachineRunChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsFinishedChallengerWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsFinishedClaimerWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winByPartitionTimeout",
    data: BytesLike
  ): Result;

  events: {};
}

export class VGInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VGInterfaceInterface;

  functions: {
    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPartitionGameIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPartitionGameIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPartitionQuerySize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPartitionQuerySize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    instantiate(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "instantiate(address,address,uint256,address,bytes32,bytes32,uint256)"(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    settleVerificationGame(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "settleVerificationGame(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startMachineRunChallenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startMachineRunChallenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stateIsFinishedChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsFinishedChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsFinishedClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsFinishedClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    winByPartitionTimeout(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "winByPartitionTimeout(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimVictoryByTime(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVictoryByTime(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentState(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCurrentState(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMaxInstanceDuration(
    _roundDuration: BigNumberish,
    _timeToStartMachine: BigNumberish,
    _partitionSize: BigNumberish,
    _maxCycle: BigNumberish,
    _picoSecondsToRunInsn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
    _roundDuration: BigNumberish,
    _timeToStartMachine: BigNumberish,
    _partitionSize: BigNumberish,
    _maxCycle: BigNumberish,
    _picoSecondsToRunInsn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNonce(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPartitionGameIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPartitionGameIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPartitionQuerySize(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPartitionQuerySize(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubInstances(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
  >;

  "getSubInstances(uint256,address)"(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
  >;

  instantiate(
    _challenger: string,
    _claimer: string,
    _roundDuration: BigNumberish,
    _machineAddress: string,
    _initialHash: BytesLike,
    _claimerFinalHash: BytesLike,
    _finalTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "instantiate(address,address,uint256,address,bytes32,bytes32,uint256)"(
    _challenger: string,
    _claimer: string,
    _roundDuration: BigNumberish,
    _machineAddress: string,
    _initialHash: BytesLike,
    _claimerFinalHash: BytesLike,
    _finalTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isActive(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isConcerned(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConcerned(uint256,address)"(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  settleVerificationGame(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "settleVerificationGame(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startMachineRunChallenge(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startMachineRunChallenge(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stateIsFinishedChallengerWon(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsFinishedChallengerWon(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsFinishedClaimerWon(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsFinishedClaimerWon(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  winByPartitionTimeout(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "winByPartitionTimeout(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartitionGameIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPartitionGameIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartitionQuerySize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPartitionQuerySize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    instantiate(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instantiate(address,address,uint256,address,bytes32,bytes32,uint256)"(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    settleVerificationGame(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleVerificationGame(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startMachineRunChallenge(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "startMachineRunChallenge(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stateIsFinishedChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsFinishedChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsFinishedClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsFinishedClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    winByPartitionTimeout(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "winByPartitionTimeout(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartitionGameIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPartitionGameIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartitionQuerySize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPartitionQuerySize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instantiate(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "instantiate(address,address,uint256,address,bytes32,bytes32,uint256)"(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleVerificationGame(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "settleVerificationGame(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startMachineRunChallenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startMachineRunChallenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stateIsFinishedChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsFinishedChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsFinishedClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsFinishedClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winByPartitionTimeout(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "winByPartitionTimeout(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPartitionGameIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPartitionGameIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPartitionQuerySize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPartitionQuerySize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instantiate(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "instantiate(address,address,uint256,address,bytes32,bytes32,uint256)"(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleVerificationGame(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "settleVerificationGame(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startMachineRunChallenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startMachineRunChallenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stateIsFinishedChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsFinishedChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsFinishedClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsFinishedClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winByPartitionTimeout(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "winByPartitionTimeout(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
