/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PartitionInstantiatorInterface extends ethers.utils.Interface {
  functions: {
    "claimVictoryByTime(uint256)": FunctionFragment;
    "currentIndex()": FunctionFragment;
    "divergenceTime(uint256)": FunctionFragment;
    "getCurrentState(uint256)": FunctionFragment;
    "getCurrentStateDeadline(uint256)": FunctionFragment;
    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getNonce(uint256)": FunctionFragment;
    "getPartitionGameIndex(uint256)": FunctionFragment;
    "getQuerySize(uint256)": FunctionFragment;
    "getState(uint256,address)": FunctionFragment;
    "getSubInstances(uint256,address)": FunctionFragment;
    "instantiate(address,address,bytes32,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "isConcerned(uint256,address)": FunctionFragment;
    "log2OverTwo(uint256)": FunctionFragment;
    "makeQuery(uint256,uint256,uint256,uint256)": FunctionFragment;
    "presentDivergence(uint256,uint256)": FunctionFragment;
    "queryArray(uint256,uint256)": FunctionFragment;
    "replyQuery(uint256,uint256[],bytes32[])": FunctionFragment;
    "stateIsChallengerWon(uint256)": FunctionFragment;
    "stateIsClaimerWon(uint256)": FunctionFragment;
    "stateIsDivergenceFound(uint256)": FunctionFragment;
    "stateIsWaitingHashes(uint256)": FunctionFragment;
    "stateIsWaitingQuery(uint256)": FunctionFragment;
    "timeHash(uint256,uint256)": FunctionFragment;
    "timeSubmitted(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimVictoryByTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "divergenceTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStateDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxInstanceDuration",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartitionGameIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuerySize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubInstances",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate",
    values: [
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConcerned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "log2OverTwo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeQuery",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "presentDivergence",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryArray",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "replyQuery",
    values: [BigNumberish, BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsChallengerWon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsClaimerWon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsDivergenceFound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsWaitingHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsWaitingQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeSubmitted",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimVictoryByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divergenceTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStateDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxInstanceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPartitionGameIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuerySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConcerned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "log2OverTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeQuery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presentDivergence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "replyQuery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateIsChallengerWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsClaimerWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsDivergenceFound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsWaitingHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsWaitingQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeSubmitted",
    data: BytesLike
  ): Result;

  events: {
    "ChallengeEnded(uint256,uint8)": EventFragment;
    "DivergenceFound(uint256,uint256,bytes32,bytes32)": EventFragment;
    "HashesPosted(uint256)": EventFragment;
    "PartitionCreated(uint256)": EventFragment;
    "QueryPosted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengeEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DivergenceFound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HashesPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartitionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueryPosted"): EventFragment;
}

export class PartitionInstantiator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PartitionInstantiatorInterface;

  functions: {
    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    divergenceTime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "divergenceTime(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentStateDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { time: BigNumber }>;

    "getCurrentStateDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { time: BigNumber }>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentNonce: BigNumber }>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentNonce: BigNumber }>;

    getPartitionGameIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPartitionGameIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuerySize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getQuerySize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber[],
        boolean[],
        string[],
        string,
        BigNumber[]
      ] & {
        _challenger: string;
        _claimer: string;
        _queryArray: BigNumber[];
        _submittedArray: boolean[];
        _hashArray: string[];
        _currentState: string;
        _uintValues: BigNumber[];
      }
    >;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber[],
        boolean[],
        string[],
        string,
        BigNumber[]
      ] & {
        _challenger: string;
        _claimer: string;
        _queryArray: BigNumber[];
        _submittedArray: boolean[];
        _hashArray: string[];
        _currentState: string;
        _uintValues: BigNumber[];
      }
    >;

    getSubInstances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getSubInstances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    instantiate(
      _challenger: string,
      _claimer: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      _querySize: BigNumberish,
      _roundDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "instantiate(address,address,bytes32,bytes32,uint256,uint256,uint256)"(
      _challenger: string,
      _claimer: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      _querySize: BigNumberish,
      _roundDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    log2OverTwo(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;

    "log2OverTwo(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;

    makeQuery(
      _index: BigNumberish,
      queryPiece: BigNumberish,
      leftPoint: BigNumberish,
      rightPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makeQuery(uint256,uint256,uint256,uint256)"(
      _index: BigNumberish,
      queryPiece: BigNumberish,
      leftPoint: BigNumberish,
      rightPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    presentDivergence(
      _index: BigNumberish,
      _divergenceTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "presentDivergence(uint256,uint256)"(
      _index: BigNumberish,
      _divergenceTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queryArray(
      _index: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "queryArray(uint256,uint256)"(
      _index: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    replyQuery(
      _index: BigNumberish,
      postedTimes: BigNumberish[],
      postedHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "replyQuery(uint256,uint256[],bytes32[])"(
      _index: BigNumberish,
      postedTimes: BigNumberish[],
      postedHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stateIsChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsDivergenceFound(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsDivergenceFound(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsWaitingHashes(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsWaitingHashes(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsWaitingQuery(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsWaitingQuery(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timeHash(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "timeHash(uint256,uint256)"(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    timeSubmitted(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "timeSubmitted(uint256,uint256)"(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  claimVictoryByTime(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVictoryByTime(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  divergenceTime(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "divergenceTime(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentState(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCurrentState(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentStateDeadline(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCurrentStateDeadline(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxInstanceDuration(
    _roundDuration: BigNumberish,
    _timeToStartMachine: BigNumberish,
    _partitionSize: BigNumberish,
    _maxCycle: BigNumberish,
    _picoSecondsToRunInsn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
    _roundDuration: BigNumberish,
    _timeToStartMachine: BigNumberish,
    _partitionSize: BigNumberish,
    _maxCycle: BigNumberish,
    _picoSecondsToRunInsn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNonce(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPartitionGameIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPartitionGameIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuerySize(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getQuerySize(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getState(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber[], boolean[], string[], string, BigNumber[]] & {
      _challenger: string;
      _claimer: string;
      _queryArray: BigNumber[];
      _submittedArray: boolean[];
      _hashArray: string[];
      _currentState: string;
      _uintValues: BigNumber[];
    }
  >;

  "getState(uint256,address)"(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber[], boolean[], string[], string, BigNumber[]] & {
      _challenger: string;
      _claimer: string;
      _queryArray: BigNumber[];
      _submittedArray: boolean[];
      _hashArray: string[];
      _currentState: string;
      _uintValues: BigNumber[];
    }
  >;

  getSubInstances(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  "getSubInstances(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  instantiate(
    _challenger: string,
    _claimer: string,
    _initialHash: BytesLike,
    _claimerFinalHash: BytesLike,
    _finalTime: BigNumberish,
    _querySize: BigNumberish,
    _roundDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "instantiate(address,address,bytes32,bytes32,uint256,uint256,uint256)"(
    _challenger: string,
    _claimer: string,
    _initialHash: BytesLike,
    _claimerFinalHash: BytesLike,
    _finalTime: BigNumberish,
    _querySize: BigNumberish,
    _roundDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isActive(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isConcerned(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConcerned(uint256,address)"(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  log2OverTwo(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "log2OverTwo(uint256)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeQuery(
    _index: BigNumberish,
    queryPiece: BigNumberish,
    leftPoint: BigNumberish,
    rightPoint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makeQuery(uint256,uint256,uint256,uint256)"(
    _index: BigNumberish,
    queryPiece: BigNumberish,
    leftPoint: BigNumberish,
    rightPoint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  presentDivergence(
    _index: BigNumberish,
    _divergenceTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "presentDivergence(uint256,uint256)"(
    _index: BigNumberish,
    _divergenceTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queryArray(
    _index: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "queryArray(uint256,uint256)"(
    _index: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  replyQuery(
    _index: BigNumberish,
    postedTimes: BigNumberish[],
    postedHashes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "replyQuery(uint256,uint256[],bytes32[])"(
    _index: BigNumberish,
    postedTimes: BigNumberish[],
    postedHashes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stateIsChallengerWon(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsChallengerWon(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsClaimerWon(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsClaimerWon(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsDivergenceFound(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsDivergenceFound(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsWaitingHashes(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsWaitingHashes(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsWaitingQuery(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsWaitingQuery(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timeHash(
    _index: BigNumberish,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "timeHash(uint256,uint256)"(
    _index: BigNumberish,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  timeSubmitted(
    _index: BigNumberish,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "timeSubmitted(uint256,uint256)"(
    _index: BigNumberish,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    divergenceTime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "divergenceTime(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentStateDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentStateDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartitionGameIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPartitionGameIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuerySize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuerySize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber[],
        boolean[],
        string[],
        string,
        BigNumber[]
      ] & {
        _challenger: string;
        _claimer: string;
        _queryArray: BigNumber[];
        _submittedArray: boolean[];
        _hashArray: string[];
        _currentState: string;
        _uintValues: BigNumber[];
      }
    >;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber[],
        boolean[],
        string[],
        string,
        BigNumber[]
      ] & {
        _challenger: string;
        _claimer: string;
        _queryArray: BigNumber[];
        _submittedArray: boolean[];
        _hashArray: string[];
        _currentState: string;
        _uintValues: BigNumber[];
      }
    >;

    getSubInstances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getSubInstances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    instantiate(
      _challenger: string,
      _claimer: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      _querySize: BigNumberish,
      _roundDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instantiate(address,address,bytes32,bytes32,uint256,uint256,uint256)"(
      _challenger: string,
      _claimer: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      _querySize: BigNumberish,
      _roundDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    log2OverTwo(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "log2OverTwo(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeQuery(
      _index: BigNumberish,
      queryPiece: BigNumberish,
      leftPoint: BigNumberish,
      rightPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "makeQuery(uint256,uint256,uint256,uint256)"(
      _index: BigNumberish,
      queryPiece: BigNumberish,
      leftPoint: BigNumberish,
      rightPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    presentDivergence(
      _index: BigNumberish,
      _divergenceTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "presentDivergence(uint256,uint256)"(
      _index: BigNumberish,
      _divergenceTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    queryArray(
      _index: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryArray(uint256,uint256)"(
      _index: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    replyQuery(
      _index: BigNumberish,
      postedTimes: BigNumberish[],
      postedHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "replyQuery(uint256,uint256[],bytes32[])"(
      _index: BigNumberish,
      postedTimes: BigNumberish[],
      postedHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    stateIsChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsDivergenceFound(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsDivergenceFound(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsWaitingHashes(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsWaitingHashes(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsWaitingQuery(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsWaitingQuery(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timeHash(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "timeHash(uint256,uint256)"(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    timeSubmitted(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "timeSubmitted(uint256,uint256)"(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ChallengeEnded(
      _index: null,
      _state: null
    ): TypedEventFilter<
      [BigNumber, number],
      { _index: BigNumber; _state: number }
    >;

    DivergenceFound(
      _index: null,
      _timeOfDivergence: null,
      _hashAtDivergenceTime: null,
      _hashRigthAfterDivergenceTime: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        _index: BigNumber;
        _timeOfDivergence: BigNumber;
        _hashAtDivergenceTime: string;
        _hashRigthAfterDivergenceTime: string;
      }
    >;

    HashesPosted(
      _index: null
    ): TypedEventFilter<[BigNumber], { _index: BigNumber }>;

    PartitionCreated(
      _index: null
    ): TypedEventFilter<[BigNumber], { _index: BigNumber }>;

    QueryPosted(
      _index: null
    ): TypedEventFilter<[BigNumber], { _index: BigNumber }>;
  };

  estimateGas: {
    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    divergenceTime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "divergenceTime(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStateDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentStateDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartitionGameIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPartitionGameIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuerySize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuerySize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubInstances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubInstances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instantiate(
      _challenger: string,
      _claimer: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      _querySize: BigNumberish,
      _roundDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "instantiate(address,address,bytes32,bytes32,uint256,uint256,uint256)"(
      _challenger: string,
      _claimer: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      _querySize: BigNumberish,
      _roundDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2OverTwo(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "log2OverTwo(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeQuery(
      _index: BigNumberish,
      queryPiece: BigNumberish,
      leftPoint: BigNumberish,
      rightPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makeQuery(uint256,uint256,uint256,uint256)"(
      _index: BigNumberish,
      queryPiece: BigNumberish,
      leftPoint: BigNumberish,
      rightPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    presentDivergence(
      _index: BigNumberish,
      _divergenceTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "presentDivergence(uint256,uint256)"(
      _index: BigNumberish,
      _divergenceTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queryArray(
      _index: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryArray(uint256,uint256)"(
      _index: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    replyQuery(
      _index: BigNumberish,
      postedTimes: BigNumberish[],
      postedHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "replyQuery(uint256,uint256[],bytes32[])"(
      _index: BigNumberish,
      postedTimes: BigNumberish[],
      postedHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stateIsChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsDivergenceFound(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsDivergenceFound(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsWaitingHashes(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsWaitingHashes(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsWaitingQuery(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsWaitingQuery(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeHash(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timeHash(uint256,uint256)"(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeSubmitted(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timeSubmitted(uint256,uint256)"(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divergenceTime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "divergenceTime(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentStateDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentStateDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPartitionGameIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPartitionGameIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuerySize(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuerySize(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubInstances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubInstances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instantiate(
      _challenger: string,
      _claimer: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      _querySize: BigNumberish,
      _roundDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "instantiate(address,address,bytes32,bytes32,uint256,uint256,uint256)"(
      _challenger: string,
      _claimer: string,
      _initialHash: BytesLike,
      _claimerFinalHash: BytesLike,
      _finalTime: BigNumberish,
      _querySize: BigNumberish,
      _roundDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log2OverTwo(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "log2OverTwo(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeQuery(
      _index: BigNumberish,
      queryPiece: BigNumberish,
      leftPoint: BigNumberish,
      rightPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makeQuery(uint256,uint256,uint256,uint256)"(
      _index: BigNumberish,
      queryPiece: BigNumberish,
      leftPoint: BigNumberish,
      rightPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    presentDivergence(
      _index: BigNumberish,
      _divergenceTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "presentDivergence(uint256,uint256)"(
      _index: BigNumberish,
      _divergenceTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queryArray(
      _index: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryArray(uint256,uint256)"(
      _index: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    replyQuery(
      _index: BigNumberish,
      postedTimes: BigNumberish[],
      postedHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "replyQuery(uint256,uint256[],bytes32[])"(
      _index: BigNumberish,
      postedTimes: BigNumberish[],
      postedHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stateIsChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsDivergenceFound(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsDivergenceFound(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsWaitingHashes(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsWaitingHashes(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsWaitingQuery(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsWaitingQuery(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeHash(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timeHash(uint256,uint256)"(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeSubmitted(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timeSubmitted(uint256,uint256)"(
      _index: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
