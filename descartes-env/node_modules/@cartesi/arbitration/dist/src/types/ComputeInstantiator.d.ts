/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ComputeInstantiatorInterface extends ethers.utils.Interface {
  functions: {
    "challenge(uint256)": FunctionFragment;
    "claimVictoryByTime(uint256)": FunctionFragment;
    "confirm(uint256)": FunctionFragment;
    "currentIndex()": FunctionFragment;
    "getCurrentState(uint256)": FunctionFragment;
    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getNonce(uint256)": FunctionFragment;
    "getState(uint256,address)": FunctionFragment;
    "getSubInstances(uint256,address)": FunctionFragment;
    "instantiate(address,address,uint256,address,bytes32,uint256)": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "isConcerned(uint256,address)": FunctionFragment;
    "stateIsChallengerWon(uint256)": FunctionFragment;
    "stateIsClaimerMissedDeadline(uint256)": FunctionFragment;
    "stateIsClaimerWon(uint256)": FunctionFragment;
    "stateIsConsensusResult(uint256)": FunctionFragment;
    "stateIsWaitingChallange(uint256)": FunctionFragment;
    "stateIsWaitingClaim(uint256)": FunctionFragment;
    "stateIsWaitingConfirmation(uint256)": FunctionFragment;
    "submitClaim(uint256,bytes32)": FunctionFragment;
    "winByVG(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "challenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVictoryByTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirm",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxInstanceDuration",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubInstances",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate",
    values: [string, string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConcerned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsChallengerWon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsClaimerMissedDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsClaimerWon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsConsensusResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsWaitingChallange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsWaitingClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsWaitingConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "winByVG",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimVictoryByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "confirm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxInstanceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConcerned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsChallengerWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsClaimerMissedDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsClaimerWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsConsensusResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsWaitingChallange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsWaitingClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsWaitingConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winByVG", data: BytesLike): Result;

  events: {
    "ChallengeStarted(uint256)": EventFragment;
    "ClaimSubmitted(uint256,bytes32)": EventFragment;
    "ComputeCreated(uint256,address,address,uint256,address,bytes32,uint256)": EventFragment;
    "ComputeFinished(uint256,uint8)": EventFragment;
    "ResultConfirmed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengeStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputeFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResultConfirmed"): EventFragment;
}

export class ComputeInstantiator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ComputeInstantiatorInterface;

  functions: {
    challenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "challenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirm(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "confirm(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentNonce: BigNumber }>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentNonce: BigNumber }>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, BigNumber, string, string] & {
        _challenger: string;
        _claimer: string;
        _deadline: BigNumber;
        _machine: string;
        _initialHash: string;
        _finalTime: BigNumber;
        _claimedFinalHash: string;
        _currentState: string;
      }
    >;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, BigNumber, string, string] & {
        _challenger: string;
        _claimer: string;
        _deadline: BigNumber;
        _machine: string;
        _initialHash: string;
        _finalTime: BigNumber;
        _claimedFinalHash: string;
        _currentState: string;
      }
    >;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    instantiate(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "instantiate(address,address,uint256,address,bytes32,uint256)"(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsClaimerMissedDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsClaimerMissedDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsConsensusResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsConsensusResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsWaitingChallange(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsWaitingChallange(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsWaitingClaim(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsWaitingClaim(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsWaitingConfirmation(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsWaitingConfirmation(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    submitClaim(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitClaim(uint256,bytes32)"(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    winByVG(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "winByVG(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  challenge(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "challenge(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimVictoryByTime(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVictoryByTime(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirm(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "confirm(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentState(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCurrentState(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMaxInstanceDuration(
    _roundDuration: BigNumberish,
    _timeToStartMachine: BigNumberish,
    _partitionSize: BigNumberish,
    _maxCycle: BigNumberish,
    _picoSecondsToRunInsn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
    _roundDuration: BigNumberish,
    _timeToStartMachine: BigNumberish,
    _partitionSize: BigNumberish,
    _maxCycle: BigNumberish,
    _picoSecondsToRunInsn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNonce(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getState(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, string, BigNumber, string, string] & {
      _challenger: string;
      _claimer: string;
      _deadline: BigNumber;
      _machine: string;
      _initialHash: string;
      _finalTime: BigNumber;
      _claimedFinalHash: string;
      _currentState: string;
    }
  >;

  "getState(uint256,address)"(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, string, BigNumber, string, string] & {
      _challenger: string;
      _claimer: string;
      _deadline: BigNumber;
      _machine: string;
      _initialHash: string;
      _finalTime: BigNumber;
      _claimedFinalHash: string;
      _currentState: string;
    }
  >;

  getSubInstances(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
  >;

  "getSubInstances(uint256,address)"(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
  >;

  instantiate(
    _challenger: string,
    _claimer: string,
    _roundDuration: BigNumberish,
    _machineAddress: string,
    _initialHash: BytesLike,
    _finalTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "instantiate(address,address,uint256,address,bytes32,uint256)"(
    _challenger: string,
    _claimer: string,
    _roundDuration: BigNumberish,
    _machineAddress: string,
    _initialHash: BytesLike,
    _finalTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isActive(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isConcerned(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConcerned(uint256,address)"(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsChallengerWon(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsChallengerWon(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsClaimerMissedDeadline(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsClaimerMissedDeadline(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsClaimerWon(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsClaimerWon(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsConsensusResult(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsConsensusResult(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsWaitingChallange(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsWaitingChallange(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsWaitingClaim(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsWaitingClaim(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsWaitingConfirmation(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsWaitingConfirmation(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  submitClaim(
    _index: BigNumberish,
    _claimedFinalHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitClaim(uint256,bytes32)"(
    _index: BigNumberish,
    _claimedFinalHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  winByVG(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "winByVG(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    challenge(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "challenge(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirm(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "confirm(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, BigNumber, string, string] & {
        _challenger: string;
        _claimer: string;
        _deadline: BigNumber;
        _machine: string;
        _initialHash: string;
        _finalTime: BigNumber;
        _claimedFinalHash: string;
        _currentState: string;
      }
    >;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, BigNumber, string, string] & {
        _challenger: string;
        _claimer: string;
        _deadline: BigNumber;
        _machine: string;
        _initialHash: string;
        _finalTime: BigNumber;
        _claimedFinalHash: string;
        _currentState: string;
      }
    >;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _addresses: string[]; _indices: BigNumber[] }
    >;

    instantiate(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instantiate(address,address,uint256,address,bytes32,uint256)"(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsClaimerMissedDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsClaimerMissedDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsConsensusResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsConsensusResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsWaitingChallange(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsWaitingChallange(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsWaitingClaim(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsWaitingClaim(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsWaitingConfirmation(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsWaitingConfirmation(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    submitClaim(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitClaim(uint256,bytes32)"(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    winByVG(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "winByVG(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChallengeStarted(
      _index: null
    ): TypedEventFilter<[BigNumber], { _index: BigNumber }>;

    ClaimSubmitted(
      _index: null,
      _claimedFinalHash: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _index: BigNumber; _claimedFinalHash: string }
    >;

    ComputeCreated(
      _index: null,
      _challenger: null,
      _claimer: null,
      _roundDuration: null,
      _machineAddress: null,
      _initialHash: null,
      _finalTime: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, string, string, BigNumber],
      {
        _index: BigNumber;
        _challenger: string;
        _claimer: string;
        _roundDuration: BigNumber;
        _machineAddress: string;
        _initialHash: string;
        _finalTime: BigNumber;
      }
    >;

    ComputeFinished(
      _index: null,
      _state: null
    ): TypedEventFilter<
      [BigNumber, number],
      { _index: BigNumber; _state: number }
    >;

    ResultConfirmed(
      _index: null
    ): TypedEventFilter<[BigNumber], { _index: BigNumber }>;
  };

  estimateGas: {
    challenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "challenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirm(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "confirm(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instantiate(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "instantiate(address,address,uint256,address,bytes32,uint256)"(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsClaimerMissedDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsClaimerMissedDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsConsensusResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsConsensusResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsWaitingChallange(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsWaitingChallange(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsWaitingClaim(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsWaitingClaim(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsWaitingConfirmation(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsWaitingConfirmation(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitClaim(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitClaim(uint256,bytes32)"(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    winByVG(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "winByVG(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    challenge(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "challenge(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimVictoryByTime(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVictoryByTime(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirm(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "confirm(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxInstanceDuration(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)"(
      _roundDuration: BigNumberish,
      _timeToStartMachine: BigNumberish,
      _partitionSize: BigNumberish,
      _maxCycle: BigNumberish,
      _picoSecondsToRunInsn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubInstances(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubInstances(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instantiate(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "instantiate(address,address,uint256,address,bytes32,uint256)"(
      _challenger: string,
      _claimer: string,
      _roundDuration: BigNumberish,
      _machineAddress: string,
      _initialHash: BytesLike,
      _finalTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsChallengerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsChallengerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsClaimerMissedDeadline(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsClaimerMissedDeadline(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsClaimerWon(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsClaimerWon(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsConsensusResult(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsConsensusResult(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsWaitingChallange(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsWaitingChallange(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsWaitingClaim(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsWaitingClaim(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsWaitingConfirmation(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsWaitingConfirmation(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitClaim(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitClaim(uint256,bytes32)"(
      _index: BigNumberish,
      _claimedFinalHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    winByVG(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "winByVG(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
