{
  "contractName": "ArithmeticImmediateInstructions",
  "sourceName": "contracts/RiscVInstructions/ArithmeticImmediateInstructions.sol",
  "abi": [],
  "bytecode": "0x610e3c610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c80636baf6613116100ac578063a01453d51161007b578063a01453d51461044f578063a6c5b41d1461048e578063c779edac146104cd578063d00638b61461050c578063e72276531461054b57610115565b80636baf6613146103535780638ef7db3514610392578063909a7c32146103d1578063963ee0b31461041057610115565b8063277b8cd8116100e8578063277b8cd814610233578063403462c1146102725780635aa23c25146102d55780635f1e984e1461031457610115565b80631190fec81461011a5780631e2ccf99146101765780631e719ccb146101b557806327793526146101f4575b600080fd5b81801561012657600080fd5b506101596004803603604081101561013d57600080fd5b5080356001600160a01b0316906020013563ffffffff1661058a565b6040805167ffffffffffffffff9092168252519081900360200190f35b81801561018257600080fd5b506101596004803603604081101561019957600080fd5b5080356001600160a01b0316906020013563ffffffff166105a6565b8180156101c157600080fd5b50610159600480360360408110156101d857600080fd5b5080356001600160a01b0316906020013563ffffffff166105c2565b81801561020057600080fd5b506101596004803603604081101561021757600080fd5b5080356001600160a01b0316906020013563ffffffff166105e8565b81801561023f57600080fd5b506101596004803603604081101561025657600080fd5b5080356001600160a01b0316906020013563ffffffff16610604565b81801561027e57600080fd5b506102b16004803603604081101561029557600080fd5b5080356001600160a01b0316906020013563ffffffff1661063d565b6040805167ffffffffffffffff909316835290151560208301528051918290030190f35b8180156102e157600080fd5b50610159600480360360408110156102f857600080fd5b5080356001600160a01b0316906020013563ffffffff166107ff565b81801561032057600080fd5b506101596004803603604081101561033757600080fd5b5080356001600160a01b0316906020013563ffffffff1661089f565b81801561035f57600080fd5b506102b16004803603604081101561037657600080fd5b5080356001600160a01b0316906020013563ffffffff166108c9565b81801561039e57600080fd5b50610159600480360360408110156103b557600080fd5b5080356001600160a01b0316906020013563ffffffff1661097f565b8180156103dd57600080fd5b50610159600480360360408110156103f457600080fd5b5080356001600160a01b0316906020013563ffffffff166109b7565b81801561041c57600080fd5b506101596004803603604081101561043357600080fd5b5080356001600160a01b0316906020013563ffffffff166109d3565b81801561045b57600080fd5b506101596004803603604081101561047257600080fd5b5080356001600160a01b0316906020013563ffffffff166109f9565b81801561049a57600080fd5b506102b1600480360360408110156104b157600080fd5b5080356001600160a01b0316906020013563ffffffff16610aa5565b8180156104d957600080fd5b50610159600480360360408110156104f057600080fd5b5080356001600160a01b0316906020013563ffffffff16610b74565b81801561051857600080fd5b506101596004803603604081101561052f57600080fd5b5080356001600160a01b0316906020013563ffffffff16610b9f565b81801561055757600080fd5b506102b16004803603604081101561056e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610bbb565b60008060006105998585610c71565b60030b1795945050505050565b60008060006105b58585610c71565b0160030b95945050505050565b60008060006105d18585610c71565b600391820b601f9091161d900b9250505092915050565b60008060006105f78585610c71565b60030b1695945050505050565b60008060006106138585610c71565b915091508060030b60070b8260070b1261062e576000610631565b60015b60ff1695945050505050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63dff959bd856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561069757600080fd5b505af41580156106ab573d6000803e3d6000fd5b505050506040513d60208110156106c157600080fd5b50519050600363ffffffff821610156107455763ffffffff81166106f5576106e98585610b9f565b600192509250506107f8565b8063ffffffff166002141561070e576106e98585610604565b8063ffffffff16600114156107405763fc0000008416156107365760008092509250506107f8565b6106e98585610b74565b6107ef565b60038163ffffffff1611156107d65760068163ffffffff1610156107a4578063ffffffff166004141561077c576106e985856109b7565b8063ffffffff166005141561079f5761079585856108c9565b92509250506107f8565b610740565b8063ffffffff16600714156107bd576106e985856105e8565b8063ffffffff1660061415610740576106e9858561058a565b8063ffffffff16600314156107ef576106e9858561097f565b60008092509250505b9250929050565b600080600061080e8585610c71565b91509150600173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63b4e549ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085857600080fd5b505af415801561086c573d6000803e3d6000fd5b505050506040513d602081101561088257600080fd5b5051600793840b60039390930b9190031690910b1d905092915050565b60008060006108ae8585610c71565b63ffffffff909116601f9091161c60030b9250505092915050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__636d0ba6fa856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561092357600080fd5b505af4158015610937573d6000803e3d6000fd5b505050506040513d602081101561094d57600080fd5b5051905063ffffffff8116610966576106e985856109f9565b8063ffffffff16601014156107ef576106e985856107ff565b600080600061098e8585610c71565b915091508060030b67ffffffffffffffff168267ffffffffffffffff161061062e576000610631565b60008060006109c68585610c71565b60030b1895945050505050565b60008060006109e28585610c71565b600391820b601f9091161b900b9250505092915050565b6000806000610a088585610c71565b915091506000600173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63b4e549ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5457600080fd5b505af4158015610a68573d6000803e3d6000fd5b505050506040513d6020811015610a7e57600080fd5b505167ffffffffffffffff9490941693039190911663ffffffff169190911c949350505050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63dff959bd856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610aff57600080fd5b505af4158015610b13573d6000803e3d6000fd5b505050506040513d6020811015610b2957600080fd5b5051905063ffffffff8116610b42576106e985856105a6565b8063ffffffff1660051415610b5b576107958585610bbb565b8063ffffffff16600114156107ef576106e985856109d3565b6000806000610b838585610c71565b67ffffffffffffffff909116603f9091161b9250505092915050565b6000806000610bae8585610c71565b60030b0195945050505050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__6353c0a143856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610c1557600080fd5b505af4158015610c29573d6000803e3d6000fd5b505050506040513d6020811015610c3f57600080fd5b5051905063ffffffff8116610c58576106e9858561089f565b8063ffffffff16602014156107ef576106e985856105c2565b600080836001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf866040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610cd857600080fd5b505af4158015610cec573d6000803e3d6000fd5b505050506040513d6020811015610d0257600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b158015610d4857600080fd5b505af1158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b50516040805163089dcb2160e21b815263ffffffff86166004820152905191935073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__916322772c8491602480820192602092909190829003018186803b158015610dcf57600080fd5b505af4158015610de3573d6000803e3d6000fd5b505050506040513d6020811015610df957600080fd5b505191949193509091505056fea264697066735822122049037a4f0ebb57ed45b3cf10ccae1cb20e15d69b429711d70d24e4c084b2bb7c64736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c80636baf6613116100ac578063a01453d51161007b578063a01453d51461044f578063a6c5b41d1461048e578063c779edac146104cd578063d00638b61461050c578063e72276531461054b57610115565b80636baf6613146103535780638ef7db3514610392578063909a7c32146103d1578063963ee0b31461041057610115565b8063277b8cd8116100e8578063277b8cd814610233578063403462c1146102725780635aa23c25146102d55780635f1e984e1461031457610115565b80631190fec81461011a5780631e2ccf99146101765780631e719ccb146101b557806327793526146101f4575b600080fd5b81801561012657600080fd5b506101596004803603604081101561013d57600080fd5b5080356001600160a01b0316906020013563ffffffff1661058a565b6040805167ffffffffffffffff9092168252519081900360200190f35b81801561018257600080fd5b506101596004803603604081101561019957600080fd5b5080356001600160a01b0316906020013563ffffffff166105a6565b8180156101c157600080fd5b50610159600480360360408110156101d857600080fd5b5080356001600160a01b0316906020013563ffffffff166105c2565b81801561020057600080fd5b506101596004803603604081101561021757600080fd5b5080356001600160a01b0316906020013563ffffffff166105e8565b81801561023f57600080fd5b506101596004803603604081101561025657600080fd5b5080356001600160a01b0316906020013563ffffffff16610604565b81801561027e57600080fd5b506102b16004803603604081101561029557600080fd5b5080356001600160a01b0316906020013563ffffffff1661063d565b6040805167ffffffffffffffff909316835290151560208301528051918290030190f35b8180156102e157600080fd5b50610159600480360360408110156102f857600080fd5b5080356001600160a01b0316906020013563ffffffff166107ff565b81801561032057600080fd5b506101596004803603604081101561033757600080fd5b5080356001600160a01b0316906020013563ffffffff1661089f565b81801561035f57600080fd5b506102b16004803603604081101561037657600080fd5b5080356001600160a01b0316906020013563ffffffff166108c9565b81801561039e57600080fd5b50610159600480360360408110156103b557600080fd5b5080356001600160a01b0316906020013563ffffffff1661097f565b8180156103dd57600080fd5b50610159600480360360408110156103f457600080fd5b5080356001600160a01b0316906020013563ffffffff166109b7565b81801561041c57600080fd5b506101596004803603604081101561043357600080fd5b5080356001600160a01b0316906020013563ffffffff166109d3565b81801561045b57600080fd5b506101596004803603604081101561047257600080fd5b5080356001600160a01b0316906020013563ffffffff166109f9565b81801561049a57600080fd5b506102b1600480360360408110156104b157600080fd5b5080356001600160a01b0316906020013563ffffffff16610aa5565b8180156104d957600080fd5b50610159600480360360408110156104f057600080fd5b5080356001600160a01b0316906020013563ffffffff16610b74565b81801561051857600080fd5b506101596004803603604081101561052f57600080fd5b5080356001600160a01b0316906020013563ffffffff16610b9f565b81801561055757600080fd5b506102b16004803603604081101561056e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610bbb565b60008060006105998585610c71565b60030b1795945050505050565b60008060006105b58585610c71565b0160030b95945050505050565b60008060006105d18585610c71565b600391820b601f9091161d900b9250505092915050565b60008060006105f78585610c71565b60030b1695945050505050565b60008060006106138585610c71565b915091508060030b60070b8260070b1261062e576000610631565b60015b60ff1695945050505050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63dff959bd856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561069757600080fd5b505af41580156106ab573d6000803e3d6000fd5b505050506040513d60208110156106c157600080fd5b50519050600363ffffffff821610156107455763ffffffff81166106f5576106e98585610b9f565b600192509250506107f8565b8063ffffffff166002141561070e576106e98585610604565b8063ffffffff16600114156107405763fc0000008416156107365760008092509250506107f8565b6106e98585610b74565b6107ef565b60038163ffffffff1611156107d65760068163ffffffff1610156107a4578063ffffffff166004141561077c576106e985856109b7565b8063ffffffff166005141561079f5761079585856108c9565b92509250506107f8565b610740565b8063ffffffff16600714156107bd576106e985856105e8565b8063ffffffff1660061415610740576106e9858561058a565b8063ffffffff16600314156107ef576106e9858561097f565b60008092509250505b9250929050565b600080600061080e8585610c71565b91509150600173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63b4e549ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085857600080fd5b505af415801561086c573d6000803e3d6000fd5b505050506040513d602081101561088257600080fd5b5051600793840b60039390930b9190031690910b1d905092915050565b60008060006108ae8585610c71565b63ffffffff909116601f9091161c60030b9250505092915050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__636d0ba6fa856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561092357600080fd5b505af4158015610937573d6000803e3d6000fd5b505050506040513d602081101561094d57600080fd5b5051905063ffffffff8116610966576106e985856109f9565b8063ffffffff16601014156107ef576106e985856107ff565b600080600061098e8585610c71565b915091508060030b67ffffffffffffffff168267ffffffffffffffff161061062e576000610631565b60008060006109c68585610c71565b60030b1895945050505050565b60008060006109e28585610c71565b600391820b601f9091161b900b9250505092915050565b6000806000610a088585610c71565b915091506000600173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63b4e549ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5457600080fd5b505af4158015610a68573d6000803e3d6000fd5b505050506040513d6020811015610a7e57600080fd5b505167ffffffffffffffff9490941693039190911663ffffffff169190911c949350505050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63dff959bd856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610aff57600080fd5b505af4158015610b13573d6000803e3d6000fd5b505050506040513d6020811015610b2957600080fd5b5051905063ffffffff8116610b42576106e985856105a6565b8063ffffffff1660051415610b5b576107958585610bbb565b8063ffffffff16600114156107ef576106e985856109d3565b6000806000610b838585610c71565b67ffffffffffffffff909116603f9091161b9250505092915050565b6000806000610bae8585610c71565b60030b0195945050505050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__6353c0a143856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610c1557600080fd5b505af4158015610c29573d6000803e3d6000fd5b505050506040513d6020811015610c3f57600080fd5b5051905063ffffffff8116610c58576106e9858561089f565b8063ffffffff16602014156107ef576106e985856105c2565b600080836001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf866040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610cd857600080fd5b505af4158015610cec573d6000803e3d6000fd5b505050506040513d6020811015610d0257600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b158015610d4857600080fd5b505af1158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b50516040805163089dcb2160e21b815263ffffffff86166004820152905191935073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__916322772c8491602480820192602092909190829003018186803b158015610dcf57600080fd5b505af4158015610de3573d6000803e3d6000fd5b505050506040513d6020811015610df957600080fd5b505191949193509091505056fea264697066735822122049037a4f0ebb57ed45b3cf10ccae1cb20e15d69b429711d70d24e4c084b2bb7c64736f6c63430007040033",
  "linkReferences": {
    "contracts/RiscVConstants.sol": {
      "RiscVConstants": [
        {
          "length": 20,
          "start": 2108
        },
        {
          "length": 20,
          "start": 2616
        }
      ]
    },
    "contracts/RiscVDecoder.sol": {
      "RiscVDecoder": [
        {
          "length": 20,
          "start": 1642
        },
        {
          "length": 20,
          "start": 2294
        },
        {
          "length": 20,
          "start": 2770
        },
        {
          "length": 20,
          "start": 3048
        },
        {
          "length": 20,
          "start": 3243
        },
        {
          "length": 20,
          "start": 3515
        }
      ]
    }
  },
  "deployedLinkReferences": {
    "contracts/RiscVConstants.sol": {
      "RiscVConstants": [
        {
          "length": 20,
          "start": 2070
        },
        {
          "length": 20,
          "start": 2578
        }
      ]
    },
    "contracts/RiscVDecoder.sol": {
      "RiscVDecoder": [
        {
          "length": 20,
          "start": 1604
        },
        {
          "length": 20,
          "start": 2256
        },
        {
          "length": 20,
          "start": 2732
        },
        {
          "length": 20,
          "start": 3010
        },
        {
          "length": 20,
          "start": 3205
        },
        {
          "length": 20,
          "start": 3477
        }
      ]
    }
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {
        "contracts/RiscVConstants.sol": {
          "RiscVConstants": [
            {
              "length": 20,
              "start": 2108
            },
            {
              "length": 20,
              "start": 2616
            }
          ]
        },
        "contracts/RiscVDecoder.sol": {
          "RiscVDecoder": [
            {
              "length": 20,
              "start": 1642
            },
            {
              "length": 20,
              "start": 2294
            },
            {
              "length": 20,
              "start": 2770
            },
            {
              "length": 20,
              "start": 3048
            },
            {
              "length": 20,
              "start": 3243
            },
            {
              "length": 20,
              "start": 3515
            }
          ]
        }
      },
      "opcodes": "PUSH2 0xE3C PUSH2 0x26 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x19 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x115 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6BAF6613 GT PUSH2 0xAC JUMPI DUP1 PUSH4 0xA01453D5 GT PUSH2 0x7B JUMPI DUP1 PUSH4 0xA01453D5 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0xA6C5B41D EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0xC779EDAC EQ PUSH2 0x4CD JUMPI DUP1 PUSH4 0xD00638B6 EQ PUSH2 0x50C JUMPI DUP1 PUSH4 0xE7227653 EQ PUSH2 0x54B JUMPI PUSH2 0x115 JUMP JUMPDEST DUP1 PUSH4 0x6BAF6613 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0x8EF7DB35 EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x909A7C32 EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x963EE0B3 EQ PUSH2 0x410 JUMPI PUSH2 0x115 JUMP JUMPDEST DUP1 PUSH4 0x277B8CD8 GT PUSH2 0xE8 JUMPI DUP1 PUSH4 0x277B8CD8 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0x403462C1 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x5AA23C25 EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0x5F1E984E EQ PUSH2 0x314 JUMPI PUSH2 0x115 JUMP JUMPDEST DUP1 PUSH4 0x1190FEC8 EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x1E2CCF99 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x1E719CCB EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x27793526 EQ PUSH2 0x1F4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x58A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x5A6 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x5C2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x5E8 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x23F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x604 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x63D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x2E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x7FF JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x89F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x8C9 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x97F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9B7 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9D3 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9F9 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xAA5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x4D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB74 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB9F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xBBB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x599 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND OR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5B5 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST ADD PUSH1 0x3 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5D1 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SWAP2 DUP3 SIGNEXTEND PUSH1 0x1F SWAP1 SWAP2 AND SAR SWAP1 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5F7 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x613 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x3 SIGNEXTEND PUSH1 0x7 SIGNEXTEND DUP3 PUSH1 0x7 SIGNEXTEND SLT PUSH2 0x62E JUMPI PUSH1 0x0 PUSH2 0x631 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0xDFF959BD DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x697 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x6AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x3 PUSH4 0xFFFFFFFF DUP3 AND LT ISZERO PUSH2 0x745 JUMPI PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x6F5 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x7F8 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x2 EQ ISZERO PUSH2 0x70E JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x604 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0x740 JUMPI PUSH4 0xFC000000 DUP5 AND ISZERO PUSH2 0x736 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x7F8 JUMP JUMPDEST PUSH2 0x6E9 DUP6 DUP6 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x7EF JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x7D6 JUMPI PUSH1 0x6 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x7A4 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x4 EQ ISZERO PUSH2 0x77C JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x9B7 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x5 EQ ISZERO PUSH2 0x79F JUMPI PUSH2 0x795 DUP6 DUP6 PUSH2 0x8C9 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0x7F8 JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x7 EQ ISZERO PUSH2 0x7BD JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x5E8 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x6 EQ ISZERO PUSH2 0x740 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x58A JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x3 EQ ISZERO PUSH2 0x7EF JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x97F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x80E DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x1 PUSH20 0x0 PUSH4 0xB4E549BA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x86C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x7 SWAP4 DUP5 SIGNEXTEND PUSH1 0x3 SWAP4 SWAP1 SWAP4 SIGNEXTEND SWAP2 SWAP1 SUB AND SWAP1 SWAP2 SIGNEXTEND SAR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x8AE DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x1F SWAP1 SWAP2 AND SHR PUSH1 0x3 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0x6D0BA6FA DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x94D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x966 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x9F9 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x10 EQ ISZERO PUSH2 0x7EF JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x98E DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x3 SIGNEXTEND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND LT PUSH2 0x62E JUMPI PUSH1 0x0 PUSH2 0x631 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9C6 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND XOR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9E2 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SWAP2 DUP3 SIGNEXTEND PUSH1 0x1F SWAP1 SWAP2 AND SHL SWAP1 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA08 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH20 0x0 PUSH4 0xB4E549BA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND SWAP4 SUB SWAP2 SWAP1 SWAP2 AND PUSH4 0xFFFFFFFF AND SWAP2 SWAP1 SWAP2 SHR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0xDFF959BD DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0xB42 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x5A6 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x5 EQ ISZERO PUSH2 0xB5B JUMPI PUSH2 0x795 DUP6 DUP6 PUSH2 0xBBB JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0x7EF JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x9D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB83 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x3F SWAP1 SWAP2 AND SHL SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xBAE DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0x53C0A143 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0xC58 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x89F JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x20 EQ ISZERO PUSH2 0x7EF JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xCEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x89DCB21 PUSH1 0xE2 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP4 POP PUSH20 0x0 SWAP2 PUSH4 0x22772C84 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xDE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 SUB PUSH27 0x4F0EBB57ED45B3CF10CCAE1CB20E15D69B429711D70D24E4C084B2 0xBB PUSH29 0x64736F6C63430007040033000000000000000000000000000000000000 ",
      "sourceMap": "784:9641:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {
        "contracts/RiscVConstants.sol": {
          "RiscVConstants": [
            {
              "length": 20,
              "start": 2070
            },
            {
              "length": 20,
              "start": 2578
            }
          ]
        },
        "contracts/RiscVDecoder.sol": {
          "RiscVDecoder": [
            {
              "length": 20,
              "start": 1604
            },
            {
              "length": 20,
              "start": 2256
            },
            {
              "length": 20,
              "start": 2732
            },
            {
              "length": 20,
              "start": 3010
            },
            {
              "length": 20,
              "start": 3205
            },
            {
              "length": 20,
              "start": 3477
            }
          ]
        }
      },
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x115 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6BAF6613 GT PUSH2 0xAC JUMPI DUP1 PUSH4 0xA01453D5 GT PUSH2 0x7B JUMPI DUP1 PUSH4 0xA01453D5 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0xA6C5B41D EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0xC779EDAC EQ PUSH2 0x4CD JUMPI DUP1 PUSH4 0xD00638B6 EQ PUSH2 0x50C JUMPI DUP1 PUSH4 0xE7227653 EQ PUSH2 0x54B JUMPI PUSH2 0x115 JUMP JUMPDEST DUP1 PUSH4 0x6BAF6613 EQ PUSH2 0x353 JUMPI DUP1 PUSH4 0x8EF7DB35 EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x909A7C32 EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x963EE0B3 EQ PUSH2 0x410 JUMPI PUSH2 0x115 JUMP JUMPDEST DUP1 PUSH4 0x277B8CD8 GT PUSH2 0xE8 JUMPI DUP1 PUSH4 0x277B8CD8 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0x403462C1 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x5AA23C25 EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0x5F1E984E EQ PUSH2 0x314 JUMPI PUSH2 0x115 JUMP JUMPDEST DUP1 PUSH4 0x1190FEC8 EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x1E2CCF99 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x1E719CCB EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x27793526 EQ PUSH2 0x1F4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x58A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x5A6 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x5C2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x5E8 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x23F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x604 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x63D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x2E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x7FF JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x89F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x8C9 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x97F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9B7 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9D3 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9F9 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xAA5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x4D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB74 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB9F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xBBB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x599 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND OR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5B5 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST ADD PUSH1 0x3 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5D1 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SWAP2 DUP3 SIGNEXTEND PUSH1 0x1F SWAP1 SWAP2 AND SAR SWAP1 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5F7 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x613 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x3 SIGNEXTEND PUSH1 0x7 SIGNEXTEND DUP3 PUSH1 0x7 SIGNEXTEND SLT PUSH2 0x62E JUMPI PUSH1 0x0 PUSH2 0x631 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0xDFF959BD DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x697 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x6AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x3 PUSH4 0xFFFFFFFF DUP3 AND LT ISZERO PUSH2 0x745 JUMPI PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x6F5 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x7F8 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x2 EQ ISZERO PUSH2 0x70E JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x604 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0x740 JUMPI PUSH4 0xFC000000 DUP5 AND ISZERO PUSH2 0x736 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x7F8 JUMP JUMPDEST PUSH2 0x6E9 DUP6 DUP6 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x7EF JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x7D6 JUMPI PUSH1 0x6 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x7A4 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x4 EQ ISZERO PUSH2 0x77C JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x9B7 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x5 EQ ISZERO PUSH2 0x79F JUMPI PUSH2 0x795 DUP6 DUP6 PUSH2 0x8C9 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0x7F8 JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x7 EQ ISZERO PUSH2 0x7BD JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x5E8 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x6 EQ ISZERO PUSH2 0x740 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x58A JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x3 EQ ISZERO PUSH2 0x7EF JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x97F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x80E DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x1 PUSH20 0x0 PUSH4 0xB4E549BA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x86C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x7 SWAP4 DUP5 SIGNEXTEND PUSH1 0x3 SWAP4 SWAP1 SWAP4 SIGNEXTEND SWAP2 SWAP1 SUB AND SWAP1 SWAP2 SIGNEXTEND SAR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x8AE DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x1F SWAP1 SWAP2 AND SHR PUSH1 0x3 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0x6D0BA6FA DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x94D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x966 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x9F9 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x10 EQ ISZERO PUSH2 0x7EF JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x7FF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x98E DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x3 SIGNEXTEND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND LT PUSH2 0x62E JUMPI PUSH1 0x0 PUSH2 0x631 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9C6 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND XOR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9E2 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SWAP2 DUP3 SIGNEXTEND PUSH1 0x1F SWAP1 SWAP2 AND SHL SWAP1 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA08 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH20 0x0 PUSH4 0xB4E549BA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND SWAP4 SUB SWAP2 SWAP1 SWAP2 AND PUSH4 0xFFFFFFFF AND SWAP2 SWAP1 SWAP2 SHR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0xDFF959BD DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0xB42 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x5A6 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x5 EQ ISZERO PUSH2 0xB5B JUMPI PUSH2 0x795 DUP6 DUP6 PUSH2 0xBBB JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0x7EF JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x9D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB83 DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x3F SWAP1 SWAP2 AND SHL SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xBAE DUP6 DUP6 PUSH2 0xC71 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0x53C0A143 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0xC58 JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x89F JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x20 EQ ISZERO PUSH2 0x7EF JUMPI PUSH2 0x6E9 DUP6 DUP6 PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xCEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x89DCB21 PUSH1 0xE2 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP4 POP PUSH20 0x0 SWAP2 PUSH4 0x22772C84 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xDE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 SUB PUSH27 0x4F0EBB57ED45B3CF10CCAE1CB20E15D69B429711D70D24E4C084B2 0xBB PUSH29 0x64736F6C63430007040033000000000000000000000000000000000000 ",
      "sourceMap": "784:9641:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2489:174;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2489:174:15;;-1:-1:-1;;;;;2489:174:15;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1667:183;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1667:183:15;;-1:-1:-1;;;;;1667:183:15;;;;;;;;:::i;5029:259::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5029:259:15;;-1:-1:-1;;;;;5029:259:15;;;;;;;;:::i;6190:258::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6190:258:15;;-1:-1:-1;;;;;6190:258:15;;;;;;;;:::i;4293:190::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4293:190:15;;-1:-1:-1;;;;;4293:190:15;;;;;;;;:::i;7476:1640::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7476:1640:15;;-1:-1:-1;;;;;7476:1640:15;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;5432:272;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5432:272:15;;-1:-1:-1;;;;;5432:272:15;;;;;;;;:::i;3804:267::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3804:267:15;;-1:-1:-1;;;;;3804:267:15;;;;;;;;:::i;9300:476::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9300:476:15;;-1:-1:-1;;;;;9300:476:15;;;;;;;;:::i;4615:185::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4615:185:15;;-1:-1:-1;;;;;4615:185:15;;;;;;;;:::i;5843:208::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5843:208:15;;-1:-1:-1;;;;;5843:208:15;;;;;;;;:::i;2054:226::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2054:226:15;;-1:-1:-1;;;;;2054:226:15;;;;;;;;:::i;3285:290::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3285:290:15;;-1:-1:-1;;;;;3285:290:15;;;;;;;;:::i;6646:636::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6646:636:15;;-1:-1:-1;;;;;6646:636:15;;;;;;;;:::i;2893:182::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2893:182:15;;-1:-1:-1;;;;;2893:182:15;;;;;;;;:::i;1171:214::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1171:214:15;;-1:-1:-1;;;;;1171:214:15;;;;;;;;:::i;9976:447::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9976:447:15;;-1:-1:-1;;;;;9976:447:15;;;;;;;;:::i;2489:174::-;2559:6;2578:10;2590:9;2603:19;2613:2;2617:4;2603:9;:19::i;:::-;2645:11;;2639:17;;2489:174;-1:-1:-1;;;;;2489:174:15:o;1667:183::-;1739:6;1758:10;1770:9;1783:19;1793:2;1797:4;1783:9;:19::i;:::-;1826:16;1819:24;;;1667:183;-1:-1:-1;;;;;1667:183:15:o;5029:259::-;5100:6;5153:10;5165:9;5178:19;5188:2;5192:4;5178:9;:19::i;:::-;5220:32;;;;5247:4;5241:10;;;5220:32;5269:12;;;-1:-1:-1;;;5029:259:15;;;;:::o;6190:258::-;6260:6;6313:10;6325:9;6338:19;6348:2;6352:4;6338:9;:19::i;:::-;6430:11;;6424:17;;6190:258;-1:-1:-1;;;;;6190:258:15:o;4293:190::-;4364:6;4383:10;4395:9;4408:19;4418:2;4422:4;4408:9;:19::i;:::-;4382:45;;;;4464:3;4458:10;;4445:23;;4451:3;4445:23;;;4444:32;;4475:1;4444:32;;;4471:1;4444:32;4437:39;;;4293:190;-1:-1:-1;;;;;4293:190:15:o;7476:1640::-;7565:6;7573:4;7593:13;7609:12;:23;7633:4;7609:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7609:29:15;;-1:-1:-1;7661:6:15;7652:15;;;;7648:1435;;;7687:16;;;7683:604;;7768:21;7780:2;7784:4;7768:11;:21::i;:::-;7791:4;7760:36;;;;;;;7683:604;7822:6;:16;;7832:6;7822:16;7818:469;;;7903:21;7915:2;7919:4;7903:11;:21::i;7818:469::-;7956:6;:16;;7966:6;7956:16;7952:335;;;8142:10;8134:19;;8132:27;8128:91;;8191:1;8194:5;8183:17;;;;;;;8128:91;8244:21;8256:2;8260:4;8244:11;:21::i;7952:335::-;7648:1435;;;8316:6;8307;:15;;;8303:780;;;8351:6;8342;:15;;;8338:612;;;8381:6;:16;;8391:6;8381:16;8377:292;;;8470:21;8482:2;8486:4;8470:11;:21::i;8377:292::-;8527:6;:16;;8537:6;8527:16;8523:146;;;8615:35;8641:2;8645:4;8615:25;:35::i;:::-;8608:42;;;;;;;8523:146;8338:612;;;8693:6;:16;;8703:6;8693:16;8689:261;;;8774:21;8786:2;8790:4;8774:11;:21::i;8689:261::-;8827:6;:16;;8837:6;8827:16;8823:127;;;8908:20;8919:2;8923:4;8908:10;:20::i;8303:780::-;8970:6;:16;;8980:6;8970:16;8966:117;;;9043:22;9056:2;9060:4;9043:12;:22::i;8966:117::-;9100:1;9103:5;9092:17;;;;;7476:1640;;;;;;:::o;5432:272::-;5502:6;5555:10;5567:9;5580:19;5590:2;5594:4;5580:9;:19::i;:::-;5554:45;;;;5692:1;5665:14;:22;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5665:24:15;5637:59;5623:73;;;5645:10;;;;;5665:28;;;5645:50;5637:59;;;5623:73;;-1:-1:-1;5432:272:15;;;;:::o;3804:267::-;3875:6;3928:10;3940:9;3953:19;3963:2;3967:4;3953:9;:19::i;:::-;4001:33;;;;4029:4;4023:10;;;4001:33;4052:12;;;-1:-1:-1;;;3804:267:15;;;;:::o;9300:476::-;9389:6;9397:4;9417:13;9433:12;:23;9457:4;9433:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9433:29:15;;-1:-1:-1;9476:16:15;;;9472:238;;9549:21;9561:2;9565:4;9549:11;:21::i;9472:238::-;9598:6;:16;;9608:6;9598:16;9594:116;;;9671:21;9683:2;9687:4;9671:11;:21::i;4615:185::-;4687:6;4706:10;4718:9;4731:19;4741:2;4745:4;4731:9;:19::i;:::-;4705:45;;;;4781:3;4774:11;;4768:17;;:3;:17;;;4767:26;;4792:1;4767:26;;5843:208;5913:6;5966:10;5978:9;5991:19;6001:2;6005:4;5991:9;:19::i;:::-;6033:11;;6027:17;;5843:208;-1:-1:-1;;;;;5843:208:15:o;2054:226::-;2126:6;2145:10;2157:9;2170:19;2180:2;2184:4;2170:9;:19::i;:::-;2212:32;;;;2239:4;2233:10;;;2212:32;2261:12;;;-1:-1:-1;;;2054:226:15;;;;:::o;3285:290::-;3355:6;3408:10;3420:9;3433:19;3443:2;3447:4;3433:9;:19::i;:::-;3407:45;;;;3462:18;3529:1;3502:14;:22;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3502:24:15;3550:18;;;;;3502:28;;3490:41;;;;3550:18;;;;;;;3285:290;-1:-1:-1;;;;3285:290:15:o;6646:636::-;6737:6;6745:4;6765:13;6781:12;:23;6805:4;6781:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6781:29:15;;-1:-1:-1;6824:16:15;;;6820:429;;6927:22;6940:2;6944:4;6927:12;:22::i;6820:429::-;6977:6;:16;;6987:6;6977:16;6973:276;;;7049:36;7076:2;7080:4;7049:26;:36::i;6973:276::-;7106:6;:16;;7116:6;7106:16;7102:147;;;7209:22;7222:2;7226:4;7209:12;:22::i;2893:182::-;2963:6;2982:10;2994:9;3007:19;3017:2;3021:4;3007:9;:19::i;:::-;3043:25;;;;3063:4;3057:10;;;3043:25;;-1:-1:-1;;;2893:182:15;;;;:::o;1171:214::-;1242:6;1261:10;1273:9;1286:19;1296:2;1300:4;1286:9;:19::i;:::-;1340:10;;1327:23;;1171:214;-1:-1:-1;;;;;1171:214:15:o;9976:447::-;10066:6;10074:4;10094:13;10110:12;:23;10134:4;10110:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10110:29:15;;-1:-1:-1;10154:16:15;;;10150:240;;10227:22;10240:2;10244:4;10227:12;:22::i;10150:240::-;10277:6;:16;;10287:6;10277:16;10273:117;;;10350:22;10363:2;10367:4;10350:12;:22::i;831:203::-;905:10;917:9;948:2;-1:-1:-1;;;;;948:8:15;;957:12;:20;978:4;957:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;957:26:15;948:36;;;-1:-1:-1;;;;;;948:36:15;;;;;;;;;;;;;;;;;;;;;957:26;;948:36;;;;;;;-1:-1:-1;948:36:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;948:36:15;1000:27;;;-1:-1:-1;;;1000:27:15;;;;;;;;;;;948:36;;-1:-1:-1;1000:12:15;;:21;;:27;;;;;948:36;;1000:27;;;;;;;;:12;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1000:27:15;831:203;;1000:27;;-1:-1:-1;831:203:15;;-1:-1:-1;;831:203:15:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "728800",
        "executionCost": "788",
        "totalCost": "729588"
      },
      "external": {
        "arithmeticImmediate32Funct3(MemoryInteractor,uint32)": "infinite",
        "arithmeticImmediateFunct3(MemoryInteractor,uint32)": "infinite",
        "executeADDI(MemoryInteractor,uint32)": "infinite",
        "executeADDIW(MemoryInteractor,uint32)": "infinite",
        "executeANDI(MemoryInteractor,uint32)": "infinite",
        "executeORI(MemoryInteractor,uint32)": "infinite",
        "executeSLLI(MemoryInteractor,uint32)": "infinite",
        "executeSLLIW(MemoryInteractor,uint32)": "infinite",
        "executeSLTI(MemoryInteractor,uint32)": "infinite",
        "executeSLTIU(MemoryInteractor,uint32)": "infinite",
        "executeSRAI(MemoryInteractor,uint32)": "infinite",
        "executeSRAIW(MemoryInteractor,uint32)": "infinite",
        "executeSRLI(MemoryInteractor,uint32)": "infinite",
        "executeSRLIW(MemoryInteractor,uint32)": "infinite",
        "executeXORI(MemoryInteractor,uint32)": "infinite",
        "shiftRightImmediate32Group(MemoryInteractor,uint32)": "infinite",
        "shiftRightImmediateFunct6(MemoryInteractor,uint32)": "infinite"
      },
      "internal": {
        "getRs1Imm(contract MemoryInteractor,uint32)": "infinite"
      }
    },
    "methodIdentifiers": {
      "arithmeticImmediate32Funct3(MemoryInteractor,uint32)": "a6c5b41d",
      "arithmeticImmediateFunct3(MemoryInteractor,uint32)": "403462c1",
      "executeADDI(MemoryInteractor,uint32)": "d00638b6",
      "executeADDIW(MemoryInteractor,uint32)": "1e2ccf99",
      "executeANDI(MemoryInteractor,uint32)": "27793526",
      "executeORI(MemoryInteractor,uint32)": "1190fec8",
      "executeSLLI(MemoryInteractor,uint32)": "c779edac",
      "executeSLLIW(MemoryInteractor,uint32)": "963ee0b3",
      "executeSLTI(MemoryInteractor,uint32)": "277b8cd8",
      "executeSLTIU(MemoryInteractor,uint32)": "8ef7db35",
      "executeSRAI(MemoryInteractor,uint32)": "5aa23c25",
      "executeSRAIW(MemoryInteractor,uint32)": "1e719ccb",
      "executeSRLI(MemoryInteractor,uint32)": "a01453d5",
      "executeSRLIW(MemoryInteractor,uint32)": "5f1e984e",
      "executeXORI(MemoryInteractor,uint32)": "909a7c32",
      "shiftRightImmediate32Group(MemoryInteractor,uint32)": "e7227653",
      "shiftRightImmediateFunct6(MemoryInteractor,uint32)": "6baf6613"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"arithmeticImmediate32Funct3(MemoryInteractor,uint32)\":{\"notice\":\"Given a arithmetic immediate32 funct3 insn, finds the associated func.\"},\"arithmeticImmediateFunct3(MemoryInteractor,uint32)\":{\"notice\":\"Given a arithmetic immediate funct3 insn, finds the func associated.\"},\"shiftRightImmediate32Group(MemoryInteractor,uint32)\":{\"notice\":\"Given a shift right immediate32 funct3 insn, finds the associated func.\"},\"shiftRightImmediateFunct6(MemoryInteractor,uint32)\":{\"notice\":\"Given a right immediate funct6 insn, finds the func associated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RiscVInstructions/ArithmeticImmediateInstructions.sol\":\"ArithmeticImmediateInstructions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/BitsManipulationLibrary.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title Bits Manipulation Library\\n/// @author Felipe Argento / Stephen Chen\\n/// @notice Implements bit manipulation helper functions\\nlibrary BitsManipulationLibrary {\\n\\n    /// @notice Sign extend a shorter signed value to the full int32\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function int32SignExtension(int32 number, uint32 wordSize)\\n    public pure returns(int32)\\n    {\\n        uint32 uNumber = uint32(number);\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint32 mask = ((uint32(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return int32(uNumber);\\n    }\\n\\n    /// @notice Sign extend a shorter signed value to the full uint64\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function uint64SignExtension(uint64 number, uint64 wordSize)\\n    public pure returns(uint64)\\n    {\\n        uint64 uNumber = number;\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint64 mask = ((uint64(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return uNumber;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 64 bytes\\n    /// @param num number to have bytes swapped\\n    function uint64SwapEndian(uint64 num) public pure returns(uint64) {\\n        uint64 output = ((num & 0x00000000000000ff) << 56)|\\n            ((num & 0x000000000000ff00) << 40)|\\n            ((num & 0x0000000000ff0000) << 24)|\\n            ((num & 0x00000000ff000000) << 8) |\\n            ((num & 0x000000ff00000000) >> 8) |\\n            ((num & 0x0000ff0000000000) >> 24)|\\n            ((num & 0x00ff000000000000) >> 40)|\\n            ((num & 0xff00000000000000) >> 56);\\n\\n        return output;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 32 bytes\\n    /// @param num number to have bytes swapped\\n    function uint32SwapEndian(uint32 num) public pure returns(uint32) {\\n        uint32 output = ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);\\n        return output;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x95b97e0ae364fb91a3fdcf8132e7b61c745c23dd4e5beb980f396c05a69bbd08\",\"license\":\"Apache-2.0\"},\"contracts/CLINT.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./RealTimeClock.sol\\\";\\n\\n\\n/// @title CLINT\\n/// @author Felipe Argento\\n/// @notice Implements the Core Local Interruptor functionalities\\n/// @dev CLINT active addresses are 0x0200bff8(mtime) and 0x02004000(mtimecmp)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary CLINT {\\n\\n    uint64 constant CLINT_MSIP0_ADDR = 0x02000000;\\n    uint64 constant CLINT_MTIMECMP_ADDR = 0x02004000;\\n    uint64 constant CLINT_MTIME_ADDR = 0x0200bff8;\\n\\n    /// @notice reads clint\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function clintRead(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            return clintReadMsip(mi, wordSize);\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            return clintReadMtime(mi, wordSize);\\n        } else if (offset == CLINT_MTIME_ADDR) {\\n            return clintReadMtimecmp(mi, wordSize);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write to clint\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param val to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function clintWrite(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 val,\\n        uint64 wordSize)\\n    public returns (bool)\\n    {\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            if (wordSize == 32) {\\n                if ((val & 1) != 0) {\\n                    mi.setMip(RiscVConstants.getMipMsipMask());\\n                } else {\\n                    mi.resetMip(RiscVConstants.getMipMsipMask());\\n                }\\n                return true;\\n            }\\n            return false;\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            if (wordSize == 64) {\\n                mi.writeClintMtimecmp(val);\\n                mi.resetMip(RiscVConstants.getMipMsipMask());\\n                return true;\\n            }\\n            // partial mtimecmp is not supported\\n            return false;\\n        }\\n        return false;\\n    }\\n\\n    // internal functions\\n    function clintReadMsip(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 32) {\\n            if ((mi.readMip() & RiscVConstants.getMipMsipMask()) == RiscVConstants.getMipMsipMask()) {\\n                return(true, 1);\\n            } else {\\n                return (true, 0);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtime(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, RealTimeClock.rtcCycleToTime(mi.readMcycle()));\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtimecmp(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, mi.readClintMtimecmp());\\n        }\\n        return (false, 0);\\n    }\\n\\n    // getters\\n    function getClintMtimecmp() public pure returns (uint64) {\\n        return CLINT_MTIMECMP_ADDR;\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x89a1c4305fc05859156cbd73380aa63ce16a48aba24ce44d4b862b5f415d6362\",\"license\":\"Apache-2.0\"},\"contracts/HTIF.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title HTIF\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\n\\n\\n/// @title HTIF\\n/// @author Felipe Argento\\n/// @notice Host-Target-Interface (HTIF) mediates communcation with external world.\\n/// @dev Its active addresses are 0x40000000(tohost) and 0x40000008(from host)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary HTIF {\\n\\n    uint64 constant HTIF_TOHOST_ADDR_CONST = 0x40008000;\\n    uint64 constant HTIF_FROMHOST_ADDR_CONST = 0x40008008;\\n    uint64 constant HTIF_IYIELD_ADDR_CONST = 0x40008020;\\n\\n    // [c++] enum HTIF_devices\\n    uint64 constant HTIF_DEVICE_HALT = 0;        //< Used to halt machine\\n    uint64 constant HTIF_DEVICE_CONSOLE = 1;     //< Used for console input and output\\n    uint64 constant HTIF_DEVICE_YIELD = 2;       //< Used to yield control back to host\\n\\n    // [c++] enum HTIF_commands\\n    uint64 constant HTIF_HALT_HALT = 0;\\n    uint64 constant HTIF_CONSOLE_GETCHAR = 0;\\n    uint64 constant HTIF_CONSOLE_PUTCHAR = 1;\\n    uint64 constant HTIF_YIELD_PROGRESS = 0;\\n    uint64 constant HTIF_YIELD_ROLLUP = 1;\\n\\n    /// @notice reads htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function htifRead(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n        // HTIF reads must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return (false, 0);\\n        }\\n\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return (true, mi.readHtifTohost());\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            return (true, mi.readHtifFromhost());\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param val value to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function htifWrite(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 val,\\n        uint64 wordSize\\n    )\\n    public returns (bool)\\n    {\\n        // HTIF writes must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return false;\\n        }\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return htifWriteTohost(mi, val);\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            mi.writeHtifFromhost(val);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Internal functions\\n    function htifWriteFromhost(MemoryInteractor mi, uint64 val)\\n    internal returns (bool)\\n    {\\n        mi.writeHtifFromhost(val);\\n        // TO-DO: check if h is interactive? reset from host? pollConsole?\\n        return true;\\n    }\\n\\n    function htifWriteTohost(MemoryInteractor mi, uint64 tohost)\\n    internal returns (bool)\\n    {\\n        uint32 device = uint32(tohost >> 56);\\n        uint32 cmd = uint32((tohost >> 48) & 0xff);\\n        uint64 payload = uint32((tohost & (~(uint256(1) >> 16))));\\n\\n        mi.writeHtifTohost(tohost);\\n\\n        if (device == HTIF_DEVICE_HALT) {\\n            return htifHalt(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_CONSOLE) {\\n            return htifConsole(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_YIELD) {\\n            return htifYield(\\n                mi,\\n                cmd,\\n                payload);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function htifHalt(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_HALT_HALT && ((payload & 1) == 1) ) {\\n            //set iflags to halted\\n            mi.setIflagsH(true);\\n        }\\n        return true;\\n    }\\n\\n    function htifYield(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        // If yield command is enabled, yield\\n        if ((mi.readHtifIYield() >> cmd) & 1 == 1) {\\n            mi.setIflagsY(true);\\n            mi.writeHtifFromhost((HTIF_DEVICE_YIELD << 56) | cmd << 48);\\n        }\\n\\n        return true;\\n    }\\n\\n    function htifConsole(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_CONSOLE_PUTCHAR) {\\n            htifPutchar(mi);\\n        } else if (cmd == HTIF_CONSOLE_GETCHAR) {\\n            htifGetchar(mi);\\n        } else {\\n            // Unknown HTIF console commands are silently ignored\\n            return true;\\n        }\\n    }\\n\\n    function htifPutchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        // TO-DO: what to do in the blockchain? Generate event?\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_PUTCHAR) << 48);\\n        return true;\\n    }\\n\\n    function htifGetchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_GETCHAR) << 48);\\n        return true;\\n    }\\n\\n    // getters\\n    function getHtifToHostAddr() public pure returns (uint64) {\\n        return HTIF_TOHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifFromHostAddr() public pure returns (uint64) {\\n        return HTIF_FROMHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifIYieldAddr() public pure returns (uint64) {\\n        return HTIF_IYIELD_ADDR_CONST;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x269d377ff4e5c3d0c65bb18d949f249c7e56ab2c208d8fb3f9376ac4d0b5f8f8\",\"license\":\"Apache-2.0\"},\"contracts/MemoryInteractor.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title MemoryInteractor.sol\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ShadowAddresses.sol\\\";\\nimport \\\"./HTIF.sol\\\";\\nimport \\\"./CLINT.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title MemoryInteractor\\n/// @author Felipe Argento\\n/// @notice Bridge between Memory Manager and Step\\n/// @dev Every read performed by mi.memoryRead or mi.write should be followed by an\\n/// @dev endianess swap from little endian to big endian. This is the case because\\n/// @dev EVM is big endian but RiscV is little endian.\\n/// @dev Reference: riscv-spec-v2.2.pdf - Preface to Version 2.0\\n/// @dev Reference: Ethereum yellowpaper - Version 69351d5\\n/// @dev    Appendix H. Virtual Machine Specification\\ncontract MemoryInteractor {\\n\\n    uint256 rwIndex; // read write index\\n    uint64[] rwPositions; // read write positions\\n    bytes8[] rwValues; // read write values\\n    bool[] isRead; // true if access is read, false if its write\\n\\n    function initializeMemory(\\n        uint64[] memory _rwPositions,\\n        bytes8[] memory _rwValues,\\n        bool[] memory _isRead\\n    ) virtual public\\n    {\\n        require(_rwPositions.length == _rwValues.length, \\\"Read/write arrays are not the same size\\\");\\n        require(_rwPositions.length == _isRead.length, \\\"Read/write arrays are not the same size\\\");\\n        rwIndex = 0;\\n        rwPositions = _rwPositions;\\n        rwValues = _rwValues;\\n        isRead = _isRead;\\n    }\\n\\n    function getRWIndex() public view returns (uint256) {\\n        return rwIndex;\\n    }\\n    // Reads\\n    function readX(uint64 registerIndex) public returns (uint64) {\\n        return memoryRead(registerIndex * 8);\\n    }\\n\\n    function readClintMtimecmp() public returns (uint64) {\\n        return memoryRead(CLINT.getClintMtimecmp());\\n    }\\n\\n    function readHtifFromhost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifFromHostAddr());\\n    }\\n\\n    function readHtifTohost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifToHostAddr());\\n    }\\n\\n    function readHtifIYield() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifIYieldAddr());\\n    }\\n\\n    function readMie() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMie());\\n    }\\n\\n    function readMcause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcause());\\n    }\\n\\n    function readMinstret() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMinstret());\\n    }\\n\\n    function readMcycle() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcycle());\\n    }\\n\\n    function readMcounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcounteren());\\n    }\\n\\n    function readMepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMepc());\\n    }\\n\\n    function readMip() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMip());\\n    }\\n\\n    function readMtval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtval());\\n    }\\n\\n    function readMvendorid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMvendorid());\\n    }\\n\\n    function readMarchid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMarchid());\\n    }\\n\\n    function readMimpid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMimpid());\\n    }\\n\\n    function readMscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMscratch());\\n    }\\n\\n    function readSatp() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSatp());\\n    }\\n\\n    function readScause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScause());\\n    }\\n\\n    function readSepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSepc());\\n    }\\n\\n    function readScounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScounteren());\\n    }\\n\\n    function readStval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStval());\\n    }\\n\\n    function readMideleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMideleg());\\n    }\\n\\n    function readMedeleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMedeleg());\\n    }\\n\\n    function readMtvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtvec());\\n    }\\n\\n    function readIlrsc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIlrsc());\\n    }\\n\\n    function readPc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getPc());\\n    }\\n\\n    function readSscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSscratch());\\n    }\\n\\n    function readStvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStvec());\\n    }\\n\\n    function readMstatus() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMstatus());\\n    }\\n\\n    function readMisa() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMisa());\\n    }\\n\\n    function readIflags() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIflags());\\n    }\\n\\n    function readIflagsPrv() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsPrvMask()) >> RiscVConstants.getIflagsPrvShift();\\n    }\\n\\n    function readIflagsH() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsHMask()) >> RiscVConstants.getIflagsHShift();\\n    }\\n\\n    function readIflagsY() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsYMask()) >> RiscVConstants.getIflagsYShift();\\n    }\\n\\n    function readMemory(uint64 paddr, uint64 wordSize) public returns (uint64) {\\n        // get relative address from unaligned paddr\\n        uint64 closestStartAddr = paddr & uint64(~7);\\n        uint64 relAddr = paddr - closestStartAddr;\\n\\n        // value just like its on MM, without endianess swap\\n        uint64 val = pureMemoryRead(closestStartAddr);\\n\\n        // mask to clean a piece of the value that was on memory\\n        uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n        val = BitsManipulationLibrary.uint64SwapEndian(val & valueMask) >> relAddr*8;\\n        return val;\\n    }\\n\\n    // Sets\\n    function setPriv(uint64 newPriv) public {\\n        writeIflagsPrv(newPriv);\\n        writeIlrsc(uint64(-1)); // invalidate reserved address\\n    }\\n\\n    function setIflagsI(bool idle) public {\\n        uint64 iflags = readIflags();\\n\\n        if (idle) {\\n            iflags = (iflags | RiscVConstants.getIflagsIMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsIMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip |= mask;\\n\\n        writeMip(mip);\\n\\n        setIflagsI(false);\\n    }\\n\\n    function resetMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip &= ~mask;\\n        writeMip(mip);\\n    }\\n\\n    // Writes\\n    function writeMie(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMie(), value);\\n    }\\n\\n    function writeStvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStvec(), value);\\n    }\\n\\n    function writeSscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSscratch(), value);\\n    }\\n\\n    function writeMip(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMip(), value);\\n    }\\n\\n    function writeSatp(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSatp(), value);\\n    }\\n\\n    function writeMedeleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMedeleg(), value);\\n    }\\n\\n    function writeMideleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMideleg(), value);\\n    }\\n\\n    function writeMtvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtvec(), value);\\n    }\\n\\n    function writeMcounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcounteren(), value);\\n    }\\n\\n    function writeMcycle(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcycle(), value);\\n    }\\n\\n    function writeMinstret(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMinstret(), value);\\n    }\\n\\n    function writeMscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMscratch(), value);\\n    }\\n\\n    function writeScounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScounteren(), value);\\n    }\\n\\n    function writeScause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScause(), value);\\n    }\\n\\n    function writeSepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSepc(), value);\\n    }\\n\\n    function writeStval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStval(), value);\\n    }\\n\\n    function writeMstatus(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMstatus(), value);\\n    }\\n\\n    function writeMcause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcause(), value);\\n    }\\n\\n    function writeMepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMepc(), value);\\n    }\\n\\n    function writeMtval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtval(), value);\\n    }\\n\\n    function writePc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getPc(), value);\\n    }\\n\\n    function writeIlrsc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getIlrsc(), value);\\n    }\\n\\n    function writeClintMtimecmp(uint64 value) public {\\n        memoryWrite(CLINT.getClintMtimecmp(), value);\\n    }\\n\\n    function writeHtifFromhost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifFromHostAddr(), value);\\n    }\\n\\n    function writeHtifTohost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifToHostAddr(), value);\\n    }\\n\\n    function setIflagsH(bool halt) public {\\n        uint64 iflags = readIflags();\\n\\n        if (halt) {\\n            iflags = (iflags | RiscVConstants.getIflagsHMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsHMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setIflagsY(bool isYield) public {\\n        uint64 iflags = readIflags();\\n\\n        if (isYield) {\\n            iflags = (iflags | RiscVConstants.getIflagsYMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsYMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeIflagsPrv(uint64 newPriv) public {\\n        uint64 iflags = readIflags();\\n\\n        // Clears bits 3 and 2 of iflags and use or to set new value\\n        iflags = (iflags & (~RiscVConstants.getIflagsPrvMask())) | (newPriv << RiscVConstants.getIflagsPrvShift());\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeMemory(\\n        uint64 paddr,\\n        uint64 value,\\n        uint64 wordSize\\n    ) public\\n    {\\n        uint64 numberOfBytes = wordSize / 8;\\n\\n        if (numberOfBytes == 8) {\\n            memoryWrite(paddr, value);\\n        } else {\\n            // get relative address from unaligned paddr\\n            uint64 closestStartAddr = paddr & uint64(~7);\\n            uint64 relAddr = paddr - closestStartAddr;\\n\\n            // oldvalue just like its on MM, without endianess swap\\n            uint64 oldVal = pureMemoryRead(closestStartAddr);\\n\\n            // Mask to clean a piece of the value that was on memory\\n            uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n\\n            // value is big endian, need to swap before further operation\\n            uint64 valueSwap = BitsManipulationLibrary.uint64SwapEndian(value & ((uint64(2) ** wordSize) - 1));\\n\\n            uint64 newvalue = ((oldVal & ~valueMask) | (valueSwap >> relAddr*8));\\n\\n            newvalue = BitsManipulationLibrary.uint64SwapEndian(newvalue);\\n            memoryWrite(closestStartAddr, newvalue);\\n        }\\n    }\\n\\n    function writeX(uint64 registerindex, uint64 value) public {\\n        memoryWrite(registerindex * 8, value);\\n    }\\n\\n    // Internal functions\\n    function memoryRead(uint64 _readAddress) public returns (uint64) {\\n        return BitsManipulationLibrary.uint64SwapEndian(\\n            uint64(memoryAccessManager(_readAddress, true))\\n        );\\n    }\\n\\n    function memoryWrite(uint64 _writeAddress, uint64 _value) virtual public {\\n        bytes8 bytesvalue = bytes8(BitsManipulationLibrary.uint64SwapEndian(_value));\\n        require(memoryAccessManager(_writeAddress, false) == bytesvalue, \\\"Written value does not match\\\");\\n    }\\n\\n    // Memory Write without endianess swap\\n    function pureMemoryWrite(uint64 _writeAddress, uint64 _value) virtual internal {\\n        require(\\n            memoryAccessManager(_writeAddress, false) == bytes8(_value),\\n            \\\"Written value does not match\\\"\\n        );\\n    }\\n\\n    // Memory Read without endianess swap\\n    function pureMemoryRead(uint64 _readAddress) internal returns (uint64) {\\n        return uint64(memoryAccessManager(_readAddress, true));\\n    }\\n\\n   // Private functions\\n\\n    // takes care of read/write access\\n    function memoryAccessManager(uint64 _address, bool _accessIsRead) internal virtual returns (bytes8) {\\n        require(isRead[rwIndex] == _accessIsRead, \\\"Access was not the correct type\\\");\\n\\n        uint64 position = rwPositions[rwIndex];\\n        bytes8 value = rwValues[rwIndex];\\n        rwIndex++;\\n\\n        require((position & 7) == 0, \\\"Position is not aligned\\\");\\n        require(position == _address, \\\"Position and read address do not match\\\");\\n\\n        return value;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x172ace0eab16d875b5dc342bf9fd15aeca8a493a4e7b0ab6b1667ae22361e78f\",\"license\":\"Apache-2.0\"},\"contracts/RealTimeClock.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title RealTimeClock\\npragma solidity ^0.7.0;\\n\\n/// @title RealTimeClock\\n/// @author Felipe Argento\\n/// @notice Real Time clock simulator\\nlibrary RealTimeClock {\\n    uint64 constant RTC_FREQ_DIV = 100;\\n    \\n    /// @notice Converts from cycle count to time count\\n    /// @param cycle Cycle count\\n    /// @return Time count\\n    function rtcCycleToTime(uint64 cycle) public pure returns (uint64) {\\n        return cycle / RTC_FREQ_DIV;\\n    }\\n\\n    /// @notice Converts from time count to cycle count\\n    /// @param  time Time count\\n    /// @return Cycle count\\n    function rtcTimeToCycle(uint64 time) public pure returns (uint64) {\\n        return time * RTC_FREQ_DIV;\\n    }\\n}\\n\",\"keccak256\":\"0x07a038d80a3f50c9cb153f63ff8d251a5704a2cd1c74863c9f5aeeb0aee247fd\",\"license\":\"Apache-2.0\"},\"contracts/RiscVConstants.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title RiscVConstants\\n/// @author Felipe Argento\\n/// @notice Defines getters for important constants\\nlibrary RiscVConstants {\\n    //iflags shifts\\n    function getIflagsHShift()  public pure returns(uint64) {return 0;}\\n    function getIflagsYShift()  public pure returns(uint64) {return 1;}\\n    function getIflagsIShift()  public pure returns(uint64) {return 2;}\\n    function getIflagsPrvShift()  public pure returns(uint64) {return 3;}\\n\\n    //iflags masks\\n    function getIflagsHMask()  public pure returns(uint64) {return uint64(1) << getIflagsHShift();}\\n    function getIflagsYMask()  public pure returns(uint64) {return uint64(1) << getIflagsYShift();}\\n    function getIflagsIMask()  public pure returns(uint64) {return uint64(1) << getIflagsIShift();}\\n    function getIflagsPrvMask()  public pure returns(uint64) {return uint64(3) << getIflagsPrvShift();}\\n\\n    //general purpose\\n    function getXlen() public pure returns(uint64) {return 64;}\\n    function getMxl()  public pure returns(uint64) {return 2;}\\n\\n    //privilege levels\\n    function getPrvU() public pure returns(uint64) {return 0;}\\n    function getPrvS() public pure returns(uint64) {return 1;}\\n    function getPrvH() public pure returns(uint64) {return 2;}\\n    function getPrvM() public pure returns(uint64) {return 3;}\\n\\n    //mstatus shifts\\n    function getMstatusUieShift()  public pure returns(uint64) {return 0;}\\n    function getMstatusSieShift()  public pure returns(uint64) {return 1;}\\n    function getMstatusHieShift()  public pure returns(uint64) {return 2;}\\n    function getMstatusMieShift()  public pure returns(uint64) {return 3;}\\n    function getMstatusUpieShift() public pure returns(uint64) {return 4;}\\n    function getMstatusSpieShift() public pure returns(uint64) {return 5;}\\n    function getMstatusMpieShift() public pure returns(uint64) {return 7;}\\n    function getMstatusSppShift()  public pure returns(uint64) {return 8;}\\n    function getMstatusMppShift()  public pure returns(uint64) {return 11;}\\n    function getMstatusFsShift()   public pure returns(uint64) {return 13;}\\n\\n    function getMstatusXsShift()   public pure returns(uint64) {return 15;}\\n    function getMstatusMprvShift() public pure returns(uint64) {return 17;}\\n    function getMstatusSumShift()  public pure returns(uint64) {return 18;}\\n    function getMstatusMxrShift()  public pure returns(uint64) {return 19;}\\n    function getMstatusTvmShift()  public pure returns(uint64) {return 20;}\\n    function getMstatusTwShift()   public pure returns(uint64) {return 21;}\\n    function getMstatusTsrShift()  public pure returns(uint64) {return 22;}\\n\\n\\n    function getMstatusUxlShift()  public pure returns(uint64) {return 32;}\\n    function getMstatusSxlShift()  public pure returns(uint64) {return 34;}\\n\\n    function getMstatusSdShift()   public pure returns(uint64) {return getXlen() - 1;}\\n\\n    //mstatus masks\\n    function getMstatusUieMask()  public pure returns(uint64) {return (uint64(1) << getMstatusUieShift());}\\n    function getMstatusSieMask()  public pure returns(uint64) {return uint64(1) << getMstatusSieShift();}\\n    function getMstatusMieMask()  public pure returns(uint64) {return uint64(1) << getMstatusMieShift();}\\n    function getMstatusUpieMask() public pure returns(uint64) {return uint64(1) << getMstatusUpieShift();}\\n    function getMstatusSpieMask() public pure returns(uint64) {return uint64(1) << getMstatusSpieShift();}\\n    function getMstatusMpieMask() public pure returns(uint64) {return uint64(1) << getMstatusMpieShift();}\\n    function getMstatusSppMask()  public pure returns(uint64) {return uint64(1) << getMstatusSppShift();}\\n    function getMstatusMppMask()  public pure returns(uint64) {return uint64(3) << getMstatusMppShift();}\\n    function getMstatusFsMask()   public pure returns(uint64) {return uint64(3) << getMstatusFsShift();}\\n    function getMstatusXsMask()   public pure returns(uint64) {return uint64(3) << getMstatusXsShift();}\\n    function getMstatusMprvMask() public pure returns(uint64) {return uint64(1) << getMstatusMprvShift();}\\n    function getMstatusSumMask()  public pure returns(uint64) {return uint64(1) << getMstatusSumShift();}\\n    function getMstatusMxrMask()  public pure returns(uint64) {return uint64(1) << getMstatusMxrShift();}\\n    function getMstatusTvmMask()  public pure returns(uint64) {return uint64(1) << getMstatusTvmShift();}\\n    function getMstatusTwMask()   public pure returns(uint64) {return uint64(1) << getMstatusTwShift();}\\n    function getMstatusTsrMask()  public pure returns(uint64) {return uint64(1) << getMstatusTsrShift();}\\n\\n    function getMstatusUxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusUxlShift();}\\n    function getMstatusSxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusSxlShift();}\\n    function getMstatusSdMask()   public pure returns(uint64) {return uint64(1) << getMstatusSdShift();}\\n\\n    // mstatus read/writes\\n    function getMstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()\\n        );\\n    }\\n\\n    function getMstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // sstatus read/writes\\n    function getSstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()\\n        );\\n    }\\n\\n    function getSstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // mcause for exceptions\\n    function getMcauseInsnAddressMisaligned() public pure returns(uint64) {return 0x0;} ///< instruction address misaligned\\n    function getMcauseInsnAccessFault() public pure returns(uint64) {return 0x1;} ///< instruction access fault\\n    function getMcauseIllegalInsn() public pure returns(uint64) {return 0x2;} ///< illegal instruction\\n    function getMcauseBreakpoint() public pure returns(uint64) {return 0x3;} ///< breakpoint\\n    function getMcauseLoadAddressMisaligned() public pure returns(uint64) {return 0x4;} ///< load address misaligned\\n    function getMcauseLoadAccessFault() public pure returns(uint64) {return 0x5;} ///< load access fault\\n    function getMcauseStoreAmoAddressMisaligned() public pure returns(uint64) {return 0x6;} ///< store/amo address misaligned\\n    function getMcauseStoreAmoAccessFault() public pure returns(uint64) {return 0x7;} ///< store/amo access fault\\n    ///< environment call (+0: from u-mode, +1: from s-mode, +3: from m-mode)\\n    function getMcauseEcallBase() public pure returns(uint64) { return 0x8;}\\n    function getMcauseFetchPageFault() public pure returns(uint64) {return 0xc;} ///< instruction page fault\\n    function getMcauseLoadPageFault() public pure returns(uint64) {return 0xd;} ///< load page fault\\n    function getMcauseStoreAmoPageFault() public pure returns(uint64) {return 0xf;} ///< store/amo page fault\\n\\n    function getMcauseInterruptFlag() public pure returns(uint64) {return uint64(1) << (getXlen() - 1);} ///< interrupt flag\\n\\n    // mcounteren constants\\n    function getMcounterenCyShift() public pure returns(uint64) {return 0;}\\n    function getMcounterenTmShift() public pure returns(uint64) {return 1;}\\n    function getMcounterenIrShift() public pure returns(uint64) {return 2;}\\n\\n    function getMcounterenCyMask() public pure returns(uint64) {return uint64(1) << getMcounterenCyShift();}\\n    function getMcounterenTmMask() public pure returns(uint64) {return uint64(1) << getMcounterenTmShift();}\\n    function getMcounterenIrMask() public pure returns(uint64) {return uint64(1) << getMcounterenIrShift();}\\n\\n    function getMcounterenRwMask() public pure returns(uint64) {return getMcounterenCyMask() | getMcounterenTmMask() | getMcounterenIrMask();}\\n    function getScounterenRwMask() public pure returns(uint64) {return getMcounterenRwMask();}\\n\\n    //paging constants\\n    function getPgShift() public pure returns(uint64) {return 12;}\\n    function getPgMask()  public pure returns(uint64) {((uint64(1) << getPgShift()) - 1);}\\n\\n    function getPteVMask() public pure returns(uint64) {return (1 << 0);}\\n    function getPteUMask() public pure returns(uint64) {return (1 << 4);}\\n    function getPteAMask() public pure returns(uint64) {return (1 << 6);}\\n    function getPteDMask() public pure returns(uint64) {return (1 << 7);}\\n\\n    function getPteXwrReadShift() public pure returns(uint64) {return 0;}\\n    function getPteXwrWriteShift() public pure returns(uint64) {return 1;}\\n    function getPteXwrCodeShift() public pure returns(uint64) {return 2;}\\n\\n    // page masks\\n    function getPageNumberShift() public pure returns(uint64) {return 12;}\\n\\n    function getPageOffsetMask() public pure returns(uint64) {return ((uint64(1) << getPageNumberShift()) - 1);}\\n\\n    // mip shifts:\\n    function getMipUsipShift() public pure returns(uint64) {return 0;}\\n    function getMipSsipShift() public pure returns(uint64) {return 1;}\\n    function getMipMsipShift() public pure returns(uint64) {return 3;}\\n    function getMipUtipShift() public pure returns(uint64) {return 4;}\\n    function getMipStipShift() public pure returns(uint64) {return 5;}\\n    function getMipMtipShift() public pure returns(uint64) {return 7;}\\n    function getMipUeipShift() public pure returns(uint64) {return 8;}\\n    function getMipSeipShift() public pure returns(uint64) {return 9;}\\n    function getMipMeipShift() public pure returns(uint64) {return 11;}\\n\\n    function getMipUsipMask() public pure returns(uint64) {return uint64(1) << getMipUsipShift();}\\n    function getMipSsipMask() public pure returns(uint64) {return uint64(1) << getMipSsipShift();}\\n    function getMipMsipMask() public pure returns(uint64) {return uint64(1) << getMipMsipShift();}\\n    function getMipUtipMask() public pure returns(uint64) {return uint64(1) << getMipUtipShift();}\\n    function getMipStipMask() public pure returns(uint64) {return uint64(1) << getMipStipShift();}\\n    function getMipMtipMask() public pure returns(uint64) {return uint64(1) << getMipMtipShift();}\\n    function getMipUeipMask() public pure returns(uint64) {return uint64(1) << getMipUeipShift();}\\n    function getMipSeipMask() public pure returns(uint64) {return uint64(1) << getMipSeipShift();}\\n    function getMipMeipMask() public pure returns(uint64) {return uint64(1) << getMipMeipShift();}\\n}\\n\",\"keccak256\":\"0xfd9070a43036eb37831d90fd3770640225fe8fd31e0dbe93034b247933b9a9c1\",\"license\":\"Apache-2.0\"},\"contracts/RiscVDecoder.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title RiscVDecoder\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title RiscVDecoder\\n/// @author Felipe Argento\\n/// @notice Contract responsible for decoding the riscv's instructions\\n//      It applies different bitwise operations and masks to reach\\n//      specific positions and use that positions to identify the\\n//      correct function to be executed\\nlibrary RiscVDecoder {\\n    /// @notice Get the instruction's RD\\n    /// @param insn Instruction\\n    function insnRd(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 7) & 0x1F;\\n    }\\n\\n    /// @notice Get the instruction's RS1\\n    /// @param insn Instruction\\n    function insnRs1(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 15) & 0x1F;\\n    }\\n\\n    /// @notice Get the instruction's RS2\\n    /// @param insn Instruction\\n    function insnRs2(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 20) & 0x1F;\\n    }\\n\\n    /// @notice Get the I-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnIImm(uint32 insn) public pure returns(int32) {\\n        return int32(insn) >> 20;\\n    }\\n\\n    /// @notice Get the I-type instruction's unsigned immediate value\\n    /// @param insn Instruction\\n    function insnIUimm(uint32 insn) public pure returns(uint32) {\\n        return insn >> 20;\\n    }\\n\\n    /// @notice Get the U-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnUImm(uint32 insn) public pure returns(int32) {\\n        return int32(insn & 0xfffff000);\\n    }\\n\\n    /// @notice Get the B-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnBImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(\\n            ((insn >> (31 - 12)) & (1 << 12)) |\\n            ((insn >> (25 - 5)) & 0x7e0) |\\n            ((insn >> (8 - 1)) & 0x1e) |\\n            ((insn << (11 - 7)) & (1 << 11))\\n        );\\n        return BitsManipulationLibrary.int32SignExtension(imm, 13);\\n    }\\n\\n    /// @notice Get the J-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnJImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(\\n            ((insn >> (31 - 20)) & (1 << 20)) |\\n            ((insn >> (21 - 1)) & 0x7fe) |\\n            ((insn >> (20 - 11)) & (1 << 11)) |\\n            (insn & 0xff000)\\n        );\\n        return BitsManipulationLibrary.int32SignExtension(imm, 21);\\n    }\\n\\n    /// @notice Get the S-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnSImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(((insn & 0xfe000000) >> (25 - 5)) | ((insn >> 7) & 0x1F));\\n        return BitsManipulationLibrary.int32SignExtension(imm, 12);\\n    }\\n\\n    /// @notice Get the instruction's opcode field\\n    /// @param insn Instruction\\n    function insnOpcode(uint32 insn) public pure returns (uint32) {\\n        return insn & 0x7F;\\n    }\\n\\n    /// @notice Get the instruction's funct3 field\\n    /// @param insn Instruction\\n    function insnFunct3(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 12) & 0x07;\\n    }\\n\\n    /// @notice Get the concatenation of instruction's funct3 and funct7 fields\\n    /// @param insn Instruction\\n    function insnFunct3Funct7(uint32 insn) public pure returns (uint32) {\\n        return ((insn >> 5) & 0x380) | (insn >> 25);\\n    }\\n\\n    /// @notice Get the concatenation of instruction's funct3 and funct5 fields\\n    /// @param insn Instruction\\n    function insnFunct3Funct5(uint32 insn) public pure returns (uint32) {\\n        return ((insn >> 7) & 0xE0) | (insn >> 27);\\n    }\\n\\n    /// @notice Get the instruction's funct7 field\\n    /// @param insn Instruction\\n    function insnFunct7(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 25) & 0x7F;\\n    }\\n\\n    /// @notice Get the instruction's funct6 field\\n    /// @param insn Instruction\\n    function insnFunct6(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 26) & 0x3F;\\n    }\\n}\\n\",\"keccak256\":\"0xd908b1ffb6386732728562ea6cc57d5ffe71dc2134e8b0f79857882c8a3eac3c\",\"license\":\"Apache-2.0\"},\"contracts/RiscVInstructions/ArithmeticImmediateInstructions.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title ArithmeticImmediateInstructions\\npragma solidity ^0.7.0;\\n\\nimport \\\"../MemoryInteractor.sol\\\";\\nimport \\\"../RiscVDecoder.sol\\\";\\nimport \\\"../RiscVConstants.sol\\\";\\n\\nlibrary ArithmeticImmediateInstructions {\\n\\n    function getRs1Imm(MemoryInteractor mi, uint32 insn) internal\\n    returns(uint64 rs1, int32 imm)\\n    {\\n        rs1 = mi.readX(RiscVDecoder.insnRs1(insn));\\n        imm = RiscVDecoder.insnIImm(insn);\\n    }\\n\\n    // ADDI adds the sign extended 12 bits immediate to rs1. Overflow is ignored.\\n    // Reference: riscv-spec-v2.2.pdf -  Page 13\\n    function executeADDI(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        int64 val = int64(rs1) + int64(imm);\\n        return uint64(val);\\n    }\\n\\n    // ADDIW adds the sign extended 12 bits immediate to rs1 and produces to correct\\n    // sign extension for 32 bits at rd. Overflow is ignored and the result is the\\n    // low 32 bits of the result sign extended to 64 bits.\\n    // Reference: riscv-spec-v2.2.pdf -  Page 30\\n    function executeADDIW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        return uint64(int32(rs1) + imm);\\n    }\\n\\n    // SLLIW is analogous to SLLI but operate on 32 bit values.\\n    // The amount of shifts are enconded on the lower 5 bits of I-imm.\\n    // Reference: riscv-spec-v2.2.pdf - Section 4.2 -  Page 30\\n    function executeSLLIW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        int32 rs1w = int32(rs1) << uint32(imm & 0x1F);\\n        return uint64(rs1w);\\n    }\\n\\n    // ORI performs logical Or bitwise operation on register rs1 and the sign-extended\\n    // 12 bit immediate. It places the result in rd.\\n    // Reference: riscv-spec-v2.2.pdf - Section 2.4 -  Page 14\\n    function executeORI(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        return rs1 | uint64(imm);\\n    }\\n\\n    // SLLI performs the logical left shift. The operand to be shifted is in rs1\\n    // and the amount of shifts are encoded on the lower 6 bits of I-imm.(RV64)\\n    // Reference: riscv-spec-v2.2.pdf - Section 2.4 -  Page 14\\n    function executeSLLI(MemoryInteractor mi, uint32 insn) public returns(uint64) {\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        return rs1 << uint32(imm & 0x3F);\\n    }\\n\\n    // SLRI instructions is a logical shift right instruction. The variable to be\\n    // shift is in rs1 and the amount of shift operations is encoded in the lower\\n    // 6 bits of the I-immediate field.\\n    function executeSRLI(MemoryInteractor mi, uint32 insn) public returns(uint64) {\\n        // Get imm's lower 6 bits\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        uint32 shiftAmount = uint32(imm & int32(RiscVConstants.getXlen() - 1));\\n\\n        return rs1 >> shiftAmount;\\n    }\\n\\n    // SRLIW instructions operates on a 32bit value and produce a signed results.\\n    // The variable to be shift is in rs1 and the amount of shift operations is\\n    // encoded in the lower 6 bits of the I-immediate field.\\n    function executeSRLIW(MemoryInteractor mi, uint32 insn) public returns(uint64) {\\n        // Get imm's lower 6 bits\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        int32 rs1w = int32(uint32(rs1) >> uint32(imm & 0x1F));\\n        return uint64(rs1w);\\n    }\\n\\n    // SLTI - Set less than immediate. Places value 1 in rd if rs1 is less than\\n    // the signed extended imm when both are signed. Else 0 is written.\\n    // Reference: riscv-spec-v2.2.pdf - Section 2.4 -  Page 13.\\n    function executeSLTI(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        return (int64(rs1) < int64(imm))? 1 : 0;\\n    }\\n\\n    // SLTIU is analogous to SLLTI but treats imm as unsigned.\\n    // Reference: riscv-spec-v2.2.pdf - Section 2.4 -  Page 14\\n    function executeSLTIU(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        return (rs1 < uint64(imm))? 1 : 0;\\n    }\\n\\n    // SRAIW instructions operates on a 32bit value and produce a signed results.\\n    // The variable to be shift is in rs1 and the amount of shift operations is\\n    // encoded in the lower 6 bits of the I-immediate field.\\n    function executeSRAIW(MemoryInteractor mi, uint32 insn) public returns(uint64) {\\n        // Get imm's lower 6 bits\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        int32 rs1w = int32(rs1) >> uint32(imm & 0x1F);\\n        return uint64(rs1w);\\n    }\\n\\n    // TO-DO: make sure that >> is now arithmetic shift and not logical shift\\n    // SRAI instruction is analogous to SRAIW but for RV64I\\n    function executeSRAI(MemoryInteractor mi, uint32 insn) public returns(uint64) {\\n        // Get imm's lower 6 bits\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        return uint64(int64(rs1) >> uint256(int64(imm) & int64((RiscVConstants.getXlen() - 1))));\\n    }\\n\\n    // XORI instructions performs XOR operation on register rs1 and hhe sign extended\\n    // 12 bit immediate, placing result in rd.\\n    function executeXORI(MemoryInteractor mi, uint32 insn) public returns(uint64) {\\n        // Get imm's lower 6 bits\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        return rs1 ^ uint64(imm);\\n    }\\n\\n    // ANDI instructions performs AND operation on register rs1 and hhe sign extended\\n    // 12 bit immediate, placing result in rd.\\n    function executeANDI(MemoryInteractor mi, uint32 insn) public returns(uint64) {\\n        // Get imm's lower 6 bits\\n        (uint64 rs1, int32 imm) = getRs1Imm(mi, insn);\\n        //return (rs1 & uint64(imm) != 0)? 1 : 0;\\n        return rs1 & uint64(imm);\\n    }\\n\\n    /// @notice Given a arithmetic immediate32 funct3 insn, finds the associated func.\\n    //  Uses binary search for performance.\\n    //  @param insn for arithmetic immediate32 funct3 field.\\n    function arithmeticImmediate32Funct3(MemoryInteractor mi, uint32 insn)\\n    public returns (uint64, bool)\\n    {\\n        uint32 funct3 = RiscVDecoder.insnFunct3(insn);\\n        if (funct3 == 0x0000) {\\n            /*funct3 == 0x0000*/\\n            //return \\\"ADDIW\\\";\\n            return (executeADDIW(mi, insn), true);\\n        } else if (funct3 == 0x0005) {\\n            /*funct3 == 0x0005*/\\n            return shiftRightImmediate32Group(mi, insn);\\n        } else if (funct3 == 0x0001) {\\n            /*funct3 == 0x0001*/\\n            //return \\\"SLLIW\\\";\\n            return (executeSLLIW(mi, insn), true);\\n        }\\n        return (0, false);\\n    }\\n\\n    /// @notice Given a arithmetic immediate funct3 insn, finds the func associated.\\n    //  Uses binary search for performance.\\n    //  @param insn for arithmetic immediate funct3 field.\\n    function arithmeticImmediateFunct3(MemoryInteractor mi, uint32 insn)\\n    public returns (uint64, bool)\\n    {\\n        uint32 funct3 = RiscVDecoder.insnFunct3(insn);\\n        if (funct3 < 0x0003) {\\n            if (funct3 == 0x0000) {\\n                /*funct3 == 0x0000*/\\n                return (executeADDI(mi, insn), true);\\n\\n            } else if (funct3 == 0x0002) {\\n                /*funct3 == 0x0002*/\\n                return (executeSLTI(mi, insn), true);\\n            } else if (funct3 == 0x0001) {\\n                // Imm[11:6] must be zero for it to be SLLI.\\n                // Reference: riscv-spec-v2.2.pdf - Section 2.4 -  Page 14\\n                if (( insn & (0x3F << 26)) != 0) {\\n                    return (0, false);\\n                }\\n                return (executeSLLI(mi, insn), true);\\n            }\\n        } else if (funct3 > 0x0003) {\\n            if (funct3 < 0x0006) {\\n                if (funct3 == 0x0004) {\\n                    /*funct3 == 0x0004*/\\n                    return (executeXORI(mi, insn), true);\\n                } else if (funct3 == 0x0005) {\\n                    /*funct3 == 0x0005*/\\n                    return shiftRightImmediateFunct6(mi, insn);\\n                }\\n            } else if (funct3 == 0x0007) {\\n                /*funct3 == 0x0007*/\\n                return (executeANDI(mi, insn), true);\\n            } else if (funct3 == 0x0006) {\\n                /*funct3 == 0x0006*/\\n                return (executeORI(mi, insn), true);\\n            }\\n        } else if (funct3 == 0x0003) {\\n            /*funct3 == 0x0003*/\\n            return (executeSLTIU(mi, insn), true);\\n        }\\n        return (0, false);\\n    }\\n\\n    /// @notice Given a right immediate funct6 insn, finds the func associated.\\n    //  Uses binary search for performance.\\n    //  @param insn for right immediate funct6 field.\\n    function shiftRightImmediateFunct6(MemoryInteractor mi, uint32 insn)\\n    public returns (uint64, bool)\\n    {\\n        uint32 funct6 = RiscVDecoder.insnFunct6(insn);\\n        if (funct6 == 0x0000) {\\n            /*funct6 == 0x0000*/\\n            return (executeSRLI(mi, insn), true);\\n        } else if (funct6 == 0x0010) {\\n            /*funct6 == 0x0010*/\\n            return (executeSRAI(mi, insn), true);\\n        }\\n        //return \\\"illegal insn\\\";\\n        return (0, false);\\n    }\\n\\n    /// @notice Given a shift right immediate32 funct3 insn, finds the associated func.\\n    //  Uses binary search for performance.\\n    //  @param insn for shift right immediate32 funct3 field.\\n    function shiftRightImmediate32Group(MemoryInteractor mi, uint32 insn)\\n    public returns (uint64, bool)\\n    {\\n        uint32 funct7 = RiscVDecoder.insnFunct7(insn);\\n\\n        if (funct7 == 0x0000) {\\n            /*funct7 == 0x0000*/\\n            return (executeSRLIW(mi, insn), true);\\n        } else if (funct7 == 0x0020) {\\n            /*funct7 == 0x0020*/\\n            return (executeSRAIW(mi, insn), true);\\n        }\\n        return (0, false);\\n    }\\n}\\n\",\"keccak256\":\"0x4b65473d9e429cc5f494fcceaf36566b1fc86cbb0894033b875ce5303892d5ea\",\"license\":\"Apache-2.0\"},\"contracts/ShadowAddresses.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\n/// @title ShadowAddresses\\n/// @author Felipe Argento\\n/// @notice Defines the processor state. Memory-mapped to the lowest 512 bytes in pm\\n/// @dev Defined on Cartesi techpaper version 1.02 - Section 3 - table 2 \\n/// Source: https://cartesi.io/cartesi_whitepaper.pdf \\nlibrary ShadowAddresses {\\n    uint64 constant PC         = 0x100;\\n    uint64 constant MVENDORID  = 0x108;\\n    uint64 constant MARCHID    = 0x110;\\n    uint64 constant MIMPID     = 0x118;\\n    uint64 constant MCYCLE     = 0x120;\\n    uint64 constant MINSTRET   = 0x128;\\n    uint64 constant MSTATUS    = 0x130;\\n    uint64 constant MTVEC      = 0x138;\\n    uint64 constant MSCRATCH   = 0x140;\\n    uint64 constant MEPC       = 0x148;\\n    uint64 constant MCAUSE     = 0x150;\\n    uint64 constant MTVAL      = 0x158;\\n    uint64 constant MISA       = 0x160;\\n    uint64 constant MIE        = 0x168;\\n    uint64 constant MIP        = 0x170;\\n    uint64 constant MEDELEG    = 0x178;\\n    uint64 constant MIDELEG    = 0x180;\\n    uint64 constant MCOUNTEREN = 0x188;\\n    uint64 constant STVEC      = 0x190;\\n    uint64 constant SSCRATCH   = 0x198;\\n    uint64 constant SEPC       = 0x1a0;\\n    uint64 constant SCAUSE     = 0x1a8;\\n    uint64 constant STVAL      = 0x1b0;\\n    uint64 constant SATP       = 0x1b8;\\n    uint64 constant SCOUNTEREN = 0x1c0;\\n    uint64 constant ILRSC      = 0x1c8;\\n    uint64 constant IFLAGS     = 0x1d0;\\n\\n    //getters - contracts cant access constants directly\\n    function getPc()         public pure returns(uint64) {return PC;}\\n    function getMvendorid()  public pure returns(uint64) {return MVENDORID;}\\n    function getMarchid()    public pure returns(uint64) {return MARCHID;}\\n    function getMimpid()     public pure returns(uint64) {return MIMPID;}\\n    function getMcycle()     public pure returns(uint64) {return MCYCLE;}\\n    function getMinstret()   public pure returns(uint64) {return MINSTRET;}\\n    function getMstatus()    public pure returns(uint64) {return MSTATUS;}\\n    function getMtvec()      public pure returns(uint64) {return MTVEC;}\\n    function getMscratch()   public pure returns(uint64) {return MSCRATCH;}\\n    function getMepc()       public pure returns(uint64) {return MEPC;}\\n    function getMcause()     public pure returns(uint64) {return MCAUSE;}\\n    function getMtval()      public pure returns(uint64) {return MTVAL;}\\n    function getMisa()       public pure returns(uint64) {return MISA;}\\n    function getMie()        public pure returns(uint64) {return MIE;}\\n    function getMip()        public pure returns(uint64) {return MIP;}\\n    function getMedeleg()    public pure returns(uint64) {return MEDELEG;}\\n    function getMideleg()    public pure returns(uint64) {return MIDELEG;}\\n    function getMcounteren() public pure returns(uint64) {return MCOUNTEREN;}\\n    function getStvec()      public pure returns(uint64) {return STVEC;}\\n    function getSscratch()   public pure returns(uint64) {return SSCRATCH;}\\n    function getSepc()       public pure returns(uint64) {return SEPC;}\\n    function getScause()     public pure returns(uint64) {return SCAUSE;}\\n    function getStval()      public pure returns(uint64) {return STVAL;}\\n    function getSatp()       public pure returns(uint64) {return SATP;}\\n    function getScounteren() public pure returns(uint64) {return SCOUNTEREN;}\\n    function getIlrsc()      public pure returns(uint64) {return ILRSC;}\\n    function getIflags()     public pure returns(uint64) {return IFLAGS;}\\n}\\n\",\"keccak256\":\"0xbfd187bab76a2802de777406cdddc9fe0cbf79ab8cb6f76075da7db664a9e9ae\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "arithmeticImmediate32Funct3(MemoryInteractor,uint32)": {
        "notice": "Given a arithmetic immediate32 funct3 insn, finds the associated func."
      },
      "arithmeticImmediateFunct3(MemoryInteractor,uint32)": {
        "notice": "Given a arithmetic immediate funct3 insn, finds the func associated."
      },
      "shiftRightImmediate32Group(MemoryInteractor,uint32)": {
        "notice": "Given a shift right immediate32 funct3 insn, finds the associated func."
      },
      "shiftRightImmediateFunct6(MemoryInteractor,uint32)": {
        "notice": "Given a right immediate funct6 insn, finds the func associated."
      }
    },
    "version": 1
  }
}