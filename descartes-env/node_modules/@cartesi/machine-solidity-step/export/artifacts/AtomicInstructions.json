{
  "contractName": "AtomicInstructions",
  "sourceName": "contracts/RiscVInstructions/AtomicInstructions.sol",
  "abi": [],
  "bytecode": "0x6119cd610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101365760003560e01c806366a520f7116100b7578063a2a87bc81161007b578063a2a87bc814610500578063dce434c41461054e578063e9b833d61461058d578063f0dccf75146105cc578063f452af621461060b57610136565b806366a520f7146103c55780636f959f0c14610404578063776218d2146104435780637a9efa2d14610482578063a0374d2c146104c157610136565b8063349e2cf5116100fe578063349e2cf51461028a578063486573ad146102c95780634a8460cd14610308578063526ca607146103475780635311494e1461038657610136565b80630269383a1461013b5780630c7f56641461018e578063127475a3146101cd578063246f89e81461020c5780632afce0491461024b575b600080fd5b81801561014757600080fd5b5061017a6004803603604081101561015e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610659565b604080519115158252519081900360200190f35b81801561019a57600080fd5b5061017a600480360360408110156101b157600080fd5b5080356001600160a01b0316906020013563ffffffff166106bb565b8180156101d957600080fd5b5061017a600480360360408110156101f057600080fd5b5080356001600160a01b0316906020013563ffffffff1661070a565b81801561021857600080fd5b5061017a6004803603604081101561022f57600080fd5b5080356001600160a01b0316906020013563ffffffff1661075b565b81801561025757600080fd5b5061017a6004803603604081101561026e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610798565b81801561029657600080fd5b5061017a600480360360408110156102ad57600080fd5b5080356001600160a01b0316906020013563ffffffff166107d3565b8180156102d557600080fd5b5061017a600480360360408110156102ec57600080fd5b5080356001600160a01b0316906020013563ffffffff1661080e565b81801561031457600080fd5b5061017a6004803603604081101561032b57600080fd5b5080356001600160a01b0316906020013563ffffffff1661084b565b81801561035357600080fd5b5061017a6004803603604081101561036a57600080fd5b5080356001600160a01b0316906020013563ffffffff16610896565b81801561039257600080fd5b5061017a600480360360408110156103a957600080fd5b5080356001600160a01b0316906020013563ffffffff166108d3565b8180156103d157600080fd5b5061017a600480360360408110156103e857600080fd5b5080356001600160a01b0316906020013563ffffffff16610910565b81801561041057600080fd5b5061017a6004803603604081101561042757600080fd5b5080356001600160a01b0316906020013563ffffffff16610955565b81801561044f57600080fd5b5061017a6004803603604081101561046657600080fd5b5080356001600160a01b0316906020013563ffffffff1661099a565b81801561048e57600080fd5b5061017a600480360360408110156104a557600080fd5b5080356001600160a01b0316906020013563ffffffff166109df565b8180156104cd57600080fd5b5061017a600480360360408110156104e457600080fd5b5080356001600160a01b0316906020013563ffffffff16610a1c565b81801561050c57600080fd5b5061017a6004803603606081101561052357600080fd5b5080356001600160a01b031690602081013563ffffffff1690604001356001600160401b0316610a59565b81801561055a57600080fd5b5061017a6004803603604081101561057157600080fd5b5080356001600160a01b0316906020013563ffffffff16610f30565b81801561059957600080fd5b5061017a600480360360408110156105b057600080fd5b5080356001600160a01b0316906020013563ffffffff16610f6d565b8180156105d857600080fd5b5061017a600480360360408110156105ef57600080fd5b5080356001600160a01b0316906020013563ffffffff16610faa565b81801561061757600080fd5b5061017a6004803603606081101561062e57600080fd5b5080356001600160a01b031690602081013563ffffffff1690604001356001600160401b0316610ffb565b600080600080600061066d87876020611337565b9350935093509350806106855793506106b592505050565b6106ae8787848663ffffffff168863ffffffff16116106a457866106a6565b875b886020611622565b9450505050505b92915050565b60008060008060006106cf87876040611337565b9350935093509350806106e75793506106b592505050565b6106ae8787848660070b8860070b136107005786610702565b875b8860406117f5565b600080600080600061071e87876040611337565b9350935093509350806107365793506106b592505050565b6106ae878784866001600160401b0316886001600160401b0316106107005786610702565b600080600080600061076f87876020611337565b9350935093509350806107875793506106b592505050565b6106ae878784868818886020611622565b60008060008060006107ac87876020611337565b9350935093509350806107c45793506106b592505050565b6106ae87878486886020611622565b60008060008060006107e787876040611337565b9350935093509350806107ff5793506106b592505050565b6106ae878784868860406117f5565b600080600080600061082287876020611337565b93509350935093508061083a5793506106b592505050565b6106ae878784868816886020611622565b600080600080600061085f87876020611337565b9350935093509350806108775793506106b592505050565b6106ae8787848663ffffffff168863ffffffff16106106a457866106a6565b60008060008060006108aa87876040611337565b9350935093509350806108c25793506106b592505050565b6106ae8787848688178860406117f5565b60008060008060006108e787876020611337565b9350935093509350806108ff5793506106b592505050565b6106ae878784868801886020611622565b600080600080600061092487876020611337565b93509350935093508061093c5793506106b592505050565b6106ae8787848660030b8860030b136106a457866106a6565b600080600080600061096987876040611337565b9350935093509350806109815793506106b592505050565b6106ae8787848660070b8860070b126107005786610702565b60008060008060006109ae87876020611337565b9350935093509350806109c65793506106b592505050565b6106ae8787848660030b8860030b126106a457866106a6565b60008060008060006109f387876040611337565b935093509350935080610a0b5793506106b592505050565b6106ae8787848688188860406117f5565b6000806000806000610a3087876020611337565b935093509350935080610a485793506106b592505050565b6106ae878784868817886020611622565b600080600090506000856001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610ac657600080fd5b505af4158015610ada573d6000803e3d6000fd5b505050506040513d6020811015610af057600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b158015610b3657600080fd5b505af1158015610b4a573d6000803e3d6000fd5b505050506040513d6020811015610b6057600080fd5b505160408051632ed6ebc560e11b815290519192506001600160401b038316916001600160a01b03891691635dadd78a9160048083019260209291908290030181600087803b158015610bb257600080fd5b505af1158015610bc6573d6000803e3d6000fd5b505050506040513d6020811015610bdc57600080fd5b50516001600160401b03161415610e165773__$ac82384a0d27387e1b469ac34d57d7750f$__63593706cd8786848a6001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63efdbf49a8d6040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610c6e57600080fd5b505af4158015610c82573d6000803e3d6000fd5b505050506040513d6020811015610c9857600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050506040513d6020811015610d0857600080fd5b5051604080516001600160e01b031960e088901b1681526001600160a01b0390951660048601526001600160401b0393841660248601529183166044850152919091166064830152516084808301926020929190829003018186803b158015610d7057600080fd5b505af4158015610d84573d6000803e3d6000fd5b505050506040513d6020811015610d9a57600080fd5b5051610dab57600092505050610f29565b60408051631e43b29f60e31b81526001600160401b03600482015290516001600160a01b0388169163f21d94f891602480830192600092919082900301818387803b158015610df957600080fd5b505af1158015610e0d573d6000803e3d6000fd5b50505050610e1b565b600191505b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__637b804524876040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610e7257600080fd5b505af4158015610e86573d6000803e3d6000fd5b505050506040513d6020811015610e9c57600080fd5b5051905063ffffffff811615610f2157604080516336e4ae1760e11b815263ffffffff831660048201526001600160401b038516602482015290516001600160a01b03891691636dc95c2e91604480830192600092919082900301818387803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b505050505b600193505050505b9392505050565b6000806000806000610f4487876040611337565b935093509350935080610f5c5793506106b592505050565b6106ae8787848688168860406117f5565b6000806000806000610f8187876040611337565b935093509350935080610f995793506106b592505050565b6106ae8787848688018860406117f5565b6000806000806000610fbe87876040611337565b935093509350935080610fd65793506106b592505050565b6106ae878784866001600160401b0316886001600160401b0316116107005786610702565b600080846001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf876040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561106257600080fd5b505af4158015611076573d6000803e3d6000fd5b505050506040513d602081101561108c57600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b1580156110d257600080fd5b505af11580156110e6573d6000803e3d6000fd5b505050506040513d60208110156110fc57600080fd5b5051604080516323b9cae960e01b81526001600160a01b03881660048201526001600160401b038087166024830152831660448201528151929350600092839273__$ac82384a0d27387e1b469ac34d57d7750f$__926323b9cae99260648083019392829003018186803b15801561117357600080fd5b505af4158015611187573d6000803e3d6000fd5b505050506040513d604081101561119d57600080fd5b5080516020909101519092509050816111bc5760009350505050610f29565b866001600160a01b031663f21d94f8846040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b15801561120b57600080fd5b505af115801561121f573d6000803e3d6000fd5b50505050600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__637b804524886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561127a57600080fd5b505af415801561128e573d6000803e3d6000fd5b505050506040513d60208110156112a457600080fd5b5051905063ffffffff81161561132957604080516336e4ae1760e11b815263ffffffff831660048201526001600160401b038416602482015290516001600160a01b038a1691636dc95c2e91604480830192600092919082900301818387803b15801561131057600080fd5b505af1158015611324573d6000803e3d6000fd5b505050505b506001979650505050505050565b6000806000806000876001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf8a6040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b1580156113a357600080fd5b505af41580156113b7573d6000803e3d6000fd5b505050506040513d60208110156113cd57600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050506040513d602081101561143d57600080fd5b5051604080516323b9cae960e01b81526001600160a01b038b1660048201526001600160401b03808a166024830152831660448201528151929350600092839273__$ac82384a0d27387e1b469ac34d57d7750f$__926323b9cae99260648083019392829003018186803b1580156114b457600080fd5b505af41580156114c8573d6000803e3d6000fd5b505050506040513d60408110156114de57600080fd5b508051602090910151909250905081611507576000806000809650965096509650505050611619565b60008a6001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63efdbf49a8d6040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561156d57600080fd5b505af4158015611581573d6000803e3d6000fd5b505050506040513d602081101561159757600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b1580156115dd57600080fd5b505af11580156115f1573d6000803e3d6000fd5b505050506040513d602081101561160757600080fd5b50519197509095509193506001925050505b93509350935093565b6040805163593706cd60e01b81526001600160a01b03881660048201526001600160401b0380841660248301528087166044830152600386900b166064820152905160009173__$ac82384a0d27387e1b469ac34d57d7750f$__9163593706cd91608480820192602092909190829003018186803b1580156116a357600080fd5b505af41580156116b7573d6000803e3d6000fd5b505050506040513d60208110156116cd57600080fd5b50516116db575060006117eb565b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__637b804524886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561173257600080fd5b505af4158015611746573d6000803e3d6000fd5b505050506040513d602081101561175c57600080fd5b5051905063ffffffff8116156117e557876001600160a01b0316636dc95c2e828660030b6040518363ffffffff1660e01b8152600401808363ffffffff168152602001826001600160401b0316815260200192505050600060405180830381600087803b1580156117cc57600080fd5b505af11580156117e0573d6000803e3d6000fd5b505050505b60019150505b9695505050505050565b6040805163593706cd60e01b81526001600160a01b03881660048201526001600160401b038084166024830152808716604483015285166064820152905160009173__$ac82384a0d27387e1b469ac34d57d7750f$__9163593706cd91608480820192602092909190829003018186803b15801561187257600080fd5b505af4158015611886573d6000803e3d6000fd5b505050506040513d602081101561189c57600080fd5b50516118aa575060006117eb565b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__637b804524886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561190157600080fd5b505af4158015611915573d6000803e3d6000fd5b505050506040513d602081101561192b57600080fd5b5051905063ffffffff8116156117e557604080516336e4ae1760e11b815263ffffffff831660048201526001600160401b038616602482015290516001600160a01b038a1691636dc95c2e91604480830192600092919082900301818387803b1580156117cc57600080fdfea2646970667358221220a380b21c928c9a2a7e518dd5abc06cafc8cece22a33b7380c174d14ed11ab2bf64736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101365760003560e01c806366a520f7116100b7578063a2a87bc81161007b578063a2a87bc814610500578063dce434c41461054e578063e9b833d61461058d578063f0dccf75146105cc578063f452af621461060b57610136565b806366a520f7146103c55780636f959f0c14610404578063776218d2146104435780637a9efa2d14610482578063a0374d2c146104c157610136565b8063349e2cf5116100fe578063349e2cf51461028a578063486573ad146102c95780634a8460cd14610308578063526ca607146103475780635311494e1461038657610136565b80630269383a1461013b5780630c7f56641461018e578063127475a3146101cd578063246f89e81461020c5780632afce0491461024b575b600080fd5b81801561014757600080fd5b5061017a6004803603604081101561015e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610659565b604080519115158252519081900360200190f35b81801561019a57600080fd5b5061017a600480360360408110156101b157600080fd5b5080356001600160a01b0316906020013563ffffffff166106bb565b8180156101d957600080fd5b5061017a600480360360408110156101f057600080fd5b5080356001600160a01b0316906020013563ffffffff1661070a565b81801561021857600080fd5b5061017a6004803603604081101561022f57600080fd5b5080356001600160a01b0316906020013563ffffffff1661075b565b81801561025757600080fd5b5061017a6004803603604081101561026e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610798565b81801561029657600080fd5b5061017a600480360360408110156102ad57600080fd5b5080356001600160a01b0316906020013563ffffffff166107d3565b8180156102d557600080fd5b5061017a600480360360408110156102ec57600080fd5b5080356001600160a01b0316906020013563ffffffff1661080e565b81801561031457600080fd5b5061017a6004803603604081101561032b57600080fd5b5080356001600160a01b0316906020013563ffffffff1661084b565b81801561035357600080fd5b5061017a6004803603604081101561036a57600080fd5b5080356001600160a01b0316906020013563ffffffff16610896565b81801561039257600080fd5b5061017a600480360360408110156103a957600080fd5b5080356001600160a01b0316906020013563ffffffff166108d3565b8180156103d157600080fd5b5061017a600480360360408110156103e857600080fd5b5080356001600160a01b0316906020013563ffffffff16610910565b81801561041057600080fd5b5061017a6004803603604081101561042757600080fd5b5080356001600160a01b0316906020013563ffffffff16610955565b81801561044f57600080fd5b5061017a6004803603604081101561046657600080fd5b5080356001600160a01b0316906020013563ffffffff1661099a565b81801561048e57600080fd5b5061017a600480360360408110156104a557600080fd5b5080356001600160a01b0316906020013563ffffffff166109df565b8180156104cd57600080fd5b5061017a600480360360408110156104e457600080fd5b5080356001600160a01b0316906020013563ffffffff16610a1c565b81801561050c57600080fd5b5061017a6004803603606081101561052357600080fd5b5080356001600160a01b031690602081013563ffffffff1690604001356001600160401b0316610a59565b81801561055a57600080fd5b5061017a6004803603604081101561057157600080fd5b5080356001600160a01b0316906020013563ffffffff16610f30565b81801561059957600080fd5b5061017a600480360360408110156105b057600080fd5b5080356001600160a01b0316906020013563ffffffff16610f6d565b8180156105d857600080fd5b5061017a600480360360408110156105ef57600080fd5b5080356001600160a01b0316906020013563ffffffff16610faa565b81801561061757600080fd5b5061017a6004803603606081101561062e57600080fd5b5080356001600160a01b031690602081013563ffffffff1690604001356001600160401b0316610ffb565b600080600080600061066d87876020611337565b9350935093509350806106855793506106b592505050565b6106ae8787848663ffffffff168863ffffffff16116106a457866106a6565b875b886020611622565b9450505050505b92915050565b60008060008060006106cf87876040611337565b9350935093509350806106e75793506106b592505050565b6106ae8787848660070b8860070b136107005786610702565b875b8860406117f5565b600080600080600061071e87876040611337565b9350935093509350806107365793506106b592505050565b6106ae878784866001600160401b0316886001600160401b0316106107005786610702565b600080600080600061076f87876020611337565b9350935093509350806107875793506106b592505050565b6106ae878784868818886020611622565b60008060008060006107ac87876020611337565b9350935093509350806107c45793506106b592505050565b6106ae87878486886020611622565b60008060008060006107e787876040611337565b9350935093509350806107ff5793506106b592505050565b6106ae878784868860406117f5565b600080600080600061082287876020611337565b93509350935093508061083a5793506106b592505050565b6106ae878784868816886020611622565b600080600080600061085f87876020611337565b9350935093509350806108775793506106b592505050565b6106ae8787848663ffffffff168863ffffffff16106106a457866106a6565b60008060008060006108aa87876040611337565b9350935093509350806108c25793506106b592505050565b6106ae8787848688178860406117f5565b60008060008060006108e787876020611337565b9350935093509350806108ff5793506106b592505050565b6106ae878784868801886020611622565b600080600080600061092487876020611337565b93509350935093508061093c5793506106b592505050565b6106ae8787848660030b8860030b136106a457866106a6565b600080600080600061096987876040611337565b9350935093509350806109815793506106b592505050565b6106ae8787848660070b8860070b126107005786610702565b60008060008060006109ae87876020611337565b9350935093509350806109c65793506106b592505050565b6106ae8787848660030b8860030b126106a457866106a6565b60008060008060006109f387876040611337565b935093509350935080610a0b5793506106b592505050565b6106ae8787848688188860406117f5565b6000806000806000610a3087876020611337565b935093509350935080610a485793506106b592505050565b6106ae878784868817886020611622565b600080600090506000856001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610ac657600080fd5b505af4158015610ada573d6000803e3d6000fd5b505050506040513d6020811015610af057600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b158015610b3657600080fd5b505af1158015610b4a573d6000803e3d6000fd5b505050506040513d6020811015610b6057600080fd5b505160408051632ed6ebc560e11b815290519192506001600160401b038316916001600160a01b03891691635dadd78a9160048083019260209291908290030181600087803b158015610bb257600080fd5b505af1158015610bc6573d6000803e3d6000fd5b505050506040513d6020811015610bdc57600080fd5b50516001600160401b03161415610e165773__$ac82384a0d27387e1b469ac34d57d7750f$__63593706cd8786848a6001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63efdbf49a8d6040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610c6e57600080fd5b505af4158015610c82573d6000803e3d6000fd5b505050506040513d6020811015610c9857600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b505050506040513d6020811015610d0857600080fd5b5051604080516001600160e01b031960e088901b1681526001600160a01b0390951660048601526001600160401b0393841660248601529183166044850152919091166064830152516084808301926020929190829003018186803b158015610d7057600080fd5b505af4158015610d84573d6000803e3d6000fd5b505050506040513d6020811015610d9a57600080fd5b5051610dab57600092505050610f29565b60408051631e43b29f60e31b81526001600160401b03600482015290516001600160a01b0388169163f21d94f891602480830192600092919082900301818387803b158015610df957600080fd5b505af1158015610e0d573d6000803e3d6000fd5b50505050610e1b565b600191505b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__637b804524876040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610e7257600080fd5b505af4158015610e86573d6000803e3d6000fd5b505050506040513d6020811015610e9c57600080fd5b5051905063ffffffff811615610f2157604080516336e4ae1760e11b815263ffffffff831660048201526001600160401b038516602482015290516001600160a01b03891691636dc95c2e91604480830192600092919082900301818387803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b505050505b600193505050505b9392505050565b6000806000806000610f4487876040611337565b935093509350935080610f5c5793506106b592505050565b6106ae8787848688168860406117f5565b6000806000806000610f8187876040611337565b935093509350935080610f995793506106b592505050565b6106ae8787848688018860406117f5565b6000806000806000610fbe87876040611337565b935093509350935080610fd65793506106b592505050565b6106ae878784866001600160401b0316886001600160401b0316116107005786610702565b600080846001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf876040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561106257600080fd5b505af4158015611076573d6000803e3d6000fd5b505050506040513d602081101561108c57600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b1580156110d257600080fd5b505af11580156110e6573d6000803e3d6000fd5b505050506040513d60208110156110fc57600080fd5b5051604080516323b9cae960e01b81526001600160a01b03881660048201526001600160401b038087166024830152831660448201528151929350600092839273__$ac82384a0d27387e1b469ac34d57d7750f$__926323b9cae99260648083019392829003018186803b15801561117357600080fd5b505af4158015611187573d6000803e3d6000fd5b505050506040513d604081101561119d57600080fd5b5080516020909101519092509050816111bc5760009350505050610f29565b866001600160a01b031663f21d94f8846040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b15801561120b57600080fd5b505af115801561121f573d6000803e3d6000fd5b50505050600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__637b804524886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561127a57600080fd5b505af415801561128e573d6000803e3d6000fd5b505050506040513d60208110156112a457600080fd5b5051905063ffffffff81161561132957604080516336e4ae1760e11b815263ffffffff831660048201526001600160401b038416602482015290516001600160a01b038a1691636dc95c2e91604480830192600092919082900301818387803b15801561131057600080fd5b505af1158015611324573d6000803e3d6000fd5b505050505b506001979650505050505050565b6000806000806000876001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf8a6040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b1580156113a357600080fd5b505af41580156113b7573d6000803e3d6000fd5b505050506040513d60208110156113cd57600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050506040513d602081101561143d57600080fd5b5051604080516323b9cae960e01b81526001600160a01b038b1660048201526001600160401b03808a166024830152831660448201528151929350600092839273__$ac82384a0d27387e1b469ac34d57d7750f$__926323b9cae99260648083019392829003018186803b1580156114b457600080fd5b505af41580156114c8573d6000803e3d6000fd5b505050506040513d60408110156114de57600080fd5b508051602090910151909250905081611507576000806000809650965096509650505050611619565b60008a6001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63efdbf49a8d6040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561156d57600080fd5b505af4158015611581573d6000803e3d6000fd5b505050506040513d602081101561159757600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b1580156115dd57600080fd5b505af11580156115f1573d6000803e3d6000fd5b505050506040513d602081101561160757600080fd5b50519197509095509193506001925050505b93509350935093565b6040805163593706cd60e01b81526001600160a01b03881660048201526001600160401b0380841660248301528087166044830152600386900b166064820152905160009173__$ac82384a0d27387e1b469ac34d57d7750f$__9163593706cd91608480820192602092909190829003018186803b1580156116a357600080fd5b505af41580156116b7573d6000803e3d6000fd5b505050506040513d60208110156116cd57600080fd5b50516116db575060006117eb565b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__637b804524886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561173257600080fd5b505af4158015611746573d6000803e3d6000fd5b505050506040513d602081101561175c57600080fd5b5051905063ffffffff8116156117e557876001600160a01b0316636dc95c2e828660030b6040518363ffffffff1660e01b8152600401808363ffffffff168152602001826001600160401b0316815260200192505050600060405180830381600087803b1580156117cc57600080fd5b505af11580156117e0573d6000803e3d6000fd5b505050505b60019150505b9695505050505050565b6040805163593706cd60e01b81526001600160a01b03881660048201526001600160401b038084166024830152808716604483015285166064820152905160009173__$ac82384a0d27387e1b469ac34d57d7750f$__9163593706cd91608480820192602092909190829003018186803b15801561187257600080fd5b505af4158015611886573d6000803e3d6000fd5b505050506040513d602081101561189c57600080fd5b50516118aa575060006117eb565b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__637b804524886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561190157600080fd5b505af4158015611915573d6000803e3d6000fd5b505050506040513d602081101561192b57600080fd5b5051905063ffffffff8116156117e557604080516336e4ae1760e11b815263ffffffff831660048201526001600160401b038616602482015290516001600160a01b038a1691636dc95c2e91604480830192600092919082900301818387803b1580156117cc57600080fdfea2646970667358221220a380b21c928c9a2a7e518dd5abc06cafc8cece22a33b7380c174d14ed11ab2bf64736f6c63430007040033",
  "linkReferences": {
    "contracts/RiscVDecoder.sol": {
      "RiscVDecoder": [
        {
          "length": 20,
          "start": 2713
        },
        {
          "length": 20,
          "start": 3137
        },
        {
          "length": 20,
          "start": 3653
        },
        {
          "length": 20,
          "start": 4149
        },
        {
          "length": 20,
          "start": 4685
        },
        {
          "length": 20,
          "start": 4982
        },
        {
          "length": 20,
          "start": 5440
        },
        {
          "length": 20,
          "start": 5893
        },
        {
          "length": 20,
          "start": 6356
        }
      ]
    },
    "contracts/VirtualMemory.sol": {
      "VirtualMemory": [
        {
          "length": 20,
          "start": 3093
        },
        {
          "length": 20,
          "start": 4452
        },
        {
          "length": 20,
          "start": 5285
        },
        {
          "length": 20,
          "start": 5775
        },
        {
          "length": 20,
          "start": 6238
        }
      ]
    }
  },
  "deployedLinkReferences": {
    "contracts/RiscVDecoder.sol": {
      "RiscVDecoder": [
        {
          "length": 20,
          "start": 2675
        },
        {
          "length": 20,
          "start": 3099
        },
        {
          "length": 20,
          "start": 3615
        },
        {
          "length": 20,
          "start": 4111
        },
        {
          "length": 20,
          "start": 4647
        },
        {
          "length": 20,
          "start": 4944
        },
        {
          "length": 20,
          "start": 5402
        },
        {
          "length": 20,
          "start": 5855
        },
        {
          "length": 20,
          "start": 6318
        }
      ]
    },
    "contracts/VirtualMemory.sol": {
      "VirtualMemory": [
        {
          "length": 20,
          "start": 3055
        },
        {
          "length": 20,
          "start": 4414
        },
        {
          "length": 20,
          "start": 5247
        },
        {
          "length": 20,
          "start": 5737
        },
        {
          "length": 20,
          "start": 6200
        }
      ]
    }
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {
        "contracts/RiscVDecoder.sol": {
          "RiscVDecoder": [
            {
              "length": 20,
              "start": 2713
            },
            {
              "length": 20,
              "start": 3137
            },
            {
              "length": 20,
              "start": 3653
            },
            {
              "length": 20,
              "start": 4149
            },
            {
              "length": 20,
              "start": 4685
            },
            {
              "length": 20,
              "start": 4982
            },
            {
              "length": 20,
              "start": 5440
            },
            {
              "length": 20,
              "start": 5893
            },
            {
              "length": 20,
              "start": 6356
            }
          ]
        },
        "contracts/VirtualMemory.sol": {
          "VirtualMemory": [
            {
              "length": 20,
              "start": 3093
            },
            {
              "length": 20,
              "start": 4452
            },
            {
              "length": 20,
              "start": 5285
            },
            {
              "length": 20,
              "start": 5775
            },
            {
              "length": 20,
              "start": 6238
            }
          ]
        }
      },
      "opcodes": "PUSH2 0x19CD PUSH2 0x26 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x19 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x136 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x66A520F7 GT PUSH2 0xB7 JUMPI DUP1 PUSH4 0xA2A87BC8 GT PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2A87BC8 EQ PUSH2 0x500 JUMPI DUP1 PUSH4 0xDCE434C4 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0xE9B833D6 EQ PUSH2 0x58D JUMPI DUP1 PUSH4 0xF0DCCF75 EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0xF452AF62 EQ PUSH2 0x60B JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x66A520F7 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x6F959F0C EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x776218D2 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x7A9EFA2D EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0xA0374D2C EQ PUSH2 0x4C1 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x349E2CF5 GT PUSH2 0xFE JUMPI DUP1 PUSH4 0x349E2CF5 EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0x486573AD EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x4A8460CD EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x526CA607 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x5311494E EQ PUSH2 0x386 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x269383A EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0xC7F5664 EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x127475A3 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x246F89E8 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0x2AFCE049 EQ PUSH2 0x24B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x659 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x6BB JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x70A JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x75B JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x798 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x7D3 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x80E JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x84B JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x896 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x8D3 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x910 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x955 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x99A JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9DF JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xA1C JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0xA59 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x55A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x571 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF30 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x599 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF6D JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xFAA JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x617 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x62E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0xFFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x66D DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x685 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH4 0xFFFFFFFF AND DUP9 PUSH4 0xFFFFFFFF AND GT PUSH2 0x6A4 JUMPI DUP7 PUSH2 0x6A6 JUMP JUMPDEST DUP8 JUMPDEST DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x6CF DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x6E7 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x7 SIGNEXTEND DUP9 PUSH1 0x7 SIGNEXTEND SGT PUSH2 0x700 JUMPI DUP7 PUSH2 0x702 JUMP JUMPDEST DUP8 JUMPDEST DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x71E DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x736 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT PUSH2 0x700 JUMPI DUP7 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x76F DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x787 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 XOR DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x7AC DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x7C4 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x7E7 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x7FF JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x822 DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x83A JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 AND DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x85F DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x877 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH4 0xFFFFFFFF AND DUP9 PUSH4 0xFFFFFFFF AND LT PUSH2 0x6A4 JUMPI DUP7 PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x8AA DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x8C2 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 OR DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x8E7 DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x8FF JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 ADD DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x924 DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x93C JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x3 SIGNEXTEND DUP9 PUSH1 0x3 SIGNEXTEND SGT PUSH2 0x6A4 JUMPI DUP7 PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x969 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x981 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x7 SIGNEXTEND DUP9 PUSH1 0x7 SIGNEXTEND SLT PUSH2 0x700 JUMPI DUP7 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9AE DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x9C6 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x3 SIGNEXTEND DUP9 PUSH1 0x3 SIGNEXTEND SLT PUSH2 0x6A4 JUMPI DUP7 PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9F3 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xA0B JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 XOR DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA30 DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xA48 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 OR DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xADA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2ED6EBC5 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5DADD78A SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND EQ ISZERO PUSH2 0xE16 JUMPI PUSH20 0x0 PUSH4 0x593706CD DUP8 DUP7 DUP5 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0xEFDBF49A DUP14 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC82 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP7 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x44 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x64 DUP4 ADD MSTORE MLOAD PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xD84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xDAB JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x1E43B29F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0xF21D94F8 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xE1B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0x7B804524 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xE86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0xF21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH4 0x36E4AE17 PUSH1 0xE1 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x6DC95C2E SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF1C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF44 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xF5C JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 AND DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF81 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xF99 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 ADD DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFBE DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xFD6 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x700 JUMPI DUP7 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1062 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1076 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x108C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x10E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B9CAE9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP8 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE DUP2 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH20 0x0 SWAP3 PUSH4 0x23B9CAE9 SWAP3 PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1187 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x119D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 POP SWAP1 POP DUP2 PUSH2 0x11BC JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xF29 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF21D94F8 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x120B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x121F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH20 0x0 PUSH4 0x7B804524 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x128E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0x1329 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH4 0x36E4AE17 PUSH1 0xE1 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP2 PUSH4 0x6DC95C2E SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1324 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x13B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1427 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x143D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B9CAE9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP11 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE DUP2 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH20 0x0 SWAP3 PUSH4 0x23B9CAE9 SWAP3 PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x14DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 POP SWAP1 POP DUP2 PUSH2 0x1507 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x1619 JUMP JUMPDEST PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0xEFDBF49A DUP14 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x156D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1581 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1597 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP8 POP SWAP1 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x593706CD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE DUP1 DUP8 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x3 DUP7 SWAP1 SIGNEXTEND AND PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x593706CD SWAP2 PUSH1 0x84 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x16B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x16CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x16DB JUMPI POP PUSH1 0x0 PUSH2 0x17EB JUMP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0x7B804524 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1732 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1746 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x175C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0x17E5 JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6DC95C2E DUP3 DUP7 PUSH1 0x3 SIGNEXTEND PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x593706CD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE DUP1 DUP8 AND PUSH1 0x44 DUP4 ADD MSTORE DUP6 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x593706CD SWAP2 PUSH1 0x84 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1886 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x189C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x18AA JUMPI POP PUSH1 0x0 PUSH2 0x17EB JUMP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0x7B804524 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1915 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x192B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0x17E5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH4 0x36E4AE17 PUSH1 0xE1 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP2 PUSH4 0x6DC95C2E SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17CC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 DUP1 0xB2 SHR SWAP3 DUP13 SWAP11 0x2A PUSH31 0x518DD5ABC06CAFC8CECE22A33B7380C174D14ED11AB2BF64736F6C63430007 DIV STOP CALLER ",
      "sourceMap": "771:11940:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {
        "contracts/RiscVDecoder.sol": {
          "RiscVDecoder": [
            {
              "length": 20,
              "start": 2675
            },
            {
              "length": 20,
              "start": 3099
            },
            {
              "length": 20,
              "start": 3615
            },
            {
              "length": 20,
              "start": 4111
            },
            {
              "length": 20,
              "start": 4647
            },
            {
              "length": 20,
              "start": 4944
            },
            {
              "length": 20,
              "start": 5402
            },
            {
              "length": 20,
              "start": 5855
            },
            {
              "length": 20,
              "start": 6318
            }
          ]
        },
        "contracts/VirtualMemory.sol": {
          "VirtualMemory": [
            {
              "length": 20,
              "start": 3055
            },
            {
              "length": 20,
              "start": 4414
            },
            {
              "length": 20,
              "start": 5247
            },
            {
              "length": 20,
              "start": 5737
            },
            {
              "length": 20,
              "start": 6200
            }
          ]
        }
      },
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x136 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x66A520F7 GT PUSH2 0xB7 JUMPI DUP1 PUSH4 0xA2A87BC8 GT PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2A87BC8 EQ PUSH2 0x500 JUMPI DUP1 PUSH4 0xDCE434C4 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0xE9B833D6 EQ PUSH2 0x58D JUMPI DUP1 PUSH4 0xF0DCCF75 EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0xF452AF62 EQ PUSH2 0x60B JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x66A520F7 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x6F959F0C EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x776218D2 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x7A9EFA2D EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0xA0374D2C EQ PUSH2 0x4C1 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x349E2CF5 GT PUSH2 0xFE JUMPI DUP1 PUSH4 0x349E2CF5 EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0x486573AD EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x4A8460CD EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x526CA607 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x5311494E EQ PUSH2 0x386 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x269383A EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0xC7F5664 EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x127475A3 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x246F89E8 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0x2AFCE049 EQ PUSH2 0x24B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x659 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x6BB JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x70A JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x75B JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x798 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x7D3 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x80E JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x84B JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x896 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x8D3 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x910 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x955 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x99A JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9DF JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xA1C JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0xA59 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x55A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x571 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF30 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x599 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF6D JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xFAA JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x617 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x62E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0xFFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x66D DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x685 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH4 0xFFFFFFFF AND DUP9 PUSH4 0xFFFFFFFF AND GT PUSH2 0x6A4 JUMPI DUP7 PUSH2 0x6A6 JUMP JUMPDEST DUP8 JUMPDEST DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x6CF DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x6E7 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x7 SIGNEXTEND DUP9 PUSH1 0x7 SIGNEXTEND SGT PUSH2 0x700 JUMPI DUP7 PUSH2 0x702 JUMP JUMPDEST DUP8 JUMPDEST DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x71E DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x736 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT PUSH2 0x700 JUMPI DUP7 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x76F DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x787 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 XOR DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x7AC DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x7C4 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x7E7 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x7FF JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x822 DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x83A JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 AND DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x85F DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x877 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH4 0xFFFFFFFF AND DUP9 PUSH4 0xFFFFFFFF AND LT PUSH2 0x6A4 JUMPI DUP7 PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x8AA DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x8C2 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 OR DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x8E7 DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x8FF JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 ADD DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x924 DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x93C JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x3 SIGNEXTEND DUP9 PUSH1 0x3 SIGNEXTEND SGT PUSH2 0x6A4 JUMPI DUP7 PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x969 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x981 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x7 SIGNEXTEND DUP9 PUSH1 0x7 SIGNEXTEND SLT PUSH2 0x700 JUMPI DUP7 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9AE DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x9C6 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x3 SIGNEXTEND DUP9 PUSH1 0x3 SIGNEXTEND SLT PUSH2 0x6A4 JUMPI DUP7 PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9F3 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xA0B JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 XOR DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA30 DUP8 DUP8 PUSH1 0x20 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xA48 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 OR DUP9 PUSH1 0x20 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xADA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2ED6EBC5 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5DADD78A SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND EQ ISZERO PUSH2 0xE16 JUMPI PUSH20 0x0 PUSH4 0x593706CD DUP8 DUP7 DUP5 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0xEFDBF49A DUP14 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC82 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP7 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x44 DUP6 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x64 DUP4 ADD MSTORE MLOAD PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xD84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xDAB JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x1E43B29F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0xF21D94F8 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xE1B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0x7B804524 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xE86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0xF21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH4 0x36E4AE17 PUSH1 0xE1 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x6DC95C2E SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF1C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF44 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xF5C JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 AND DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF81 DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xF99 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 DUP9 ADD DUP9 PUSH1 0x40 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFBE DUP8 DUP8 PUSH1 0x40 PUSH2 0x1337 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0xFD6 JUMPI SWAP4 POP PUSH2 0x6B5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x6AE DUP8 DUP8 DUP5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x700 JUMPI DUP7 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1062 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1076 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x108C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x10E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B9CAE9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP8 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE DUP2 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH20 0x0 SWAP3 PUSH4 0x23B9CAE9 SWAP3 PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1187 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x119D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 POP SWAP1 POP DUP2 PUSH2 0x11BC JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xF29 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF21D94F8 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x120B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x121F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH20 0x0 PUSH4 0x7B804524 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x128E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0x1329 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH4 0x36E4AE17 PUSH1 0xE1 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP2 PUSH4 0x6DC95C2E SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1324 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x13B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1427 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x143D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B9CAE9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP11 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE DUP2 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH20 0x0 SWAP3 PUSH4 0x23B9CAE9 SWAP3 PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x14DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 POP SWAP1 POP DUP2 PUSH2 0x1507 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP PUSH2 0x1619 JUMP JUMPDEST PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0xEFDBF49A DUP14 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x156D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1581 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1597 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP8 POP SWAP1 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x593706CD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE DUP1 DUP8 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x3 DUP7 SWAP1 SIGNEXTEND AND PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x593706CD SWAP2 PUSH1 0x84 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x16B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x16CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x16DB JUMPI POP PUSH1 0x0 PUSH2 0x17EB JUMP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0x7B804524 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1732 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1746 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x175C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0x17E5 JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6DC95C2E DUP3 DUP7 PUSH1 0x3 SIGNEXTEND PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x593706CD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE DUP1 DUP8 AND PUSH1 0x44 DUP4 ADD MSTORE DUP6 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x593706CD SWAP2 PUSH1 0x84 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1886 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x189C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x18AA JUMPI POP PUSH1 0x0 PUSH2 0x17EB JUMP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0x7B804524 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1915 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x192B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0x17E5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH4 0x36E4AE17 PUSH1 0xE1 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP2 PUSH4 0x6DC95C2E SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17CC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 DUP1 0xB2 SHR SWAP3 DUP13 SWAP11 0x2A PUSH31 0x518DD5ABC06CAFC8CECE22A33B7380C174D14ED11AB2BF64736F6C63430007 DIV STOP CALLER ",
      "sourceMap": "771:11940:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7749:498;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7749:498:17;;-1:-1:-1;;;;;7749:498:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;11125:502;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11125:502:17;;-1:-1:-1;;;;;11125:502:17;;;;;;;;:::i;11633:537::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11633:537:17;;-1:-1:-1;;;;;11633:537:17;;;;;;;;:::i;4819:456::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4819:456:17;;-1:-1:-1;;;;;4819:456:17;;;;;;;;:::i;3887:450::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3887:450:17;;-1:-1:-1;;;;;3887:450:17;;;;;;;;:::i;8253:462::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8253:462:17;;-1:-1:-1;;;;;8253:462:17;;;;;;;;:::i;5281:468::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5281:468:17;;-1:-1:-1;;;;;5281:468:17;;;;;;;;:::i;7245:498::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7245:498:17;;-1:-1:-1;;;;;7245:498:17;;;;;;;;:::i;10143:468::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10143:468:17;;-1:-1:-1;;;;;10143:468:17;;;;;;;;:::i;4343:470::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4343:470:17;;-1:-1:-1;;;;;4343:470:17;;;;;;;;:::i;6737:502::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6737:502:17;;-1:-1:-1;;;;;6737:502:17;;;;;;;;:::i;10617:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10617:502:17;;-1:-1:-1;;;;;10617:502:17;;;;;;;;:::i;6229:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6229:502:17;;-1:-1:-1;;;;;6229:502:17;;;;;;;;:::i;9195:468::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9195:468:17;;-1:-1:-1;;;;;9195:468:17;;;;;;;;:::i;5755:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5755:468:17;;-1:-1:-1;;;;;5755:468:17;;;;;;;;:::i;1464:793::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1464:793:17;;-1:-1:-1;;;;;1464:793:17;;;;;;;;;;;;-1:-1:-1;;;;;1464:793:17;;:::i;9669:468::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9669:468:17;;-1:-1:-1;;;;;9669:468:17;;;;;;;;:::i;8721:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8721:468:17;;-1:-1:-1;;;;;8721:468:17;;;;;;;;:::i;12211:498::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12211:498:17;;-1:-1:-1;;;;;12211:498:17;;;;;;;;:::i;805:653::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;805:653:17;;-1:-1:-1;;;;;805:653:17;;;;;;;;;;;;-1:-1:-1;;;;;805:653:17;;:::i;7749:498::-;7849:4;7870:11;7883;7896:12;7910:9;7923:75;7952:2;7968:4;7986:2;7923:15;:75::i;:::-;7869:129;;;;;;;;8013:4;8008:34;;8038:4;-1:-1:-1;8031:11:17;;-1:-1:-1;;;8031:11:17;8008:34;8059:181;8089:2;8105:4;8123:5;8170:4;8148:27;;8155:4;8148:27;;;:40;;8184:4;8148:40;;;8177:4;8148:40;8209:4;8228:2;8059:16;:181::i;:::-;8052:188;;;;;;7749:498;;;;;:::o;11125:502::-;11224:4;11245:11;11258;11271:12;11285:9;11298:75;11327:2;11343:4;11361:2;11298:15;:75::i;:::-;11244:129;;;;;;;;11388:4;11383:34;;11413:4;-1:-1:-1;11406:11:17;;-1:-1:-1;;;11406:11:17;11383:34;11434:186;11464:2;11480:4;11498:5;11537:4;11517:25;;11523:4;11517:25;;;:52;;11564:4;11517:52;;;11550:4;11517:52;11589:4;11608:2;11434:16;:186::i;11633:537::-;11733:4;11754:11;11767;11780:12;11794:9;11807:75;11836:2;11852:4;11870:2;11807:15;:75::i;:::-;11753:129;;;;;;;;11897:4;11892:34;;11922:4;-1:-1:-1;11915:11:17;;-1:-1:-1;;;11915:11:17;11892:34;11982:181;12012:2;12028:4;12046:5;12093:4;-1:-1:-1;;;;;12071:27:17;12078:4;-1:-1:-1;;;;;12071:27:17;;:40;;12107:4;12071:40;;4819:456;4918:4;4939:11;4952;4965:12;4979:9;4992:75;5021:2;5037:4;5055:2;4992:15;:75::i;:::-;4938:129;;;;;;;;5082:4;5077:34;;5107:4;-1:-1:-1;5100:11:17;;-1:-1:-1;;;5100:11:17;5077:34;5128:140;5158:2;5174:4;5192:5;5224:4;5217;:11;5249:4;5256:2;5128:16;:140::i;3887:450::-;3987:4;4008:11;4021;4034:12;4048:9;4061:75;4090:2;4106:4;4124:2;4061:15;:75::i;:::-;4007:129;;;;;;;;4151:4;4146:34;;4176:4;-1:-1:-1;4169:11:17;;-1:-1:-1;;;4169:11:17;4146:34;4197:133;4227:2;4243:4;4261:5;4286:4;4311;4318:2;4197:16;:133::i;8253:462::-;8353:4;8374:11;8387;8400:12;8414:9;8427:75;8456:2;8472:4;8490:2;8427:15;:75::i;:::-;8373:129;;;;;;;;8517:4;8512:34;;8542:4;-1:-1:-1;8535:11:17;;-1:-1:-1;;;8535:11:17;8512:34;8563:145;8593:2;8609:4;8627:5;8652:4;8677;8696:2;8563:16;:145::i;5281:468::-;5380:4;5401:11;5414;5427:12;5441:9;5454:75;5483:2;5499:4;5517:2;5454:15;:75::i;:::-;5400:129;;;;;;;;5544:4;5539:34;;5569:4;-1:-1:-1;5562:11:17;;-1:-1:-1;;;5562:11:17;5539:34;5590:152;5620:2;5636:4;5654:5;5686:4;5679;:11;5711:4;5730:2;5590:16;:152::i;7245:498::-;7345:4;7366:11;7379;7392:12;7406:9;7419:75;7448:2;7464:4;7482:2;7419:15;:75::i;:::-;7365:129;;;;;;;;7509:4;7504:34;;7534:4;-1:-1:-1;7527:11:17;;-1:-1:-1;;;7527:11:17;7504:34;7555:181;7585:2;7601:4;7619:5;7666:4;7644:27;;7651:4;7644:27;;;:40;;7680:4;7644:40;;10143:468;10241:4;10262:11;10275;10288:12;10302:9;10315:75;10344:2;10360:4;10378:2;10315:15;:75::i;:::-;10261:129;;;;;;;;10405:4;10400:34;;10430:4;-1:-1:-1;10423:11:17;;-1:-1:-1;;;10423:11:17;10400:34;10451:152;10481:2;10497:4;10515:5;10547:4;10540;:11;10572:4;10591:2;10451:16;:152::i;4343:470::-;4442:4;4463:11;4476;4489:12;4503:9;4516:75;4545:2;4561:4;4579:2;4516:15;:75::i;:::-;4462:129;;;;;;;;4606:4;4601:34;;4631:4;-1:-1:-1;4624:11:17;;-1:-1:-1;;;4624:11:17;4601:34;4652:154;4682:2;4698:4;4716:5;4761:4;4747;4741:25;4787:4;4794:2;4652:16;:154::i;6737:502::-;6836:4;6857:11;6870;6883:12;6897:9;6910:75;6939:2;6955:4;6973:2;6910:15;:75::i;:::-;6856:129;;;;;;;;7000:4;6995:34;;7025:4;-1:-1:-1;7018:11:17;;-1:-1:-1;;;7018:11:17;6995:34;7046:186;7076:2;7092:4;7110:5;7149:4;7129:25;;7135:4;7129:25;;;:52;;7176:4;7129:52;;10617:502;10716:4;10737:11;10750;10763:12;10777:9;10790:75;10819:2;10835:4;10853:2;10790:15;:75::i;:::-;10736:129;;;;;;;;10880:4;10875:34;;10905:4;-1:-1:-1;10898:11:17;;-1:-1:-1;;;10898:11:17;10875:34;10926:186;10956:2;10972:4;10990:5;11029:4;11009:25;;11015:4;11009:25;;;:52;;11056:4;11009:52;;6229:502;6328:4;6349:11;6362;6375:12;6389:9;6402:75;6431:2;6447:4;6465:2;6402:15;:75::i;:::-;6348:129;;;;;;;;6492:4;6487:34;;6517:4;-1:-1:-1;6510:11:17;;-1:-1:-1;;;6510:11:17;6487:34;6538:186;6568:2;6584:4;6602:5;6641:4;6621:25;;6627:4;6621:25;;;:52;;6668:4;6621:52;;9195:468;9294:4;9315:11;9328;9341:12;9355:9;9368:75;9397:2;9413:4;9431:2;9368:15;:75::i;:::-;9314:129;;;;;;;;9458:4;9453:34;;9483:4;-1:-1:-1;9476:11:17;;-1:-1:-1;;;9476:11:17;9453:34;9504:152;9534:2;9550:4;9568:5;9600:4;9593;:11;9625:4;9644:2;9504:16;:152::i;5755:468::-;5853:4;5874:11;5887;5900:12;5914:9;5927:75;5956:2;5972:4;5990:2;5927:15;:75::i;:::-;5873:129;;;;;;;;6017:4;6012:34;;6042:4;-1:-1:-1;6035:11:17;;-1:-1:-1;;;6035:11:17;6012:34;6063:152;6093:2;6109:4;6127:5;6159:4;6152;:11;6184:4;6203:2;6063:16;:152::i;1464:793::-;1584:4;1604:10;1617:1;1604:14;;1628:12;1643:2;-1:-1:-1;;;;;1643:8:17;;1652:12;:20;1673:4;1652:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1652:26:17;1643:36;;;-1:-1:-1;;;;;;1643:36:17;;;;;;;;;;;;;;;;;;;;;1652:26;;1643:36;;;;;;;-1:-1:-1;1643:36:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1643:36:17;1694:14;;;-1:-1:-1;;;1694:14:17;;;;1643:36;;-1:-1:-1;;;;;;1694:23:17;;;-1:-1:-1;;;;;1694:12:17;;;;;:14;;;;;1643:36;;1694:14;;;;;;;;:12;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1694:14:17;-1:-1:-1;;;;;1694:23:17;;1690:397;;;1738:13;:32;1788:2;1808:8;1834:5;1857:2;-1:-1:-1;;;;;1857:8:17;;1866:12;:20;1887:4;1866:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1866:26:17;1857:36;;;-1:-1:-1;;;;;;1857:36:17;;;;;;;;;;;;;;;;;;;;;1866:26;;1857:36;;;;;;;-1:-1:-1;1857:36:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1857:36:17;1738:169;;;-1:-1:-1;;;;;;1738:169:17;;;;;;;-1:-1:-1;;;;;1738:169:17;;;;;;;-1:-1:-1;;;;;1738:169:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;1857:36;;1738:169;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1738:169:17;1733:267;;1980:5;1973:12;;;;;;1733:267;2013:25;;;-1:-1:-1;;;2013:25:17;;-1:-1:-1;;;;;2013:25:17;;;;;;-1:-1:-1;;;;;2013:13:17;;;;;:25;;;;;-1:-1:-1;;2013:25:17;;;;;;;-1:-1:-1;2013:13:17;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1690:397;;;2075:1;2069:7;;1690:397;2096:9;2108:12;:19;2128:4;2108:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2108:25:17;;-1:-1:-1;2147:7:17;;;;2143:56;;2170:18;;;-1:-1:-1;;;2170:18:17;;;;;;;;;-1:-1:-1;;;;;2170:18:17;;;;;;;;-1:-1:-1;;;;;2170:9:17;;;;;:18;;;;;-1:-1:-1;;2170:18:17;;;;;;;-1:-1:-1;2170:9:17;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2143:56;2246:4;2239:11;;;;;1464:793;;;;;;:::o;9669:468::-;9768:4;9789:11;9802;9815:12;9829:9;9842:75;9871:2;9887:4;9905:2;9842:15;:75::i;:::-;9788:129;;;;;;;;9932:4;9927:34;;9957:4;-1:-1:-1;9950:11:17;;-1:-1:-1;;;9950:11:17;9927:34;9978:152;10008:2;10024:4;10042:5;10074:4;10067;:11;10099:4;10118:2;9978:16;:152::i;8721:468::-;8820:4;8841:11;8854;8867:12;8881:9;8894:75;8923:2;8939:4;8957:2;8894:15;:75::i;:::-;8840:129;;;;;;;;8984:4;8979:34;;9009:4;-1:-1:-1;9002:11:17;;-1:-1:-1;;;9002:11:17;8979:34;9030:152;9060:2;9076:4;9094:5;9126:4;9119;:11;9151:4;9170:2;9030:16;:152::i;12211:498::-;12311:4;12332:11;12345;12358:12;12372:9;12385:75;12414:2;12430:4;12448:2;12385:15;:75::i;:::-;12331:129;;;;;;;;12475:4;12470:34;;12500:4;-1:-1:-1;12493:11:17;;-1:-1:-1;;;12493:11:17;12470:34;12521:181;12551:2;12567:4;12585:5;12632:4;-1:-1:-1;;;;;12610:27:17;12617:4;-1:-1:-1;;;;;12610:27:17;;:40;;12646:4;12610:40;;805:653;925:4;945:12;960:2;-1:-1:-1;;;;;960:8:17;;969:12;:20;990:4;969:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;969:26:17;960:36;;;-1:-1:-1;;;;;;960:36:17;;;;;;;;;;;;;;;;;;;;;969:26;;960:36;;;;;;;-1:-1:-1;960:36:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;960:36:17;1032:98;;;-1:-1:-1;;;1032:98:17;;-1:-1:-1;;;;;1032:98:17;;;;;;-1:-1:-1;;;;;1032:98:17;;;;;;;;;;;;;;;960:36;;-1:-1:-1;1007:9:17;;;;1032:13;;:31;;:98;;;;;;;;;;;:13;:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1032:98:17;;;;;;;;;-1:-1:-1;1032:98:17;-1:-1:-1;1032:98:17;1141:107;;1232:5;1225:12;;;;;;;1141:107;1257:2;-1:-1:-1;;;;;1257:13:17;;1271:5;1257:20;;;;;;;;;;;;;-1:-1:-1;;;;;1257:20:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1288:9;1300:12;:19;1320:4;1300:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1300:25:17;;-1:-1:-1;1339:7:17;;;;1335:56;;1362:18;;;-1:-1:-1;;;1362:18:17;;;;;;;;;-1:-1:-1;;;;;1362:18:17;;;;;;;;-1:-1:-1;;;;;1362:9:17;;;;;:18;;;;;-1:-1:-1;;1362:18:17;;;;;;;-1:-1:-1;1362:9:17;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1335:56;-1:-1:-1;1446:4:17;;805:653;-1:-1:-1;;;;;;;805:653:17:o;2263:550::-;2391:6;2399;2407;2415:4;2435:12;2450:2;-1:-1:-1;;;;;2450:8:17;;2459:12;:20;2480:4;2459:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2459:26:17;2450:36;;;-1:-1:-1;;;;;;2450:36:17;;;;;;;;;;;;;;;;;;;;;2459:26;;2450:36;;;;;;;-1:-1:-1;2450:36:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2450:36:17;2527:98;;;-1:-1:-1;;;2527:98:17;;-1:-1:-1;;;;;2527:98:17;;;;;;-1:-1:-1;;;;;2527:98:17;;;;;;;;;;;;;;;2450:36;;-1:-1:-1;2498:9:17;;;;2527:13;;:31;;:98;;;;;;;;;;;:13;:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2527:98:17;;;;;;;;;-1:-1:-1;2527:98:17;-1:-1:-1;2527:98:17;2636:59;;2669:1;2672;2675;2678:5;2661:23;;;;;;;;;;;;;2636:59;2704:14;2721:2;-1:-1:-1;;;;;2721:8:17;;2730:12;:20;2751:4;2730:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2730:26:17;2721:36;;;-1:-1:-1;;;;;;2721:36:17;;;;;;;;;;;;;;;;;;;;;2730:26;;2721:36;;;;;;;-1:-1:-1;2721:36:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2721:36:17;2776:7;;-1:-1:-1;2721:36:17;;-1:-1:-1;2794:5:17;;-1:-1:-1;2801:4:17;;-1:-1:-1;;;2263:550:17;;;;;;;;:::o;3353:528::-;3569:125;;;-1:-1:-1;;;3569:125:17;;-1:-1:-1;;;;;3569:125:17;;;;;;-1:-1:-1;;;;;3569:125:17;;;;;;;;;;;;;;3672:12;;;;3569:125;;;;;;;3544:4;;3569:13;;:32;;:125;;;;;;;;;;;;;;;:13;:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3569:125:17;3564:169;;-1:-1:-1;3717:5:17;3710:12;;3564:169;3742:9;3754:12;:19;3774:4;3754:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3754:25:17;;-1:-1:-1;3793:7:17;;;;3789:65;;3816:2;-1:-1:-1;;;;;3816:9:17;;3826:2;3837:4;3830:12;;3816:27;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3816:27:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3789:65;3870:4;3863:11;;;3353:528;;;;;;;;;:::o;2819:::-;3035:125;;;-1:-1:-1;;;3035:125:17;;-1:-1:-1;;;;;3035:125:17;;;;;;-1:-1:-1;;;;;3035:125:17;;;;;;;;;;;;;;;;;;;;;;3010:4;;3035:13;;:32;;:125;;;;;;;;;;;;;;;:13;:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3035:125:17;3030:169;;-1:-1:-1;3183:5:17;3176:12;;3030:169;3208:9;3220:12;:19;3240:4;3220:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3220:25:17;;-1:-1:-1;3259:7:17;;;;3255:65;;3282:27;;;-1:-1:-1;;;3282:27:17;;;;;;;;;-1:-1:-1;;;;;3282:27:17;;;;;;;;-1:-1:-1;;;;;3282:9:17;;;;;:27;;;;;-1:-1:-1;;3282:27:17;;;;;;;-1:-1:-1;3282:9:17;:27;;;;;;;;;"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1321000",
        "executionCost": "1401",
        "totalCost": "1322401"
      },
      "external": {
        "executeAMOADDD(MemoryInteractor,uint32)": "infinite",
        "executeAMOADDW(MemoryInteractor,uint32)": "infinite",
        "executeAMOANDD(MemoryInteractor,uint32)": "infinite",
        "executeAMOANDW(MemoryInteractor,uint32)": "infinite",
        "executeAMOMAXD(MemoryInteractor,uint32)": "infinite",
        "executeAMOMAXUD(MemoryInteractor,uint32)": "infinite",
        "executeAMOMAXUW(MemoryInteractor,uint32)": "infinite",
        "executeAMOMAXW(MemoryInteractor,uint32)": "infinite",
        "executeAMOMIND(MemoryInteractor,uint32)": "infinite",
        "executeAMOMINUD(MemoryInteractor,uint32)": "infinite",
        "executeAMOMINUW(MemoryInteractor,uint32)": "infinite",
        "executeAMOMINW(MemoryInteractor,uint32)": "infinite",
        "executeAMOORD(MemoryInteractor,uint32)": "infinite",
        "executeAMOORW(MemoryInteractor,uint32)": "infinite",
        "executeAMOSWAPD(MemoryInteractor,uint32)": "infinite",
        "executeAMOSWAPW(MemoryInteractor,uint32)": "infinite",
        "executeAMOXORD(MemoryInteractor,uint32)": "infinite",
        "executeAMOXORW(MemoryInteractor,uint32)": "infinite",
        "executeLR(MemoryInteractor,uint32,uint64)": "infinite",
        "executeSC(MemoryInteractor,uint32,uint64)": "infinite"
      },
      "internal": {
        "executeAMODPart2(contract MemoryInteractor,uint32,uint64,int64,int64,uint64)": "infinite",
        "executeAMOPart1(contract MemoryInteractor,uint32,uint64)": "infinite",
        "executeAMOWPart2(contract MemoryInteractor,uint32,uint64,int32,int32,uint64)": "infinite"
      }
    },
    "methodIdentifiers": {
      "executeAMOADDD(MemoryInteractor,uint32)": "e9b833d6",
      "executeAMOADDW(MemoryInteractor,uint32)": "5311494e",
      "executeAMOANDD(MemoryInteractor,uint32)": "dce434c4",
      "executeAMOANDW(MemoryInteractor,uint32)": "486573ad",
      "executeAMOMAXD(MemoryInteractor,uint32)": "0c7f5664",
      "executeAMOMAXUD(MemoryInteractor,uint32)": "f0dccf75",
      "executeAMOMAXUW(MemoryInteractor,uint32)": "0269383a",
      "executeAMOMAXW(MemoryInteractor,uint32)": "66a520f7",
      "executeAMOMIND(MemoryInteractor,uint32)": "6f959f0c",
      "executeAMOMINUD(MemoryInteractor,uint32)": "127475a3",
      "executeAMOMINUW(MemoryInteractor,uint32)": "4a8460cd",
      "executeAMOMINW(MemoryInteractor,uint32)": "776218d2",
      "executeAMOORD(MemoryInteractor,uint32)": "526ca607",
      "executeAMOORW(MemoryInteractor,uint32)": "a0374d2c",
      "executeAMOSWAPD(MemoryInteractor,uint32)": "349e2cf5",
      "executeAMOSWAPW(MemoryInteractor,uint32)": "2afce049",
      "executeAMOXORD(MemoryInteractor,uint32)": "7a9efa2d",
      "executeAMOXORW(MemoryInteractor,uint32)": "246f89e8",
      "executeLR(MemoryInteractor,uint32,uint64)": "f452af62",
      "executeSC(MemoryInteractor,uint32,uint64)": "a2a87bc8"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RiscVInstructions/AtomicInstructions.sol\":\"AtomicInstructions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/BitsManipulationLibrary.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title Bits Manipulation Library\\n/// @author Felipe Argento / Stephen Chen\\n/// @notice Implements bit manipulation helper functions\\nlibrary BitsManipulationLibrary {\\n\\n    /// @notice Sign extend a shorter signed value to the full int32\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function int32SignExtension(int32 number, uint32 wordSize)\\n    public pure returns(int32)\\n    {\\n        uint32 uNumber = uint32(number);\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint32 mask = ((uint32(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return int32(uNumber);\\n    }\\n\\n    /// @notice Sign extend a shorter signed value to the full uint64\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function uint64SignExtension(uint64 number, uint64 wordSize)\\n    public pure returns(uint64)\\n    {\\n        uint64 uNumber = number;\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint64 mask = ((uint64(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return uNumber;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 64 bytes\\n    /// @param num number to have bytes swapped\\n    function uint64SwapEndian(uint64 num) public pure returns(uint64) {\\n        uint64 output = ((num & 0x00000000000000ff) << 56)|\\n            ((num & 0x000000000000ff00) << 40)|\\n            ((num & 0x0000000000ff0000) << 24)|\\n            ((num & 0x00000000ff000000) << 8) |\\n            ((num & 0x000000ff00000000) >> 8) |\\n            ((num & 0x0000ff0000000000) >> 24)|\\n            ((num & 0x00ff000000000000) >> 40)|\\n            ((num & 0xff00000000000000) >> 56);\\n\\n        return output;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 32 bytes\\n    /// @param num number to have bytes swapped\\n    function uint32SwapEndian(uint32 num) public pure returns(uint32) {\\n        uint32 output = ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);\\n        return output;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x95b97e0ae364fb91a3fdcf8132e7b61c745c23dd4e5beb980f396c05a69bbd08\",\"license\":\"Apache-2.0\"},\"contracts/CLINT.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./RealTimeClock.sol\\\";\\n\\n\\n/// @title CLINT\\n/// @author Felipe Argento\\n/// @notice Implements the Core Local Interruptor functionalities\\n/// @dev CLINT active addresses are 0x0200bff8(mtime) and 0x02004000(mtimecmp)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary CLINT {\\n\\n    uint64 constant CLINT_MSIP0_ADDR = 0x02000000;\\n    uint64 constant CLINT_MTIMECMP_ADDR = 0x02004000;\\n    uint64 constant CLINT_MTIME_ADDR = 0x0200bff8;\\n\\n    /// @notice reads clint\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function clintRead(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            return clintReadMsip(mi, wordSize);\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            return clintReadMtime(mi, wordSize);\\n        } else if (offset == CLINT_MTIME_ADDR) {\\n            return clintReadMtimecmp(mi, wordSize);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write to clint\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param val to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function clintWrite(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 val,\\n        uint64 wordSize)\\n    public returns (bool)\\n    {\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            if (wordSize == 32) {\\n                if ((val & 1) != 0) {\\n                    mi.setMip(RiscVConstants.getMipMsipMask());\\n                } else {\\n                    mi.resetMip(RiscVConstants.getMipMsipMask());\\n                }\\n                return true;\\n            }\\n            return false;\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            if (wordSize == 64) {\\n                mi.writeClintMtimecmp(val);\\n                mi.resetMip(RiscVConstants.getMipMsipMask());\\n                return true;\\n            }\\n            // partial mtimecmp is not supported\\n            return false;\\n        }\\n        return false;\\n    }\\n\\n    // internal functions\\n    function clintReadMsip(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 32) {\\n            if ((mi.readMip() & RiscVConstants.getMipMsipMask()) == RiscVConstants.getMipMsipMask()) {\\n                return(true, 1);\\n            } else {\\n                return (true, 0);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtime(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, RealTimeClock.rtcCycleToTime(mi.readMcycle()));\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtimecmp(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, mi.readClintMtimecmp());\\n        }\\n        return (false, 0);\\n    }\\n\\n    // getters\\n    function getClintMtimecmp() public pure returns (uint64) {\\n        return CLINT_MTIMECMP_ADDR;\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x89a1c4305fc05859156cbd73380aa63ce16a48aba24ce44d4b862b5f415d6362\",\"license\":\"Apache-2.0\"},\"contracts/Exceptions.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\n\\n/// @title Exceptions\\n/// @author Felipe Argento\\n/// @notice Implements raise exception behavior and mcause getters\\nlibrary Exceptions {\\n\\n    /// @notice Raise an exception (or interrupt).\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param cause Exception (or interrupt) mcause (or scause).\\n    /// @param tval Associated tval.\\n    function raiseException(\\n        MemoryInteractor mi,\\n        uint64 cause,\\n        uint64 tval)\\n    public\\n    {\\n        // All traps are handled in machine-mode, by default. Mideleg or Medeleg provide\\n        // bits to indicate if the interruption/exception should be taken care of by\\n        // lower privilege levels.\\n        // Medeleg -> Machine Exception Delegation register\\n        // Mideleg -> Machine Interrupt Delegation register\\n        // Reference: riscv-privileged-v1.9.1.pdf - Section 3.1.12, page 28.\\n        uint64 deleg = 0;\\n        uint64 priv = mi.readIflagsPrv();\\n\\n        if (priv <= RiscVConstants.getPrvS()) {\\n            if ((cause & getMcauseInterruptFlag()) != 0) {\\n                // If exception was caused by an interruption the delegated information is\\n                // stored on mideleg register.\\n\\n                // Clear the MCAUSE_INTERRUPT_FLAG() bit before shifting\\n                deleg = (mi.readMideleg() >> (cause & uint64(RiscVConstants.getXlen() - 1))) & 1;\\n            } else {\\n                //If not, information is in the medeleg register\\n                deleg = (mi.readMedeleg() >> cause) & 1;\\n            }\\n        }\\n        if (deleg != 0) {\\n            //is in S mode\\n\\n            // SCAUSE - Supervisor Cause Register\\n            // Register containg Interrupt bit (shows if the exception was cause by an interrupt\\n            // and the Exception code, that identifies the last exception\\n            // The execption codes can be seen at table 4.1\\n            // Reference: riscv-privileged-v1.9.1.pdf - Section 4.1.8, page 51.\\n            mi.writeScause(cause);\\n\\n            // SEPC - Supervisor Exception Program Counter\\n            // When a trap is taken, sepc is written with the address of the instruction\\n            // the encountered the exception.\\n            // Reference: riscv-privileged-v1.9.1.pdf - Section 4.1.7, page 50.\\n            mi.writeSepc(mi.readPc());\\n\\n            // STVAL - Supervisor Trap Value\\n            // stval is written with exception-specific information, when a trap is\\n            // taken into S-Mode. The specific values can be found in Reference.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 4.1.11, page 55.\\n            mi.writeStval(tval);\\n\\n            // MSTATUS - Machine Status Register\\n            // keeps track of and controls hart's current operating state.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 3.1.16, page 19.\\n            uint64 mstatus = mi.readMstatus();\\n\\n            // The SPIE bit indicates whether supervisor interrupts were enabled prior\\n            // to trapping into supervisor mode. When a trap is taken into supervisor\\n            // mode, SPIE is set to SIE, and SIE is set to 0. When an SRET instruction\\n            // is executed, SIE is set to SPIE, then SPIE is set to 1.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 4.1.1, page 19.\\n            mstatus = (mstatus & ~RiscVConstants.getMstatusSpieMask()) | (((mstatus >> RiscVConstants.getPrvS()) & 1) << RiscVConstants.getMstatusSpieShift());\\n\\n            // The SPP bit indicates the privilege level at which a hart was executing\\n            // before entering supervisor mode. When a trap is taken, SPP is set to 0\\n            // if the trap originated from user mode, or 1 otherwise.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 4.1.1, page 49.\\n            mstatus = (mstatus & ~RiscVConstants.getMstatusSppMask()) | (priv << RiscVConstants.getMstatusSppShift());\\n\\n            // The SIE bit enables or disables all interrupts in supervisor mode.\\n            // When SIE is clear, interrupts are not taken while in supervisor mode.\\n            // When the hart is running in user-mode, the value in SIE is ignored, and\\n            // supervisor-level interrupts are enabled. The supervisor can disable\\n            // indivdual interrupt sources using the sie register.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 4.1.1, page 50.\\n            mstatus &= ~RiscVConstants.getMstatusSieMask();\\n\\n            mi.writeMstatus(mstatus);\\n\\n            // TO-DO: Check gas cost to delegate function to library - if its zero the\\n            // if check should move to setPriv()\\n            if (priv != RiscVConstants.getPrvS()) {\\n                mi.setPriv(RiscVConstants.getPrvS());\\n            }\\n            // SVEC - Supervisor Trap Vector Base Address Register\\n            mi.writePc(mi.readStvec());\\n        } else {\\n            // is in M mode\\n            mi.writeMcause(cause);\\n            mi.writeMepc(mi.readPc());\\n            mi.writeMtval(tval);\\n            uint64 mstatus = mi.readMstatus();\\n\\n            mstatus = (mstatus & ~RiscVConstants.getMstatusMpieMask()) | (((mstatus >> RiscVConstants.getPrvM()) & 1) << RiscVConstants.getMstatusMpieShift());\\n            mstatus = (mstatus & ~RiscVConstants.getMstatusMppMask()) | (priv << RiscVConstants.getMstatusMppShift());\\n\\n            mstatus &= ~RiscVConstants.getMstatusMieMask();\\n            mi.writeMstatus(mstatus);\\n\\n            // TO-DO: Check gas cost to delegate function to library - if its zero the\\n            // if check should move to setPriv()\\n            if (priv != RiscVConstants.getPrvM()) {\\n                mi.setPriv(RiscVConstants.getPrvM());\\n            }\\n            mi.writePc(mi.readMtvec());\\n        }\\n    }\\n\\n    function getMcauseInsnAddressMisaligned() public pure returns(uint64) {return 0x0;}\\n    function getMcauseInsnAccessFault() public pure returns(uint64) {return 0x1;}\\n    function getMcauseIllegalInsn() public pure returns(uint64) {return 0x2;}\\n    function getMcauseBreakpoint() public pure returns(uint64) {return 0x3;}\\n    function getMcauseLoadAddressMisaligned() public pure returns(uint64) {return 0x4;}\\n    function getMcauseLoadAccessFault() public pure returns(uint64) {return 0x5;}\\n    function getMcauseStoreAmoAddressMisaligned () public pure returns(uint64) {return 0x6;}\\n    function getMcauseStoreAmoAccessFault() public pure returns(uint64) {return 0x7;}\\n    function getMcauseEcallBase() public pure returns(uint64) {return 0x8;}\\n    function getMcauseFetchPageFault() public pure returns(uint64) {return 0xc;}\\n    function getMcauseLoadPageFault() public pure returns(uint64) {return 0xd;}\\n    function getMcauseStoreAmoPageFault() public pure returns(uint64) {return 0xf;}\\n\\n    function getMcauseInterruptFlag() public pure returns(uint64) {return uint64(1) << uint64(RiscVConstants.getXlen() - 1);}\\n\\n}\\n\",\"keccak256\":\"0x3fa269090a0139e917f0ad30d087b26329db05b90edea5e08366843dd993064e\",\"license\":\"Apache-2.0\"},\"contracts/HTIF.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title HTIF\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\n\\n\\n/// @title HTIF\\n/// @author Felipe Argento\\n/// @notice Host-Target-Interface (HTIF) mediates communcation with external world.\\n/// @dev Its active addresses are 0x40000000(tohost) and 0x40000008(from host)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary HTIF {\\n\\n    uint64 constant HTIF_TOHOST_ADDR_CONST = 0x40008000;\\n    uint64 constant HTIF_FROMHOST_ADDR_CONST = 0x40008008;\\n    uint64 constant HTIF_IYIELD_ADDR_CONST = 0x40008020;\\n\\n    // [c++] enum HTIF_devices\\n    uint64 constant HTIF_DEVICE_HALT = 0;        //< Used to halt machine\\n    uint64 constant HTIF_DEVICE_CONSOLE = 1;     //< Used for console input and output\\n    uint64 constant HTIF_DEVICE_YIELD = 2;       //< Used to yield control back to host\\n\\n    // [c++] enum HTIF_commands\\n    uint64 constant HTIF_HALT_HALT = 0;\\n    uint64 constant HTIF_CONSOLE_GETCHAR = 0;\\n    uint64 constant HTIF_CONSOLE_PUTCHAR = 1;\\n    uint64 constant HTIF_YIELD_PROGRESS = 0;\\n    uint64 constant HTIF_YIELD_ROLLUP = 1;\\n\\n    /// @notice reads htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function htifRead(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n        // HTIF reads must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return (false, 0);\\n        }\\n\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return (true, mi.readHtifTohost());\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            return (true, mi.readHtifFromhost());\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param val value to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function htifWrite(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 val,\\n        uint64 wordSize\\n    )\\n    public returns (bool)\\n    {\\n        // HTIF writes must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return false;\\n        }\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return htifWriteTohost(mi, val);\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            mi.writeHtifFromhost(val);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Internal functions\\n    function htifWriteFromhost(MemoryInteractor mi, uint64 val)\\n    internal returns (bool)\\n    {\\n        mi.writeHtifFromhost(val);\\n        // TO-DO: check if h is interactive? reset from host? pollConsole?\\n        return true;\\n    }\\n\\n    function htifWriteTohost(MemoryInteractor mi, uint64 tohost)\\n    internal returns (bool)\\n    {\\n        uint32 device = uint32(tohost >> 56);\\n        uint32 cmd = uint32((tohost >> 48) & 0xff);\\n        uint64 payload = uint32((tohost & (~(uint256(1) >> 16))));\\n\\n        mi.writeHtifTohost(tohost);\\n\\n        if (device == HTIF_DEVICE_HALT) {\\n            return htifHalt(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_CONSOLE) {\\n            return htifConsole(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_YIELD) {\\n            return htifYield(\\n                mi,\\n                cmd,\\n                payload);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function htifHalt(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_HALT_HALT && ((payload & 1) == 1) ) {\\n            //set iflags to halted\\n            mi.setIflagsH(true);\\n        }\\n        return true;\\n    }\\n\\n    function htifYield(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        // If yield command is enabled, yield\\n        if ((mi.readHtifIYield() >> cmd) & 1 == 1) {\\n            mi.setIflagsY(true);\\n            mi.writeHtifFromhost((HTIF_DEVICE_YIELD << 56) | cmd << 48);\\n        }\\n\\n        return true;\\n    }\\n\\n    function htifConsole(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_CONSOLE_PUTCHAR) {\\n            htifPutchar(mi);\\n        } else if (cmd == HTIF_CONSOLE_GETCHAR) {\\n            htifGetchar(mi);\\n        } else {\\n            // Unknown HTIF console commands are silently ignored\\n            return true;\\n        }\\n    }\\n\\n    function htifPutchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        // TO-DO: what to do in the blockchain? Generate event?\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_PUTCHAR) << 48);\\n        return true;\\n    }\\n\\n    function htifGetchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_GETCHAR) << 48);\\n        return true;\\n    }\\n\\n    // getters\\n    function getHtifToHostAddr() public pure returns (uint64) {\\n        return HTIF_TOHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifFromHostAddr() public pure returns (uint64) {\\n        return HTIF_FROMHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifIYieldAddr() public pure returns (uint64) {\\n        return HTIF_IYIELD_ADDR_CONST;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x269d377ff4e5c3d0c65bb18d949f249c7e56ab2c208d8fb3f9376ac4d0b5f8f8\",\"license\":\"Apache-2.0\"},\"contracts/MemoryInteractor.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title MemoryInteractor.sol\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ShadowAddresses.sol\\\";\\nimport \\\"./HTIF.sol\\\";\\nimport \\\"./CLINT.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title MemoryInteractor\\n/// @author Felipe Argento\\n/// @notice Bridge between Memory Manager and Step\\n/// @dev Every read performed by mi.memoryRead or mi.write should be followed by an\\n/// @dev endianess swap from little endian to big endian. This is the case because\\n/// @dev EVM is big endian but RiscV is little endian.\\n/// @dev Reference: riscv-spec-v2.2.pdf - Preface to Version 2.0\\n/// @dev Reference: Ethereum yellowpaper - Version 69351d5\\n/// @dev    Appendix H. Virtual Machine Specification\\ncontract MemoryInteractor {\\n\\n    uint256 rwIndex; // read write index\\n    uint64[] rwPositions; // read write positions\\n    bytes8[] rwValues; // read write values\\n    bool[] isRead; // true if access is read, false if its write\\n\\n    function initializeMemory(\\n        uint64[] memory _rwPositions,\\n        bytes8[] memory _rwValues,\\n        bool[] memory _isRead\\n    ) virtual public\\n    {\\n        require(_rwPositions.length == _rwValues.length, \\\"Read/write arrays are not the same size\\\");\\n        require(_rwPositions.length == _isRead.length, \\\"Read/write arrays are not the same size\\\");\\n        rwIndex = 0;\\n        rwPositions = _rwPositions;\\n        rwValues = _rwValues;\\n        isRead = _isRead;\\n    }\\n\\n    function getRWIndex() public view returns (uint256) {\\n        return rwIndex;\\n    }\\n    // Reads\\n    function readX(uint64 registerIndex) public returns (uint64) {\\n        return memoryRead(registerIndex * 8);\\n    }\\n\\n    function readClintMtimecmp() public returns (uint64) {\\n        return memoryRead(CLINT.getClintMtimecmp());\\n    }\\n\\n    function readHtifFromhost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifFromHostAddr());\\n    }\\n\\n    function readHtifTohost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifToHostAddr());\\n    }\\n\\n    function readHtifIYield() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifIYieldAddr());\\n    }\\n\\n    function readMie() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMie());\\n    }\\n\\n    function readMcause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcause());\\n    }\\n\\n    function readMinstret() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMinstret());\\n    }\\n\\n    function readMcycle() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcycle());\\n    }\\n\\n    function readMcounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcounteren());\\n    }\\n\\n    function readMepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMepc());\\n    }\\n\\n    function readMip() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMip());\\n    }\\n\\n    function readMtval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtval());\\n    }\\n\\n    function readMvendorid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMvendorid());\\n    }\\n\\n    function readMarchid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMarchid());\\n    }\\n\\n    function readMimpid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMimpid());\\n    }\\n\\n    function readMscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMscratch());\\n    }\\n\\n    function readSatp() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSatp());\\n    }\\n\\n    function readScause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScause());\\n    }\\n\\n    function readSepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSepc());\\n    }\\n\\n    function readScounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScounteren());\\n    }\\n\\n    function readStval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStval());\\n    }\\n\\n    function readMideleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMideleg());\\n    }\\n\\n    function readMedeleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMedeleg());\\n    }\\n\\n    function readMtvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtvec());\\n    }\\n\\n    function readIlrsc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIlrsc());\\n    }\\n\\n    function readPc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getPc());\\n    }\\n\\n    function readSscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSscratch());\\n    }\\n\\n    function readStvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStvec());\\n    }\\n\\n    function readMstatus() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMstatus());\\n    }\\n\\n    function readMisa() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMisa());\\n    }\\n\\n    function readIflags() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIflags());\\n    }\\n\\n    function readIflagsPrv() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsPrvMask()) >> RiscVConstants.getIflagsPrvShift();\\n    }\\n\\n    function readIflagsH() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsHMask()) >> RiscVConstants.getIflagsHShift();\\n    }\\n\\n    function readIflagsY() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsYMask()) >> RiscVConstants.getIflagsYShift();\\n    }\\n\\n    function readMemory(uint64 paddr, uint64 wordSize) public returns (uint64) {\\n        // get relative address from unaligned paddr\\n        uint64 closestStartAddr = paddr & uint64(~7);\\n        uint64 relAddr = paddr - closestStartAddr;\\n\\n        // value just like its on MM, without endianess swap\\n        uint64 val = pureMemoryRead(closestStartAddr);\\n\\n        // mask to clean a piece of the value that was on memory\\n        uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n        val = BitsManipulationLibrary.uint64SwapEndian(val & valueMask) >> relAddr*8;\\n        return val;\\n    }\\n\\n    // Sets\\n    function setPriv(uint64 newPriv) public {\\n        writeIflagsPrv(newPriv);\\n        writeIlrsc(uint64(-1)); // invalidate reserved address\\n    }\\n\\n    function setIflagsI(bool idle) public {\\n        uint64 iflags = readIflags();\\n\\n        if (idle) {\\n            iflags = (iflags | RiscVConstants.getIflagsIMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsIMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip |= mask;\\n\\n        writeMip(mip);\\n\\n        setIflagsI(false);\\n    }\\n\\n    function resetMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip &= ~mask;\\n        writeMip(mip);\\n    }\\n\\n    // Writes\\n    function writeMie(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMie(), value);\\n    }\\n\\n    function writeStvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStvec(), value);\\n    }\\n\\n    function writeSscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSscratch(), value);\\n    }\\n\\n    function writeMip(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMip(), value);\\n    }\\n\\n    function writeSatp(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSatp(), value);\\n    }\\n\\n    function writeMedeleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMedeleg(), value);\\n    }\\n\\n    function writeMideleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMideleg(), value);\\n    }\\n\\n    function writeMtvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtvec(), value);\\n    }\\n\\n    function writeMcounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcounteren(), value);\\n    }\\n\\n    function writeMcycle(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcycle(), value);\\n    }\\n\\n    function writeMinstret(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMinstret(), value);\\n    }\\n\\n    function writeMscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMscratch(), value);\\n    }\\n\\n    function writeScounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScounteren(), value);\\n    }\\n\\n    function writeScause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScause(), value);\\n    }\\n\\n    function writeSepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSepc(), value);\\n    }\\n\\n    function writeStval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStval(), value);\\n    }\\n\\n    function writeMstatus(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMstatus(), value);\\n    }\\n\\n    function writeMcause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcause(), value);\\n    }\\n\\n    function writeMepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMepc(), value);\\n    }\\n\\n    function writeMtval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtval(), value);\\n    }\\n\\n    function writePc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getPc(), value);\\n    }\\n\\n    function writeIlrsc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getIlrsc(), value);\\n    }\\n\\n    function writeClintMtimecmp(uint64 value) public {\\n        memoryWrite(CLINT.getClintMtimecmp(), value);\\n    }\\n\\n    function writeHtifFromhost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifFromHostAddr(), value);\\n    }\\n\\n    function writeHtifTohost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifToHostAddr(), value);\\n    }\\n\\n    function setIflagsH(bool halt) public {\\n        uint64 iflags = readIflags();\\n\\n        if (halt) {\\n            iflags = (iflags | RiscVConstants.getIflagsHMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsHMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setIflagsY(bool isYield) public {\\n        uint64 iflags = readIflags();\\n\\n        if (isYield) {\\n            iflags = (iflags | RiscVConstants.getIflagsYMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsYMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeIflagsPrv(uint64 newPriv) public {\\n        uint64 iflags = readIflags();\\n\\n        // Clears bits 3 and 2 of iflags and use or to set new value\\n        iflags = (iflags & (~RiscVConstants.getIflagsPrvMask())) | (newPriv << RiscVConstants.getIflagsPrvShift());\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeMemory(\\n        uint64 paddr,\\n        uint64 value,\\n        uint64 wordSize\\n    ) public\\n    {\\n        uint64 numberOfBytes = wordSize / 8;\\n\\n        if (numberOfBytes == 8) {\\n            memoryWrite(paddr, value);\\n        } else {\\n            // get relative address from unaligned paddr\\n            uint64 closestStartAddr = paddr & uint64(~7);\\n            uint64 relAddr = paddr - closestStartAddr;\\n\\n            // oldvalue just like its on MM, without endianess swap\\n            uint64 oldVal = pureMemoryRead(closestStartAddr);\\n\\n            // Mask to clean a piece of the value that was on memory\\n            uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n\\n            // value is big endian, need to swap before further operation\\n            uint64 valueSwap = BitsManipulationLibrary.uint64SwapEndian(value & ((uint64(2) ** wordSize) - 1));\\n\\n            uint64 newvalue = ((oldVal & ~valueMask) | (valueSwap >> relAddr*8));\\n\\n            newvalue = BitsManipulationLibrary.uint64SwapEndian(newvalue);\\n            memoryWrite(closestStartAddr, newvalue);\\n        }\\n    }\\n\\n    function writeX(uint64 registerindex, uint64 value) public {\\n        memoryWrite(registerindex * 8, value);\\n    }\\n\\n    // Internal functions\\n    function memoryRead(uint64 _readAddress) public returns (uint64) {\\n        return BitsManipulationLibrary.uint64SwapEndian(\\n            uint64(memoryAccessManager(_readAddress, true))\\n        );\\n    }\\n\\n    function memoryWrite(uint64 _writeAddress, uint64 _value) virtual public {\\n        bytes8 bytesvalue = bytes8(BitsManipulationLibrary.uint64SwapEndian(_value));\\n        require(memoryAccessManager(_writeAddress, false) == bytesvalue, \\\"Written value does not match\\\");\\n    }\\n\\n    // Memory Write without endianess swap\\n    function pureMemoryWrite(uint64 _writeAddress, uint64 _value) virtual internal {\\n        require(\\n            memoryAccessManager(_writeAddress, false) == bytes8(_value),\\n            \\\"Written value does not match\\\"\\n        );\\n    }\\n\\n    // Memory Read without endianess swap\\n    function pureMemoryRead(uint64 _readAddress) internal returns (uint64) {\\n        return uint64(memoryAccessManager(_readAddress, true));\\n    }\\n\\n   // Private functions\\n\\n    // takes care of read/write access\\n    function memoryAccessManager(uint64 _address, bool _accessIsRead) internal virtual returns (bytes8) {\\n        require(isRead[rwIndex] == _accessIsRead, \\\"Access was not the correct type\\\");\\n\\n        uint64 position = rwPositions[rwIndex];\\n        bytes8 value = rwValues[rwIndex];\\n        rwIndex++;\\n\\n        require((position & 7) == 0, \\\"Position is not aligned\\\");\\n        require(position == _address, \\\"Position and read address do not match\\\");\\n\\n        return value;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x172ace0eab16d875b5dc342bf9fd15aeca8a493a4e7b0ab6b1667ae22361e78f\",\"license\":\"Apache-2.0\"},\"contracts/PMA.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\n\\n/// @title PMA\\n/// @author Felipe Argento\\n/// @notice Implements PMA behaviour\\nlibrary PMA {\\n\\n    uint64 constant MEMORY_ID = 0; //< DID for memory\\n    uint64 constant SHADOW_ID = 1; //< DID for shadow device\\n    uint64 constant DRIVE_ID = 2;  //< DID for drive device\\n    uint64 constant CLINT_ID = 3;  //< DID for CLINT device\\n    uint64 constant HTIF_ID = 4;   //< DID for HTIF device\\n\\n    /// @notice Finds PMA that contains target physical address.\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    //  contains the logs for this Step execution.\\n    /// @param paddr Target physical address.\\n    /// @return start of pma if found. If not, returns (0)\\n    function findPmaEntry(MemoryInteractor mi, uint64 paddr) public returns (uint64) {\\n        // Hard coded ram address starts at 0x800\\n        // In total there are 32 PMAs from processor shadow to Flash disk 7.\\n        // PMA 0 - describes RAM and is hardcoded to address 0x800\\n        // PMA 16 - 23 describe flash devices 0-7\\n        // RAM start field is hardcoded to 0x800\\n        // Reference: The Core of Cartesi, v1.02 - Table 3.\\n        uint64 pmaAddress = 0x800;\\n        uint64 lastPma = 62; // 0 - 31 * 2 words\\n\\n        for (uint64 i = 0; i <= lastPma; i += 2) {\\n            uint64 startWord = mi.memoryRead(pmaAddress + (i * 8));\\n\\n            uint64 lengthWord = mi.memoryRead(pmaAddress + ((i * 8 + 8)));\\n\\n            uint64 pmaStart = pmaGetStart(startWord);\\n            uint64 pmaLength = pmaGetLength(lengthWord);\\n\\n            // TO-DO: fix overflow possibility\\n            if (paddr >= pmaStart && paddr <= (pmaStart + pmaLength)) {\\n                return startWord;\\n            }\\n\\n            if (pmaLength == 0) {\\n                break;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    // M bit defines if the range is memory\\n    // The flag is pmaEntry start's word first bit\\n    // Reference: The Core of Cartesi, v1.02 - figure 2.\\n    function pmaGetIstartM(uint64 start) public pure returns (bool) {\\n        return start & 1 == 1;\\n    }\\n\\n    // X bit defines if the range is executable\\n    // The flag is pmaEntry start's word on position 5.\\n    // Reference: The Core of Cartesi, v1.02 - figure 2.\\n    function pmaGetIstartX(uint64 start) public pure returns (bool) {\\n        return (start >> 5) & 1 == 1;\\n    }\\n\\n    // E bit defines if the range is excluded\\n    // The flag is pmaEntry start's word third bit\\n    // Reference: The Core of Cartesi, v1.02 - figure 2.\\n    function pmaGetIstartE(uint64 start) public pure returns (bool) {\\n        return (start >> 2) & 1 == 1;\\n    }\\n\\n    // W bit defines write permission\\n    // The flag is pmaEntry start's word bit on position 4\\n    // Reference: The Core of Cartesi, v1.02 - figure 2.\\n    function pmaGetIstartW(uint64 start) public pure returns (bool) {\\n        return (start >> 4) & 1 == 1;\\n    }\\n\\n    // R bit defines read permission\\n    // The flag is pmaEntry start's word bit on position 3\\n    // Reference: The Core of Cartesi, v1.02 - figure 2.\\n    function pmaGetIstartR(uint64 start) public pure returns (bool) {\\n        return (start >> 3) & 1 == 1;\\n    }\\n\\n    function pmaIsCLINT(uint64 startWord) public pure returns (bool) {\\n        return pmaGetDID(startWord) == CLINT_ID;\\n    }\\n\\n    function pmaIsHTIF(uint64 startWord) public pure returns (bool) {\\n        return pmaGetDID(startWord) == HTIF_ID;\\n    }\\n\\n    // Both pmaStart and pmaLength have to be aligned to a 4KiB boundary.\\n    // So this leaves the lowest 12 bits for attributes. To find out the actual\\n    // start and length of the PMAs it is necessary to clean those attribute bits\\n    // Reference: The Core of Cartesi, v1.02 - Figure 2 - Page 5.\\n    function pmaGetStart(uint64 startWord) internal pure returns (uint64) {\\n        return startWord & 0xfffffffffffff000;\\n    }\\n\\n    function pmaGetLength(uint64 lengthWord) internal pure returns (uint64) {\\n        return lengthWord & 0xfffffffffffff000;\\n    }\\n\\n    // DID is encoded on bytes 8 - 11 of pma's start word.\\n    // It defines the devices id.\\n    // 0 for memory ranges\\n    // 1 for shadows\\n    // 1 for drive\\n    // 3 for CLINT\\n    // 4 for HTIF\\n    // Reference: The Core of Cartesi, v1.02 - Figure 2 - Page 5.\\n    function pmaGetDID(uint64 startWord) internal pure returns (uint64) {\\n        return (startWord >> 8) & 0x0F;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd04a7d5e93d2a15458aee4c8851a876e51f56f23c5e3ae25e9aef93a61f36e33\",\"license\":\"Apache-2.0\"},\"contracts/RealTimeClock.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title RealTimeClock\\npragma solidity ^0.7.0;\\n\\n/// @title RealTimeClock\\n/// @author Felipe Argento\\n/// @notice Real Time clock simulator\\nlibrary RealTimeClock {\\n    uint64 constant RTC_FREQ_DIV = 100;\\n    \\n    /// @notice Converts from cycle count to time count\\n    /// @param cycle Cycle count\\n    /// @return Time count\\n    function rtcCycleToTime(uint64 cycle) public pure returns (uint64) {\\n        return cycle / RTC_FREQ_DIV;\\n    }\\n\\n    /// @notice Converts from time count to cycle count\\n    /// @param  time Time count\\n    /// @return Cycle count\\n    function rtcTimeToCycle(uint64 time) public pure returns (uint64) {\\n        return time * RTC_FREQ_DIV;\\n    }\\n}\\n\",\"keccak256\":\"0x07a038d80a3f50c9cb153f63ff8d251a5704a2cd1c74863c9f5aeeb0aee247fd\",\"license\":\"Apache-2.0\"},\"contracts/RiscVConstants.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title RiscVConstants\\n/// @author Felipe Argento\\n/// @notice Defines getters for important constants\\nlibrary RiscVConstants {\\n    //iflags shifts\\n    function getIflagsHShift()  public pure returns(uint64) {return 0;}\\n    function getIflagsYShift()  public pure returns(uint64) {return 1;}\\n    function getIflagsIShift()  public pure returns(uint64) {return 2;}\\n    function getIflagsPrvShift()  public pure returns(uint64) {return 3;}\\n\\n    //iflags masks\\n    function getIflagsHMask()  public pure returns(uint64) {return uint64(1) << getIflagsHShift();}\\n    function getIflagsYMask()  public pure returns(uint64) {return uint64(1) << getIflagsYShift();}\\n    function getIflagsIMask()  public pure returns(uint64) {return uint64(1) << getIflagsIShift();}\\n    function getIflagsPrvMask()  public pure returns(uint64) {return uint64(3) << getIflagsPrvShift();}\\n\\n    //general purpose\\n    function getXlen() public pure returns(uint64) {return 64;}\\n    function getMxl()  public pure returns(uint64) {return 2;}\\n\\n    //privilege levels\\n    function getPrvU() public pure returns(uint64) {return 0;}\\n    function getPrvS() public pure returns(uint64) {return 1;}\\n    function getPrvH() public pure returns(uint64) {return 2;}\\n    function getPrvM() public pure returns(uint64) {return 3;}\\n\\n    //mstatus shifts\\n    function getMstatusUieShift()  public pure returns(uint64) {return 0;}\\n    function getMstatusSieShift()  public pure returns(uint64) {return 1;}\\n    function getMstatusHieShift()  public pure returns(uint64) {return 2;}\\n    function getMstatusMieShift()  public pure returns(uint64) {return 3;}\\n    function getMstatusUpieShift() public pure returns(uint64) {return 4;}\\n    function getMstatusSpieShift() public pure returns(uint64) {return 5;}\\n    function getMstatusMpieShift() public pure returns(uint64) {return 7;}\\n    function getMstatusSppShift()  public pure returns(uint64) {return 8;}\\n    function getMstatusMppShift()  public pure returns(uint64) {return 11;}\\n    function getMstatusFsShift()   public pure returns(uint64) {return 13;}\\n\\n    function getMstatusXsShift()   public pure returns(uint64) {return 15;}\\n    function getMstatusMprvShift() public pure returns(uint64) {return 17;}\\n    function getMstatusSumShift()  public pure returns(uint64) {return 18;}\\n    function getMstatusMxrShift()  public pure returns(uint64) {return 19;}\\n    function getMstatusTvmShift()  public pure returns(uint64) {return 20;}\\n    function getMstatusTwShift()   public pure returns(uint64) {return 21;}\\n    function getMstatusTsrShift()  public pure returns(uint64) {return 22;}\\n\\n\\n    function getMstatusUxlShift()  public pure returns(uint64) {return 32;}\\n    function getMstatusSxlShift()  public pure returns(uint64) {return 34;}\\n\\n    function getMstatusSdShift()   public pure returns(uint64) {return getXlen() - 1;}\\n\\n    //mstatus masks\\n    function getMstatusUieMask()  public pure returns(uint64) {return (uint64(1) << getMstatusUieShift());}\\n    function getMstatusSieMask()  public pure returns(uint64) {return uint64(1) << getMstatusSieShift();}\\n    function getMstatusMieMask()  public pure returns(uint64) {return uint64(1) << getMstatusMieShift();}\\n    function getMstatusUpieMask() public pure returns(uint64) {return uint64(1) << getMstatusUpieShift();}\\n    function getMstatusSpieMask() public pure returns(uint64) {return uint64(1) << getMstatusSpieShift();}\\n    function getMstatusMpieMask() public pure returns(uint64) {return uint64(1) << getMstatusMpieShift();}\\n    function getMstatusSppMask()  public pure returns(uint64) {return uint64(1) << getMstatusSppShift();}\\n    function getMstatusMppMask()  public pure returns(uint64) {return uint64(3) << getMstatusMppShift();}\\n    function getMstatusFsMask()   public pure returns(uint64) {return uint64(3) << getMstatusFsShift();}\\n    function getMstatusXsMask()   public pure returns(uint64) {return uint64(3) << getMstatusXsShift();}\\n    function getMstatusMprvMask() public pure returns(uint64) {return uint64(1) << getMstatusMprvShift();}\\n    function getMstatusSumMask()  public pure returns(uint64) {return uint64(1) << getMstatusSumShift();}\\n    function getMstatusMxrMask()  public pure returns(uint64) {return uint64(1) << getMstatusMxrShift();}\\n    function getMstatusTvmMask()  public pure returns(uint64) {return uint64(1) << getMstatusTvmShift();}\\n    function getMstatusTwMask()   public pure returns(uint64) {return uint64(1) << getMstatusTwShift();}\\n    function getMstatusTsrMask()  public pure returns(uint64) {return uint64(1) << getMstatusTsrShift();}\\n\\n    function getMstatusUxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusUxlShift();}\\n    function getMstatusSxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusSxlShift();}\\n    function getMstatusSdMask()   public pure returns(uint64) {return uint64(1) << getMstatusSdShift();}\\n\\n    // mstatus read/writes\\n    function getMstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()\\n        );\\n    }\\n\\n    function getMstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // sstatus read/writes\\n    function getSstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()\\n        );\\n    }\\n\\n    function getSstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // mcause for exceptions\\n    function getMcauseInsnAddressMisaligned() public pure returns(uint64) {return 0x0;} ///< instruction address misaligned\\n    function getMcauseInsnAccessFault() public pure returns(uint64) {return 0x1;} ///< instruction access fault\\n    function getMcauseIllegalInsn() public pure returns(uint64) {return 0x2;} ///< illegal instruction\\n    function getMcauseBreakpoint() public pure returns(uint64) {return 0x3;} ///< breakpoint\\n    function getMcauseLoadAddressMisaligned() public pure returns(uint64) {return 0x4;} ///< load address misaligned\\n    function getMcauseLoadAccessFault() public pure returns(uint64) {return 0x5;} ///< load access fault\\n    function getMcauseStoreAmoAddressMisaligned() public pure returns(uint64) {return 0x6;} ///< store/amo address misaligned\\n    function getMcauseStoreAmoAccessFault() public pure returns(uint64) {return 0x7;} ///< store/amo access fault\\n    ///< environment call (+0: from u-mode, +1: from s-mode, +3: from m-mode)\\n    function getMcauseEcallBase() public pure returns(uint64) { return 0x8;}\\n    function getMcauseFetchPageFault() public pure returns(uint64) {return 0xc;} ///< instruction page fault\\n    function getMcauseLoadPageFault() public pure returns(uint64) {return 0xd;} ///< load page fault\\n    function getMcauseStoreAmoPageFault() public pure returns(uint64) {return 0xf;} ///< store/amo page fault\\n\\n    function getMcauseInterruptFlag() public pure returns(uint64) {return uint64(1) << (getXlen() - 1);} ///< interrupt flag\\n\\n    // mcounteren constants\\n    function getMcounterenCyShift() public pure returns(uint64) {return 0;}\\n    function getMcounterenTmShift() public pure returns(uint64) {return 1;}\\n    function getMcounterenIrShift() public pure returns(uint64) {return 2;}\\n\\n    function getMcounterenCyMask() public pure returns(uint64) {return uint64(1) << getMcounterenCyShift();}\\n    function getMcounterenTmMask() public pure returns(uint64) {return uint64(1) << getMcounterenTmShift();}\\n    function getMcounterenIrMask() public pure returns(uint64) {return uint64(1) << getMcounterenIrShift();}\\n\\n    function getMcounterenRwMask() public pure returns(uint64) {return getMcounterenCyMask() | getMcounterenTmMask() | getMcounterenIrMask();}\\n    function getScounterenRwMask() public pure returns(uint64) {return getMcounterenRwMask();}\\n\\n    //paging constants\\n    function getPgShift() public pure returns(uint64) {return 12;}\\n    function getPgMask()  public pure returns(uint64) {((uint64(1) << getPgShift()) - 1);}\\n\\n    function getPteVMask() public pure returns(uint64) {return (1 << 0);}\\n    function getPteUMask() public pure returns(uint64) {return (1 << 4);}\\n    function getPteAMask() public pure returns(uint64) {return (1 << 6);}\\n    function getPteDMask() public pure returns(uint64) {return (1 << 7);}\\n\\n    function getPteXwrReadShift() public pure returns(uint64) {return 0;}\\n    function getPteXwrWriteShift() public pure returns(uint64) {return 1;}\\n    function getPteXwrCodeShift() public pure returns(uint64) {return 2;}\\n\\n    // page masks\\n    function getPageNumberShift() public pure returns(uint64) {return 12;}\\n\\n    function getPageOffsetMask() public pure returns(uint64) {return ((uint64(1) << getPageNumberShift()) - 1);}\\n\\n    // mip shifts:\\n    function getMipUsipShift() public pure returns(uint64) {return 0;}\\n    function getMipSsipShift() public pure returns(uint64) {return 1;}\\n    function getMipMsipShift() public pure returns(uint64) {return 3;}\\n    function getMipUtipShift() public pure returns(uint64) {return 4;}\\n    function getMipStipShift() public pure returns(uint64) {return 5;}\\n    function getMipMtipShift() public pure returns(uint64) {return 7;}\\n    function getMipUeipShift() public pure returns(uint64) {return 8;}\\n    function getMipSeipShift() public pure returns(uint64) {return 9;}\\n    function getMipMeipShift() public pure returns(uint64) {return 11;}\\n\\n    function getMipUsipMask() public pure returns(uint64) {return uint64(1) << getMipUsipShift();}\\n    function getMipSsipMask() public pure returns(uint64) {return uint64(1) << getMipSsipShift();}\\n    function getMipMsipMask() public pure returns(uint64) {return uint64(1) << getMipMsipShift();}\\n    function getMipUtipMask() public pure returns(uint64) {return uint64(1) << getMipUtipShift();}\\n    function getMipStipMask() public pure returns(uint64) {return uint64(1) << getMipStipShift();}\\n    function getMipMtipMask() public pure returns(uint64) {return uint64(1) << getMipMtipShift();}\\n    function getMipUeipMask() public pure returns(uint64) {return uint64(1) << getMipUeipShift();}\\n    function getMipSeipMask() public pure returns(uint64) {return uint64(1) << getMipSeipShift();}\\n    function getMipMeipMask() public pure returns(uint64) {return uint64(1) << getMipMeipShift();}\\n}\\n\",\"keccak256\":\"0xfd9070a43036eb37831d90fd3770640225fe8fd31e0dbe93034b247933b9a9c1\",\"license\":\"Apache-2.0\"},\"contracts/RiscVDecoder.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title RiscVDecoder\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title RiscVDecoder\\n/// @author Felipe Argento\\n/// @notice Contract responsible for decoding the riscv's instructions\\n//      It applies different bitwise operations and masks to reach\\n//      specific positions and use that positions to identify the\\n//      correct function to be executed\\nlibrary RiscVDecoder {\\n    /// @notice Get the instruction's RD\\n    /// @param insn Instruction\\n    function insnRd(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 7) & 0x1F;\\n    }\\n\\n    /// @notice Get the instruction's RS1\\n    /// @param insn Instruction\\n    function insnRs1(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 15) & 0x1F;\\n    }\\n\\n    /// @notice Get the instruction's RS2\\n    /// @param insn Instruction\\n    function insnRs2(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 20) & 0x1F;\\n    }\\n\\n    /// @notice Get the I-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnIImm(uint32 insn) public pure returns(int32) {\\n        return int32(insn) >> 20;\\n    }\\n\\n    /// @notice Get the I-type instruction's unsigned immediate value\\n    /// @param insn Instruction\\n    function insnIUimm(uint32 insn) public pure returns(uint32) {\\n        return insn >> 20;\\n    }\\n\\n    /// @notice Get the U-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnUImm(uint32 insn) public pure returns(int32) {\\n        return int32(insn & 0xfffff000);\\n    }\\n\\n    /// @notice Get the B-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnBImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(\\n            ((insn >> (31 - 12)) & (1 << 12)) |\\n            ((insn >> (25 - 5)) & 0x7e0) |\\n            ((insn >> (8 - 1)) & 0x1e) |\\n            ((insn << (11 - 7)) & (1 << 11))\\n        );\\n        return BitsManipulationLibrary.int32SignExtension(imm, 13);\\n    }\\n\\n    /// @notice Get the J-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnJImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(\\n            ((insn >> (31 - 20)) & (1 << 20)) |\\n            ((insn >> (21 - 1)) & 0x7fe) |\\n            ((insn >> (20 - 11)) & (1 << 11)) |\\n            (insn & 0xff000)\\n        );\\n        return BitsManipulationLibrary.int32SignExtension(imm, 21);\\n    }\\n\\n    /// @notice Get the S-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnSImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(((insn & 0xfe000000) >> (25 - 5)) | ((insn >> 7) & 0x1F));\\n        return BitsManipulationLibrary.int32SignExtension(imm, 12);\\n    }\\n\\n    /// @notice Get the instruction's opcode field\\n    /// @param insn Instruction\\n    function insnOpcode(uint32 insn) public pure returns (uint32) {\\n        return insn & 0x7F;\\n    }\\n\\n    /// @notice Get the instruction's funct3 field\\n    /// @param insn Instruction\\n    function insnFunct3(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 12) & 0x07;\\n    }\\n\\n    /// @notice Get the concatenation of instruction's funct3 and funct7 fields\\n    /// @param insn Instruction\\n    function insnFunct3Funct7(uint32 insn) public pure returns (uint32) {\\n        return ((insn >> 5) & 0x380) | (insn >> 25);\\n    }\\n\\n    /// @notice Get the concatenation of instruction's funct3 and funct5 fields\\n    /// @param insn Instruction\\n    function insnFunct3Funct5(uint32 insn) public pure returns (uint32) {\\n        return ((insn >> 7) & 0xE0) | (insn >> 27);\\n    }\\n\\n    /// @notice Get the instruction's funct7 field\\n    /// @param insn Instruction\\n    function insnFunct7(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 25) & 0x7F;\\n    }\\n\\n    /// @notice Get the instruction's funct6 field\\n    /// @param insn Instruction\\n    function insnFunct6(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 26) & 0x3F;\\n    }\\n}\\n\",\"keccak256\":\"0xd908b1ffb6386732728562ea6cc57d5ffe71dc2134e8b0f79857882c8a3eac3c\",\"license\":\"Apache-2.0\"},\"contracts/RiscVInstructions/AtomicInstructions.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title Atomic instructions\\npragma solidity ^0.7.0;\\n\\nimport \\\"../MemoryInteractor.sol\\\";\\nimport \\\"../RiscVDecoder.sol\\\";\\nimport \\\"../VirtualMemory.sol\\\";\\n\\nlibrary AtomicInstructions {\\n\\n    function executeLR(\\n        MemoryInteractor mi,\\n        uint32 insn,\\n        uint64 wordSize\\n    )\\n    public returns (bool)\\n    {\\n        uint64 vaddr = mi.readX(RiscVDecoder.insnRs1(insn));\\n        (bool succ, uint64 val) = VirtualMemory.readVirtualMemory(\\n            mi,\\n            wordSize,\\n            vaddr\\n        );\\n\\n        if (!succ) {\\n            //executeRetired / advance to raised expection\\n            return false;\\n        }\\n        mi.writeIlrsc(vaddr);\\n\\n        uint32 rd = RiscVDecoder.insnRd(insn);\\n        if (rd != 0) {\\n            mi.writeX(rd, val);\\n        }\\n        // advance to next instruction\\n        return true;\\n\\n    }\\n\\n    function executeSC(\\n        MemoryInteractor mi,\\n        uint32 insn,\\n        uint64 wordSize\\n    )\\n    public returns (bool)\\n    {\\n        uint64 val = 0;\\n        uint64 vaddr = mi.readX(RiscVDecoder.insnRs1(insn));\\n\\n        if (mi.readIlrsc() == vaddr) {\\n            if (!VirtualMemory.writeVirtualMemory(\\n                mi,\\n                wordSize,\\n                vaddr,\\n                mi.readX(RiscVDecoder.insnRs2(insn))\\n            )) {\\n                //advance to raised exception\\n                return false;\\n            }\\n            mi.writeIlrsc(uint64(-1));\\n        } else {\\n            val = 1;\\n        }\\n        uint32 rd = RiscVDecoder.insnRd(insn);\\n        if (rd != 0) {\\n            mi.writeX(rd, val);\\n        }\\n        //advance to next insn\\n        return true;\\n    }\\n\\n    function executeAMOPart1(\\n        MemoryInteractor mi,\\n        uint32 insn,\\n        uint64 wordSize\\n    )\\n    internal returns (uint64, uint64, uint64, bool)\\n    {\\n        uint64 vaddr = mi.readX(RiscVDecoder.insnRs1(insn));\\n\\n        (bool succ, uint64 tmpValm) = VirtualMemory.readVirtualMemory(\\n            mi,\\n            wordSize,\\n            vaddr\\n        );\\n\\n        if (!succ) {\\n            return (0, 0, 0, false);\\n        }\\n        uint64 tmpValr = mi.readX(RiscVDecoder.insnRs2(insn));\\n\\n        return (tmpValm, tmpValr, vaddr, true);\\n    }\\n\\n    function executeAMODPart2(\\n        MemoryInteractor mi,\\n        uint32 insn,\\n        uint64 vaddr,\\n        int64 valr,\\n        int64 valm,\\n        uint64 wordSize\\n    )\\n    internal returns (bool)\\n    {\\n        if (!VirtualMemory.writeVirtualMemory(\\n            mi,\\n            wordSize,\\n            vaddr,\\n            uint64(valr)\\n        )) {\\n            return false;\\n        }\\n        uint32 rd = RiscVDecoder.insnRd(insn);\\n        if (rd != 0) {\\n            mi.writeX(rd, uint64(valm));\\n        }\\n        return true;\\n    }\\n\\n    function executeAMOWPart2(\\n        MemoryInteractor mi,\\n        uint32 insn,\\n        uint64 vaddr,\\n        int32 valr,\\n        int32 valm,\\n        uint64 wordSize\\n    )\\n    internal returns (bool)\\n    {\\n        if (!VirtualMemory.writeVirtualMemory(\\n            mi,\\n            wordSize,\\n            vaddr,\\n            uint64(valr)\\n        )) {\\n            return false;\\n        }\\n        uint32 rd = RiscVDecoder.insnRd(insn);\\n        if (rd != 0) {\\n            mi.writeX(rd, uint64(valm));\\n        }\\n        return true;\\n    }\\n\\n    function executeAMOSWAPW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(valr),\\n            int32(valm), 32\\n        );\\n    }\\n\\n    function executeAMOADDW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(int32(valm) + int32(valr)),\\n            int32(valm), 32\\n        );\\n    }\\n\\n    function executeAMOXORW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(valm ^ valr),\\n            int32(valm), 32\\n        );\\n    }\\n\\n    function executeAMOANDW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(valm & valr),\\n            int32(valm),\\n            32\\n        );\\n    }\\n\\n    function executeAMOORW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(valm | valr),\\n            int32(valm),\\n            32\\n        );\\n\\n    }\\n\\n    function executeAMOMINW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(valm) < int32(valr)? int32(valm) : int32(valr),\\n            int32(valm),\\n            32\\n        );\\n    }\\n\\n    function executeAMOMAXW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(valm) > int32(valr)? int32(valm) : int32(valr),\\n            int32(valm),\\n            32\\n        );\\n    }\\n\\n    function executeAMOMINUW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(uint32(valm) < uint32(valr)? valm : valr),\\n            int32(valm),\\n            32\\n        );\\n    }\\n\\n    function executeAMOMAXUW(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            32\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMOWPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int32(uint32(valm) > uint32(valr)? valm : valr),\\n            int32(valm),\\n            32\\n        );\\n    }\\n\\n    function executeAMOSWAPD(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(valr),\\n            int64(valm),\\n            64\\n        );\\n    }\\n\\n    function executeAMOADDD(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(valm + valr),\\n            int64(valm),\\n            64\\n        );\\n    }\\n\\n    function executeAMOXORD(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(valm ^ valr),\\n            int64(valm),\\n            64\\n        );\\n    }\\n\\n    function executeAMOANDD(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(valm & valr),\\n            int64(valm),\\n            64\\n        );\\n    }\\n\\n    function executeAMOORD(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(valm | valr),\\n            int64(valm),\\n            64\\n        );\\n\\n    }\\n\\n    function executeAMOMIND(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(valm) < int64(valr)? int64(valm) : int64(valr),\\n            int64(valm),\\n            64\\n        );\\n    }\\n\\n    function executeAMOMAXD(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(valm) > int64(valr)? int64(valm) : int64(valr),\\n            int64(valm),\\n            64\\n        );\\n    }\\n\\n    function executeAMOMINUD(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        // TO-DO: this is uint not int\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(uint64(valm) < uint64(valr)? valm : valr),\\n            int64(valm),\\n            64\\n        );\\n    }\\n\\n    // TO-DO: this is uint not int\\n    function executeAMOMAXUD(\\n        MemoryInteractor mi,\\n        uint32 insn\\n    )\\n    public returns(bool)\\n    {\\n        (uint64 valm, uint64 valr, uint64 vaddr, bool succ) = executeAMOPart1(\\n            mi,\\n            insn,\\n            64\\n        );\\n        if (!succ)\\n            return succ;\\n        return executeAMODPart2(\\n            mi,\\n            insn,\\n            vaddr,\\n            int64(uint64(valm) > uint64(valr)? valm : valr),\\n            int64(valm),\\n            64\\n        );\\n    }\\n}\\n\\n\",\"keccak256\":\"0x49098053ea25b94900e0bb187ac963dd2e6825178a3d86518806281ff1e36ea4\",\"license\":\"Apache-2.0\"},\"contracts/ShadowAddresses.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\n/// @title ShadowAddresses\\n/// @author Felipe Argento\\n/// @notice Defines the processor state. Memory-mapped to the lowest 512 bytes in pm\\n/// @dev Defined on Cartesi techpaper version 1.02 - Section 3 - table 2 \\n/// Source: https://cartesi.io/cartesi_whitepaper.pdf \\nlibrary ShadowAddresses {\\n    uint64 constant PC         = 0x100;\\n    uint64 constant MVENDORID  = 0x108;\\n    uint64 constant MARCHID    = 0x110;\\n    uint64 constant MIMPID     = 0x118;\\n    uint64 constant MCYCLE     = 0x120;\\n    uint64 constant MINSTRET   = 0x128;\\n    uint64 constant MSTATUS    = 0x130;\\n    uint64 constant MTVEC      = 0x138;\\n    uint64 constant MSCRATCH   = 0x140;\\n    uint64 constant MEPC       = 0x148;\\n    uint64 constant MCAUSE     = 0x150;\\n    uint64 constant MTVAL      = 0x158;\\n    uint64 constant MISA       = 0x160;\\n    uint64 constant MIE        = 0x168;\\n    uint64 constant MIP        = 0x170;\\n    uint64 constant MEDELEG    = 0x178;\\n    uint64 constant MIDELEG    = 0x180;\\n    uint64 constant MCOUNTEREN = 0x188;\\n    uint64 constant STVEC      = 0x190;\\n    uint64 constant SSCRATCH   = 0x198;\\n    uint64 constant SEPC       = 0x1a0;\\n    uint64 constant SCAUSE     = 0x1a8;\\n    uint64 constant STVAL      = 0x1b0;\\n    uint64 constant SATP       = 0x1b8;\\n    uint64 constant SCOUNTEREN = 0x1c0;\\n    uint64 constant ILRSC      = 0x1c8;\\n    uint64 constant IFLAGS     = 0x1d0;\\n\\n    //getters - contracts cant access constants directly\\n    function getPc()         public pure returns(uint64) {return PC;}\\n    function getMvendorid()  public pure returns(uint64) {return MVENDORID;}\\n    function getMarchid()    public pure returns(uint64) {return MARCHID;}\\n    function getMimpid()     public pure returns(uint64) {return MIMPID;}\\n    function getMcycle()     public pure returns(uint64) {return MCYCLE;}\\n    function getMinstret()   public pure returns(uint64) {return MINSTRET;}\\n    function getMstatus()    public pure returns(uint64) {return MSTATUS;}\\n    function getMtvec()      public pure returns(uint64) {return MTVEC;}\\n    function getMscratch()   public pure returns(uint64) {return MSCRATCH;}\\n    function getMepc()       public pure returns(uint64) {return MEPC;}\\n    function getMcause()     public pure returns(uint64) {return MCAUSE;}\\n    function getMtval()      public pure returns(uint64) {return MTVAL;}\\n    function getMisa()       public pure returns(uint64) {return MISA;}\\n    function getMie()        public pure returns(uint64) {return MIE;}\\n    function getMip()        public pure returns(uint64) {return MIP;}\\n    function getMedeleg()    public pure returns(uint64) {return MEDELEG;}\\n    function getMideleg()    public pure returns(uint64) {return MIDELEG;}\\n    function getMcounteren() public pure returns(uint64) {return MCOUNTEREN;}\\n    function getStvec()      public pure returns(uint64) {return STVEC;}\\n    function getSscratch()   public pure returns(uint64) {return SSCRATCH;}\\n    function getSepc()       public pure returns(uint64) {return SEPC;}\\n    function getScause()     public pure returns(uint64) {return SCAUSE;}\\n    function getStval()      public pure returns(uint64) {return STVAL;}\\n    function getSatp()       public pure returns(uint64) {return SATP;}\\n    function getScounteren() public pure returns(uint64) {return SCOUNTEREN;}\\n    function getIlrsc()      public pure returns(uint64) {return ILRSC;}\\n    function getIflags()     public pure returns(uint64) {return IFLAGS;}\\n}\\n\",\"keccak256\":\"0xbfd187bab76a2802de777406cdddc9fe0cbf79ab8cb6f76075da7db664a9e9ae\",\"license\":\"Apache-2.0\"},\"contracts/VirtualMemory.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ShadowAddresses.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./RiscVDecoder.sol\\\";\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./PMA.sol\\\";\\nimport \\\"./CLINT.sol\\\";\\nimport \\\"./HTIF.sol\\\";\\nimport \\\"./Exceptions.sol\\\";\\n\\n/// @title Virtual Memory\\n/// @author Felipe Argento\\n/// @notice Defines Virtual Memory behaviour\\nlibrary VirtualMemory {\\n\\n    // Variable positions on their respective array.\\n    // This is not an enum because enum assumes the type from the number of variables\\n    // So we would have to explicitly cast to uint256 on every single access\\n    uint256 constant PRIV = 0;\\n    uint256 constant MODE= 1;\\n    uint256 constant VADDR_SHIFT = 2;\\n    uint256 constant PTE_SIZE_LOG2 = 3;\\n    uint256 constant VPN_BITS = 4;\\n    uint256 constant SATP_PPN_BITS = 5;\\n\\n    uint256 constant VADDR_MASK = 0;\\n    uint256 constant PTE_ADDR = 1;\\n    uint256 constant MSTATUS = 2;\\n    uint256 constant SATP = 3;\\n    uint256 constant VPN_MASK = 4;\\n    uint256 constant PTE = 5;\\n\\n    // Write/Read Virtual Address variable indexes\\n    uint256 constant OFFSET = 0;\\n    uint256 constant PMA_START = 1;\\n    uint256 constant PADDR = 2;\\n    uint256 constant VAL = 3;\\n\\n    /// @notice Read word to virtual memory\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @param vaddr is the words virtual address\\n    /// @return True if write was succesfull, false if not.\\n    /// @return Word with receiveing value.\\n    function readVirtualMemory(\\n        MemoryInteractor mi,\\n        uint64 wordSize,\\n        uint64 vaddr\\n    )\\n    public returns(bool, uint64)\\n    {\\n        uint64[6] memory uint64vars;\\n        if (vaddr & (wordSize/8 - 1) != 0) {\\n            // Word is not aligned - raise exception\\n            Exceptions.raiseException(\\n                mi,\\n                Exceptions.getMcauseLoadAddressMisaligned(),\\n                vaddr\\n            );\\n            return (false, 0);\\n        } else {\\n            (bool translateSuccess, uint64 paddr) = translateVirtualAddress(\\n                mi,\\n                vaddr,\\n                RiscVConstants.getPteXwrReadShift()\\n            );\\n\\n            if (!translateSuccess) {\\n                // translation failed - raise exception\\n                Exceptions.raiseException(\\n                    mi,\\n                    Exceptions.getMcauseLoadPageFault(),\\n                    vaddr\\n                );\\n                return (false, 0);\\n            }\\n            uint64vars[PMA_START] = PMA.findPmaEntry(mi, paddr);\\n            if (PMA.pmaGetIstartE(uint64vars[PMA_START]) || !PMA.pmaGetIstartR(uint64vars[PMA_START])) {\\n                // PMA is either excluded or we dont have permission to write - raise exception\\n                Exceptions.raiseException(\\n                    mi,\\n                    Exceptions.getMcauseLoadAccessFault(),\\n                    vaddr\\n                );\\n                return (false, 0);\\n            } else if (PMA.pmaGetIstartM(uint64vars[PMA_START])) {\\n                return (true, mi.readMemory(paddr, wordSize));\\n            }else {\\n                bool success = false;\\n                if (PMA.pmaIsHTIF(uint64vars[PMA_START])) {\\n                    (success, uint64vars[VAL]) = HTIF.htifRead(\\n                        mi,\\n                        paddr,\\n                        wordSize\\n                    );\\n                } else if (PMA.pmaIsCLINT(uint64vars[PMA_START])) {\\n                    (success, uint64vars[VAL]) = CLINT.clintRead(\\n                        mi,\\n                        paddr,\\n                        wordSize\\n                    );\\n                }\\n                if (!success) {\\n                    Exceptions.raiseException(\\n                        mi,\\n                        Exceptions.getMcauseLoadAccessFault(),\\n                        vaddr\\n                    );\\n                }\\n                return (success, uint64vars[VAL]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Writes word to virtual memory\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @param vaddr is the words virtual address\\n    /// @param val is the value to be written\\n    /// @return True if write was succesfull, false if not.\\n    function writeVirtualMemory(\\n        MemoryInteractor mi,\\n        uint64 wordSize,\\n        uint64 vaddr,\\n        uint64 val\\n    )\\n    public returns (bool)\\n    {\\n        uint64[6] memory uint64vars;\\n\\n        if (vaddr & ((wordSize / 8) - 1) != 0) {\\n            // Word is not aligned - raise exception\\n            Exceptions.raiseException(\\n                mi,\\n                Exceptions.getMcauseStoreAmoAddressMisaligned(),\\n                vaddr\\n            );\\n            return false;\\n        } else {\\n            bool translateSuccess;\\n            (translateSuccess, uint64vars[PADDR]) = translateVirtualAddress(\\n                mi,\\n                vaddr,\\n                RiscVConstants.getPteXwrWriteShift()\\n            );\\n\\n            if (!translateSuccess) {\\n                // translation failed - raise exception\\n                Exceptions.raiseException(\\n                    mi,\\n                    Exceptions.getMcauseStoreAmoPageFault(),\\n                    vaddr);\\n\\n                return false;\\n            }\\n            uint64vars[PMA_START] = PMA.findPmaEntry(mi, uint64vars[PADDR]);\\n\\n            if (PMA.pmaGetIstartE(uint64vars[PMA_START]) || !PMA.pmaGetIstartW(uint64vars[PMA_START])) {\\n                // PMA is either excluded or we dont have permission to write - raise exception\\n                Exceptions.raiseException(\\n                    mi,\\n                    Exceptions.getMcauseStoreAmoAccessFault(),\\n                    vaddr\\n                );\\n                return false;\\n            } else if (PMA.pmaGetIstartM(uint64vars[PMA_START])) {\\n                //write to memory\\n                mi.writeMemory(\\n                    uint64vars[PADDR],\\n                    val,\\n                    wordSize\\n                );\\n                return true;\\n            } else {\\n\\n                if (PMA.pmaIsHTIF(uint64vars[PMA_START])) {\\n                    if (!HTIF.htifWrite(\\n                       mi,\\n                       PMA.pmaGetStart(uint64vars[PMA_START]), val, wordSize\\n                    )) {\\n                        Exceptions.raiseException(\\n                            mi,\\n                            Exceptions.getMcauseStoreAmoAccessFault(),\\n                            vaddr\\n                        );\\n                        return false;\\n                    }\\n                } else if (PMA.pmaIsCLINT(uint64vars[PMA_START])) {\\n                    if (!CLINT.clintWrite(\\n                            mi,\\n                            PMA.pmaGetStart(uint64vars[PMA_START]), val, wordSize\\n                    )) {\\n                        Exceptions.raiseException(\\n                            mi,\\n                            Exceptions.getMcauseStoreAmoAccessFault(),\\n                            vaddr\\n                        );\\n                        return false;\\n                    }\\n                }\\n                return true;\\n            }\\n        }\\n    }\\n\\n    // Finds the physical address associated to the virtual address (vaddr).\\n    // Walks the page table until it finds a valid one. Returns a bool if the physical\\n    // address was succesfully found along with the address. Returns false and zer0\\n    // if something went wrong.\\n\\n    // Virtual Address Translation proccess is defined, step by step on the following Reference:\\n    // Reference: riscv-priv-spec-1.10.pdf - Section 4.3.2, page 62.\\n    function translateVirtualAddress(\\n        MemoryInteractor mi,\\n        uint64 vaddr,\\n        int xwrShift\\n    )\\n    public returns(bool, uint64)\\n    {\\n        //TO-DO: check shift + mask\\n        //TO-DO: use bitmanipulation right shift\\n\\n        // Through arrays we force variables that were being put on stack to be stored\\n        // in memory. It is more expensive, but the stack only supports 16 variables.\\n        uint64[6] memory uint64vars;\\n        int[6] memory intvars;\\n\\n        // Reads privilege level on iflags register. The privilege level is located\\n        // on bits 2 and 3.\\n        // Reference: The Core of Cartesi, v1.02 - figure 1.\\n        intvars[PRIV] = mi.readIflagsPrv();\\n\\n        //readMstatus\\n        uint64vars[MSTATUS] = mi.memoryRead(ShadowAddresses.getMstatus());\\n\\n        // When MPRV is set, data loads and stores use privilege in MPP\\n        // instead of the current privilege level (code access is unaffected)\\n        //TO-DO: Check this &/&& and shifts\\n        if ((uint64vars[MSTATUS] & RiscVConstants.getMstatusMprvMask() != 0) && (xwrShift != RiscVConstants.getPteXwrCodeShift())) {\\n            intvars[PRIV] = (uint64vars[MSTATUS] & RiscVConstants.getMstatusMppMask()) >> RiscVConstants.getMstatusMppShift();\\n        }\\n\\n        // Physical memory is mediated by Machine-mode so, if privilege is M-mode it\\n        // does not use virtual Memory\\n        // Reference: riscv-priv-spec-1.7.pdf - Section 3.3, page 32.\\n        if (intvars[PRIV] == RiscVConstants.getPrvM()) {\\n            return (true, vaddr);\\n        }\\n\\n        // SATP - Supervisor Address Translation and Protection Register\\n        // Holds MODE, Physical page number (PPN) and address space identifier (ASID)\\n        // MODE is located on bits 60 to 63 for RV64.\\n        // Reference: riscv-priv-spec-1.10.pdf - Section 4.1.12, page 56.\\n        uint64vars[SATP] = mi.memoryRead(ShadowAddresses.getSatp());\\n        // In RV64, mode can be\\n        //   0: Bare: No translation or protection\\n        //   8: sv39: Page-based 39-bit virtual addressing\\n        //   9: sv48: Page-based 48-bit virtual addressing\\n        // Reference: riscv-priv-spec-1.10.pdf - Table 4.3, page 57.\\n        intvars[MODE] = (uint64vars[SATP] >> 60) & 0xf;\\n\\n        if (intvars[MODE] == 0) {\\n            return(true, vaddr);\\n        } else if (intvars[MODE] < 8 || intvars[MODE] > 9) {\\n            return(false, 0);\\n        }\\n        // Here we know we are in sv39 or sv48 modes\\n\\n        // Page table hierarchy of sv39 has 3 levels, and sv48 has 4 levels\\n        int levels = intvars[MODE] - 8 + 3;\\n        // Page offset are bits located from 0 to 11.\\n        // Then come levels virtual page numbers (VPN)\\n        // The rest of vaddr must be filled with copies of the\\n        // most significant bit in VPN[levels]\\n        // Hence, the use of arithmetic shifts here\\n        // Reference: riscv-priv-spec-1.10.pdf - Figure 4.16, page 63.\\n\\n        //TO-DO: Use bitmanipulation library for arithmetic shift\\n        intvars[VADDR_SHIFT] = RiscVConstants.getXlen() - (RiscVConstants.getPgShift() + levels * 9);\\n        if (((int64(vaddr) << uint64(intvars[VADDR_SHIFT])) >> uint64(intvars[VADDR_SHIFT])) != int64(vaddr)) {\\n            return (false, 0);\\n        }\\n        // The least significant 44 bits of satp contain the physical page number\\n        // for the root page table\\n        // Reference: riscv-priv-spec-1.10.pdf - Figure 4.12, page 57.\\n        intvars[SATP_PPN_BITS] = 44;\\n        // Initialize pteAddr with the base address for the root page table\\n        uint64vars[PTE_ADDR] = (uint64vars[SATP] & ((uint64(1) << uint64(intvars[SATP_PPN_BITS])) - 1)) << RiscVConstants.getPgShift();\\n        // All page table entries have 8 bytes\\n        // Each page table has 4k/pteSize entries\\n        // To index all entries, we need vpnBits\\n        // Reference: riscv-priv-spec-1.10.pdf - Section 4.4.1, page 63.\\n        intvars[PTE_SIZE_LOG2] = 3;\\n        intvars[VPN_BITS] = 12 - intvars[PTE_SIZE_LOG2];\\n        uint64vars[VPN_MASK] = uint64((1 << uint(intvars[VPN_BITS])) - 1);\\n\\n        for (int i = 0; i < levels; i++) {\\n            // Mask out VPN[levels -i-1]\\n            intvars[VADDR_SHIFT] = RiscVConstants.getPgShift() + intvars[VPN_BITS] * (levels - 1 - i);\\n            uint64 vpn = (vaddr >> uint(intvars[VADDR_SHIFT])) & uint64vars[VPN_MASK];\\n            // Add offset to find physical address of page table entry\\n            uint64vars[PTE_ADDR] += vpn << uint64(intvars[PTE_SIZE_LOG2]);\\n            //Read page table entry from physical memory\\n            bool readRamSucc;\\n            (readRamSucc, uint64vars[PTE]) = readRamUint64(mi, uint64vars[PTE_ADDR]);\\n\\n            if (!readRamSucc) {\\n                return(false, 0);\\n            }\\n\\n            // The OS can mark page table entries as invalid,\\n            // but these entries shouldn't be reached during page lookups\\n            //TO-DO: check if condition\\n            if ((uint64vars[PTE] & RiscVConstants.getPteVMask()) == 0) {\\n                return (false, 0);\\n            }\\n            // Clear all flags in least significant bits, then shift back to multiple of page size to form physical address\\n            uint64 ppn = (uint64vars[PTE] >> 10) << RiscVConstants.getPgShift();\\n            // Obtain X, W, R protection bits\\n            // X, W, R bits are located on bits 1 to 3 on physical address\\n            // Reference: riscv-priv-spec-1.10.pdf - Figure 4.18, page 63.\\n            int xwr = (uint64vars[PTE] >> 1) & 7;\\n            // xwr !=0 means we are done walking the page tables\\n            if (xwr != 0) {\\n                // These protection bit combinations are reserved for future use\\n                if (xwr == 2 || xwr == 6) {\\n                    return (false, 0);\\n                }\\n                // (We know we are not PRV_M if we reached here)\\n                if (intvars[PRIV] == RiscVConstants.getPrvS()) {\\n                    // If SUM is set, forbid S-mode code from accessing U-mode memory\\n                    //TO-DO: check if condition\\n                    if ((uint64vars[PTE] & RiscVConstants.getPteUMask() != 0) && ((uint64vars[MSTATUS] & RiscVConstants.getMstatusSumMask())) == 0) {\\n                        return (false, 0);\\n                    }\\n                } else {\\n                    // Forbid U-mode code from accessing S-mode memory\\n                    if ((uint64vars[PTE] & RiscVConstants.getPteUMask()) == 0) {\\n                        return (false, 0);\\n                    }\\n                }\\n                // MXR allows to read access to execute-only pages\\n                if (uint64vars[MSTATUS] & RiscVConstants.getMstatusMxrMask() != 0) {\\n                    //Set R bit if X bit is set\\n                    xwr = xwr | (xwr >> 2);\\n                }\\n                // Check protection bits against request access\\n                if (((xwr >> uint(xwrShift)) & 1) == 0) {\\n                    return (false, 0);\\n                }\\n                // Check page, megapage, and gigapage alignment\\n                uint64vars[VADDR_MASK] = (uint64(1) << uint64(intvars[VADDR_SHIFT])) - 1;\\n                if (ppn & uint64vars[VADDR_MASK] != 0) {\\n                    return (false, 0);\\n                }\\n                // Decide if we need to update access bits in pte\\n                bool updatePte = (uint64vars[PTE] & RiscVConstants.getPteAMask() == 0) || ((uint64vars[PTE] & RiscVConstants.getPteDMask() == 0) && xwrShift == RiscVConstants.getPteXwrWriteShift());\\n\\n                uint64vars[PTE] |= RiscVConstants.getPteAMask();\\n\\n                if (xwrShift == RiscVConstants.getPteXwrWriteShift()) {\\n                    uint64vars[PTE] = uint64vars[PTE] | RiscVConstants.getPteDMask();\\n                }\\n                // If so, update pte\\n                if (updatePte) {\\n                    writeRamUint64(\\n                        mi,\\n                        uint64vars[PTE_ADDR],\\n                        uint64vars[PTE]\\n                    );\\n                }\\n                // Add page offset in vaddr to ppn to form physical address\\n                return (true, (vaddr & uint64vars[VADDR_MASK]) | (ppn & ~uint64vars[VADDR_MASK]));\\n            }else {\\n                uint64vars[PTE_ADDR] = ppn;\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function readRamUint64(MemoryInteractor mi, uint64 paddr)\\n    internal returns (bool, uint64)\\n    {\\n        uint64 pmaStart = PMA.findPmaEntry(mi, paddr);\\n        if (!PMA.pmaGetIstartM(pmaStart) || !PMA.pmaGetIstartR(pmaStart)) {\\n            return (false, 0);\\n        }\\n        return (true, mi.readMemory(paddr, 64));\\n    }\\n\\n    function writeRamUint64(\\n        MemoryInteractor mi,\\n        uint64 paddr,\\n        uint64 val\\n    )\\n    internal returns (bool)\\n    {\\n        uint64 pmaStart = PMA.findPmaEntry(mi, paddr);\\n        if (!PMA.pmaGetIstartM(pmaStart) || !PMA.pmaGetIstartW(pmaStart)) {\\n            return false;\\n        }\\n        mi.writeMemory(\\n            paddr,\\n            val,\\n            64\\n        );\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf31e6be1dd768fec368c09b3f47fa44c58ad237255ef8cb6bae8dbc770d68e6f\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}