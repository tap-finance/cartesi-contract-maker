{
  "contractName": "ArithmeticInstructions",
  "sourceName": "contracts/RiscVInstructions/ArithmeticInstructions.sol",
  "abi": [],
  "bytecode": "0x6116ac610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101e45760003560e01c80638f90ddc61161010e578063b5e9a8d1116100ac578063e7d68d091161007b578063e7d68d091461088e578063e81b5455146108cd578063f0532fb01461090c578063f6353c071461094b576101e4565b8063b5e9a8d114610792578063cf36dfc7146107d1578063d2ab5fcc14610810578063d8f22f081461084f576101e4565b8063a8e48f10116100e8578063a8e48f1014610696578063ab1136ea146106d5578063ac4e71bd14610714578063b4adc2e914610753576101e4565b80638f90ddc6146105d9578063a21e348314610618578063a5c7d34914610657576101e4565b8063380755bd1161018657806372a68bef1161015557806372a68bef146104ba57806372df41b4146104f9578063746c335b1461055b5780637c14b3371461059a576101e4565b8063380755bd146103be578063598f6362146103fd5780635ba153581461043c578063646651ac1461047b576101e4565b806317909e17116101c257806317909e17146102c25780631b2592451461030157806327f5c9d9146103405780632e099fd01461037f576101e4565b8063065060bf146101e957806310fb43301461024457806314808e8914610283575b600080fd5b8180156101f557600080fd5b506102286004803603604081101561020c57600080fd5b5080356001600160a01b0316906020013563ffffffff1661098a565b604080516001600160401b039092168252519081900360200190f35b81801561025057600080fd5b506102286004803603604081101561026757600080fd5b5080356001600160a01b0316906020013563ffffffff166109b5565b81801561028f57600080fd5b50610228600480360360408110156102a657600080fd5b5080356001600160a01b0316906020013563ffffffff16610a07565b8180156102ce57600080fd5b50610228600480360360408110156102e557600080fd5b5080356001600160a01b0316906020013563ffffffff16610a2e565b81801561030d57600080fd5b506102286004803603604081101561032457600080fd5b5080356001600160a01b0316906020013563ffffffff16610aa7565b81801561034c57600080fd5b506102286004803603604081101561036357600080fd5b5080356001600160a01b0316906020013563ffffffff16610ad5565b81801561038b57600080fd5b50610228600480360360408110156103a257600080fd5b5080356001600160a01b0316906020013563ffffffff16610b17565b8180156103ca57600080fd5b50610228600480360360408110156103e157600080fd5b5080356001600160a01b0316906020013563ffffffff16610b3e565b81801561040957600080fd5b506102286004803603604081101561042057600080fd5b5080356001600160a01b0316906020013563ffffffff16610b5b565b81801561044857600080fd5b506102286004803603604081101561045f57600080fd5b5080356001600160a01b0316906020013563ffffffff16610bd5565b81801561048757600080fd5b506102286004803603604081101561049e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610bff565b8180156104c657600080fd5b50610228600480360360408110156104dd57600080fd5b5080356001600160a01b0316906020013563ffffffff16610c2b565b81801561050557600080fd5b506105386004803603604081101561051c57600080fd5b5080356001600160a01b0316906020013563ffffffff16610c47565b604080516001600160401b03909316835290151560208301528051918290030190f35b81801561056757600080fd5b506102286004803603604081101561057e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610e3f565b8180156105a657600080fd5b50610228600480360360408110156105bd57600080fd5b5080356001600160a01b0316906020013563ffffffff16610e92565b8180156105e557600080fd5b50610228600480360360408110156105fc57600080fd5b5080356001600160a01b0316906020013563ffffffff16610eac565b81801561062457600080fd5b506102286004803603604081101561063b57600080fd5b5080356001600160a01b0316906020013563ffffffff16610ed2565b81801561066357600080fd5b506102286004803603604081101561067a57600080fd5b5080356001600160a01b0316906020013563ffffffff16610eee565b8180156106a257600080fd5b50610228600480360360408110156106b957600080fd5b5080356001600160a01b0316906020013563ffffffff16610f07565b8180156106e157600080fd5b50610228600480360360408110156106f857600080fd5b5080356001600160a01b0316906020013563ffffffff16610f7f565b81801561072057600080fd5b506102286004803603604081101561073757600080fd5b5080356001600160a01b0316906020013563ffffffff16610f98565b81801561075f57600080fd5b506102286004803603604081101561077657600080fd5b5080356001600160a01b0316906020013563ffffffff16610fc2565b81801561079e57600080fd5b50610228600480360360408110156107b557600080fd5b5080356001600160a01b0316906020013563ffffffff16610fdb565b8180156107dd57600080fd5b50610228600480360360408110156107f457600080fd5b5080356001600160a01b0316906020013563ffffffff16611052565b81801561081c57600080fd5b506102286004803603604081101561083357600080fd5b5080356001600160a01b0316906020013563ffffffff166110a5565b81801561085b57600080fd5b506105386004803603604081101561087257600080fd5b5080356001600160a01b0316906020013563ffffffff166110fb565b81801561089a57600080fd5b50610228600480360360408110156108b157600080fd5b5080356001600160a01b0316906020013563ffffffff166113e0565b8180156108d957600080fd5b50610228600480360360408110156108f057600080fd5b5080356001600160a01b0316906020013563ffffffff1661140a565b81801561091857600080fd5b506102286004803603604081101561092f57600080fd5b5080356001600160a01b0316906020013563ffffffff16611423565b81801561095757600080fd5b506102286004803603604081101561096e57600080fd5b5080356001600160a01b0316906020013563ffffffff16611447565b60008060006109998585611460565b63ffffffff909116601f9091161c60030b925050505b92915050565b60008060006109c48585611460565b91509150806001600160401b0316600014156109e2575090506109af565b806001600160401b0316826001600160401b0316816109fd57fe5b06925050506109af565b6000806000610a168585611460565b600791820b910b02600f0b60401d9250505092915050565b6000806000610a3d8585611460565b90925090508181600381900b610a5b575060030b92506109af915050565b600382900b637fffffff19148015610a7757508060030b600019145b15610a895760009450505050506109af565b8060030b8260030b81610a9857fe5b0760030b9450505050506109af565b6000806000610ab68585611460565b6001600160401b031660079190910b02600f0b60401d95945050505050565b6000806000610ae48585611460565b91509150806001600160401b0316826001600160401b031610610b08576000610b0b565b60015b60ff1695945050505050565b6000806000610b268585611460565b915091508060070b8260070b12610b08576000610b0b565b6000806000610b4d8585611460565b900360030b95945050505050565b6000806000610b6a8585611460565b90925090508181600381900b610b88576000199450505050506109af565b600382900b637fffffff19148015610ba457508060030b600019145b15610bb7575060030b92506109af915050565b8060030b8260030b81610bc657fe5b0560030b9450505050506109af565b6000806000610be48585611460565b6001600160401b03909116603f9091161b9250505092915050565b6000806000610c0e8585611460565b6001600160401b03908116911602600f0b60401d95945050505050565b6000806000610c3a8585611460565b0260030b95945050505050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63c920257b856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610ca157600080fd5b505af4158015610cb5573d6000803e3d6000fd5b505050506040513d6020811015610ccb57600080fd5b5051905061028063ffffffff82161015610d8d5760208163ffffffff161015610d2d5763ffffffff8116610d0f57610d038585610ed2565b60019250925050610e38565b8063ffffffff1660011415610d2857610d038585610c2b565b610d88565b60208163ffffffff161115610d6f578063ffffffff1660801415610d5557610d038585610f98565b8063ffffffff166102011415610d2857610d038585610b5b565b8063ffffffff1660201415610d8857610d038585610b3e565b610e2f565b6102808163ffffffff161115610e15576103018163ffffffff161015610de1578063ffffffff166102811415610dc757610d038585611052565b8063ffffffff166102a01415610d2857610d038585610eac565b8063ffffffff166103811415610dfb57610d038585610e3f565b8063ffffffff166103011415610d8857610d038585610a2e565b8063ffffffff166102801415610e2f57610d03858561098a565b60008092509250505b9250929050565b6000806000610e4e8585611460565b9092509050818163ffffffff8116610e6e575060030b92506109af915050565b8063ffffffff168263ffffffff1681610e8357fe5b0660030b9450505050506109af565b6000806000610ea18585611460565b900395945050505050565b6000806000610ebb8585611460565b600391820b601f9091161d900b9250505092915050565b6000806000610ee18585611460565b0160030b95945050505050565b6000806000610efd8585611460565b1795945050505050565b6000806000610f168585611460565b90925090508181600781900b610f34576000199450505050506109af565b600782900b677fffffffffffffff19148015610f5457508060070b600019145b15610f64575092506109af915050565b8060070b8260070b81610f7357fe5b059450505050506109af565b6000806000610f8e8585611460565b0295945050505050565b6000806000610fa78585611460565b63ffffffff909116601f9091161b60030b9250505092915050565b6000806000610fd18585611460565b1695945050505050565b6000806000610fea8585611460565b90925090508181600781900b611005575092506109af915050565b600782900b677fffffffffffffff1914801561102557508060070b600019145b156110375760009450505050506109af565b8060070b8260070b8161104657fe5b079450505050506109af565b60008060006110618585611460565b9092509050818163ffffffff8116611081576000199450505050506109af565b8063ffffffff168263ffffffff168161109657fe5b0460030b9450505050506109af565b60008060006110b48585611460565b91509150806001600160401b0316600014156110d657600019925050506109af565b806001600160401b0316826001600160401b0316816110f157fe5b04925050506109af565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63c920257b856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561115557600080fd5b505af4158015611169573d6000803e3d6000fd5b505050506040513d602081101561117f57600080fd5b5051905061018163ffffffff8216101561128c5760818163ffffffff1610156112165760208163ffffffff1610156111e45763ffffffff81166111c657610d038585611447565b8063ffffffff16600114156111df57610d038585610f7f565b610d28565b8063ffffffff16608014156111fd57610d038585610bd5565b8063ffffffff1660201415610d2857610d038585610e92565b60818163ffffffff161115611273578063ffffffff16610100141561123f57610d038585610b17565b8063ffffffff16610180141561125957610d038585610ad5565b8063ffffffff166101011415610d2857610d038585610aa7565b8063ffffffff1660811415610d8857610d038585610a07565b6101818163ffffffff1611156113c6576102a08163ffffffff161015611324578063ffffffff1661020014156112c657610d03858561140a565b6102018163ffffffff16111561130a578063ffffffff1661028014156112f057610d0385856113e0565b8063ffffffff1661028114156111df57610d0385856110a5565b8063ffffffff166102011415610d2857610d038585610f07565b6102a08163ffffffff1611156113ac576103808163ffffffff161015611378578063ffffffff16610300141561135e57610d038585610eee565b8063ffffffff1661030114156111df57610d038585610fdb565b8063ffffffff16610381141561139257610d0385856109b5565b8063ffffffff166103801415610d2857610d038585610fc2565b8063ffffffff166102a01415610d8857610d038585611423565b8063ffffffff166101811415610e2f57610d038585610bff565b60008060006113ef8585611460565b6001600160401b03909116603f9091161c9250505092915050565b60008060006114198585611460565b1895945050505050565b60008060006114328585611460565b60079190910b603f9091161d95945050505050565b60008060006114568585611460565b0195945050505050565b600080836001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf866040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b1580156114c757600080fd5b505af41580156114db573d6000803e3d6000fd5b505050506040513d60208110156114f157600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b15801561153757600080fd5b505af115801561154b573d6000803e3d6000fd5b505050506040513d602081101561156157600080fd5b5051604080516377edfa4d60e11b815263ffffffff8616600482015290519193506001600160a01b03861691636232e59c9173__$1ab68dcaeb0d61096d66d8aa9a04b20861$__9163efdbf49a91602480820192602092909190829003018186803b1580156115cf57600080fd5b505af41580156115e3573d6000803e3d6000fd5b505050506040513d60208110156115f957600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b15801561163f57600080fd5b505af1158015611653573d6000803e3d6000fd5b505050506040513d602081101561166957600080fd5b505191949193509091505056fea2646970667358221220c7b35f5c612ddc8086bb3d53bc1fc0dbbdfef05daf6787c994ca1641b7c650c964736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101e45760003560e01c80638f90ddc61161010e578063b5e9a8d1116100ac578063e7d68d091161007b578063e7d68d091461088e578063e81b5455146108cd578063f0532fb01461090c578063f6353c071461094b576101e4565b8063b5e9a8d114610792578063cf36dfc7146107d1578063d2ab5fcc14610810578063d8f22f081461084f576101e4565b8063a8e48f10116100e8578063a8e48f1014610696578063ab1136ea146106d5578063ac4e71bd14610714578063b4adc2e914610753576101e4565b80638f90ddc6146105d9578063a21e348314610618578063a5c7d34914610657576101e4565b8063380755bd1161018657806372a68bef1161015557806372a68bef146104ba57806372df41b4146104f9578063746c335b1461055b5780637c14b3371461059a576101e4565b8063380755bd146103be578063598f6362146103fd5780635ba153581461043c578063646651ac1461047b576101e4565b806317909e17116101c257806317909e17146102c25780631b2592451461030157806327f5c9d9146103405780632e099fd01461037f576101e4565b8063065060bf146101e957806310fb43301461024457806314808e8914610283575b600080fd5b8180156101f557600080fd5b506102286004803603604081101561020c57600080fd5b5080356001600160a01b0316906020013563ffffffff1661098a565b604080516001600160401b039092168252519081900360200190f35b81801561025057600080fd5b506102286004803603604081101561026757600080fd5b5080356001600160a01b0316906020013563ffffffff166109b5565b81801561028f57600080fd5b50610228600480360360408110156102a657600080fd5b5080356001600160a01b0316906020013563ffffffff16610a07565b8180156102ce57600080fd5b50610228600480360360408110156102e557600080fd5b5080356001600160a01b0316906020013563ffffffff16610a2e565b81801561030d57600080fd5b506102286004803603604081101561032457600080fd5b5080356001600160a01b0316906020013563ffffffff16610aa7565b81801561034c57600080fd5b506102286004803603604081101561036357600080fd5b5080356001600160a01b0316906020013563ffffffff16610ad5565b81801561038b57600080fd5b50610228600480360360408110156103a257600080fd5b5080356001600160a01b0316906020013563ffffffff16610b17565b8180156103ca57600080fd5b50610228600480360360408110156103e157600080fd5b5080356001600160a01b0316906020013563ffffffff16610b3e565b81801561040957600080fd5b506102286004803603604081101561042057600080fd5b5080356001600160a01b0316906020013563ffffffff16610b5b565b81801561044857600080fd5b506102286004803603604081101561045f57600080fd5b5080356001600160a01b0316906020013563ffffffff16610bd5565b81801561048757600080fd5b506102286004803603604081101561049e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610bff565b8180156104c657600080fd5b50610228600480360360408110156104dd57600080fd5b5080356001600160a01b0316906020013563ffffffff16610c2b565b81801561050557600080fd5b506105386004803603604081101561051c57600080fd5b5080356001600160a01b0316906020013563ffffffff16610c47565b604080516001600160401b03909316835290151560208301528051918290030190f35b81801561056757600080fd5b506102286004803603604081101561057e57600080fd5b5080356001600160a01b0316906020013563ffffffff16610e3f565b8180156105a657600080fd5b50610228600480360360408110156105bd57600080fd5b5080356001600160a01b0316906020013563ffffffff16610e92565b8180156105e557600080fd5b50610228600480360360408110156105fc57600080fd5b5080356001600160a01b0316906020013563ffffffff16610eac565b81801561062457600080fd5b506102286004803603604081101561063b57600080fd5b5080356001600160a01b0316906020013563ffffffff16610ed2565b81801561066357600080fd5b506102286004803603604081101561067a57600080fd5b5080356001600160a01b0316906020013563ffffffff16610eee565b8180156106a257600080fd5b50610228600480360360408110156106b957600080fd5b5080356001600160a01b0316906020013563ffffffff16610f07565b8180156106e157600080fd5b50610228600480360360408110156106f857600080fd5b5080356001600160a01b0316906020013563ffffffff16610f7f565b81801561072057600080fd5b506102286004803603604081101561073757600080fd5b5080356001600160a01b0316906020013563ffffffff16610f98565b81801561075f57600080fd5b506102286004803603604081101561077657600080fd5b5080356001600160a01b0316906020013563ffffffff16610fc2565b81801561079e57600080fd5b50610228600480360360408110156107b557600080fd5b5080356001600160a01b0316906020013563ffffffff16610fdb565b8180156107dd57600080fd5b50610228600480360360408110156107f457600080fd5b5080356001600160a01b0316906020013563ffffffff16611052565b81801561081c57600080fd5b506102286004803603604081101561083357600080fd5b5080356001600160a01b0316906020013563ffffffff166110a5565b81801561085b57600080fd5b506105386004803603604081101561087257600080fd5b5080356001600160a01b0316906020013563ffffffff166110fb565b81801561089a57600080fd5b50610228600480360360408110156108b157600080fd5b5080356001600160a01b0316906020013563ffffffff166113e0565b8180156108d957600080fd5b50610228600480360360408110156108f057600080fd5b5080356001600160a01b0316906020013563ffffffff1661140a565b81801561091857600080fd5b506102286004803603604081101561092f57600080fd5b5080356001600160a01b0316906020013563ffffffff16611423565b81801561095757600080fd5b506102286004803603604081101561096e57600080fd5b5080356001600160a01b0316906020013563ffffffff16611447565b60008060006109998585611460565b63ffffffff909116601f9091161c60030b925050505b92915050565b60008060006109c48585611460565b91509150806001600160401b0316600014156109e2575090506109af565b806001600160401b0316826001600160401b0316816109fd57fe5b06925050506109af565b6000806000610a168585611460565b600791820b910b02600f0b60401d9250505092915050565b6000806000610a3d8585611460565b90925090508181600381900b610a5b575060030b92506109af915050565b600382900b637fffffff19148015610a7757508060030b600019145b15610a895760009450505050506109af565b8060030b8260030b81610a9857fe5b0760030b9450505050506109af565b6000806000610ab68585611460565b6001600160401b031660079190910b02600f0b60401d95945050505050565b6000806000610ae48585611460565b91509150806001600160401b0316826001600160401b031610610b08576000610b0b565b60015b60ff1695945050505050565b6000806000610b268585611460565b915091508060070b8260070b12610b08576000610b0b565b6000806000610b4d8585611460565b900360030b95945050505050565b6000806000610b6a8585611460565b90925090508181600381900b610b88576000199450505050506109af565b600382900b637fffffff19148015610ba457508060030b600019145b15610bb7575060030b92506109af915050565b8060030b8260030b81610bc657fe5b0560030b9450505050506109af565b6000806000610be48585611460565b6001600160401b03909116603f9091161b9250505092915050565b6000806000610c0e8585611460565b6001600160401b03908116911602600f0b60401d95945050505050565b6000806000610c3a8585611460565b0260030b95945050505050565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63c920257b856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610ca157600080fd5b505af4158015610cb5573d6000803e3d6000fd5b505050506040513d6020811015610ccb57600080fd5b5051905061028063ffffffff82161015610d8d5760208163ffffffff161015610d2d5763ffffffff8116610d0f57610d038585610ed2565b60019250925050610e38565b8063ffffffff1660011415610d2857610d038585610c2b565b610d88565b60208163ffffffff161115610d6f578063ffffffff1660801415610d5557610d038585610f98565b8063ffffffff166102011415610d2857610d038585610b5b565b8063ffffffff1660201415610d8857610d038585610b3e565b610e2f565b6102808163ffffffff161115610e15576103018163ffffffff161015610de1578063ffffffff166102811415610dc757610d038585611052565b8063ffffffff166102a01415610d2857610d038585610eac565b8063ffffffff166103811415610dfb57610d038585610e3f565b8063ffffffff166103011415610d8857610d038585610a2e565b8063ffffffff166102801415610e2f57610d03858561098a565b60008092509250505b9250929050565b6000806000610e4e8585611460565b9092509050818163ffffffff8116610e6e575060030b92506109af915050565b8063ffffffff168263ffffffff1681610e8357fe5b0660030b9450505050506109af565b6000806000610ea18585611460565b900395945050505050565b6000806000610ebb8585611460565b600391820b601f9091161d900b9250505092915050565b6000806000610ee18585611460565b0160030b95945050505050565b6000806000610efd8585611460565b1795945050505050565b6000806000610f168585611460565b90925090508181600781900b610f34576000199450505050506109af565b600782900b677fffffffffffffff19148015610f5457508060070b600019145b15610f64575092506109af915050565b8060070b8260070b81610f7357fe5b059450505050506109af565b6000806000610f8e8585611460565b0295945050505050565b6000806000610fa78585611460565b63ffffffff909116601f9091161b60030b9250505092915050565b6000806000610fd18585611460565b1695945050505050565b6000806000610fea8585611460565b90925090508181600781900b611005575092506109af915050565b600782900b677fffffffffffffff1914801561102557508060070b600019145b156110375760009450505050506109af565b8060070b8260070b8161104657fe5b079450505050506109af565b60008060006110618585611460565b9092509050818163ffffffff8116611081576000199450505050506109af565b8063ffffffff168263ffffffff168161109657fe5b0460030b9450505050506109af565b60008060006110b48585611460565b91509150806001600160401b0316600014156110d657600019925050506109af565b806001600160401b0316826001600160401b0316816110f157fe5b04925050506109af565b600080600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63c920257b856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561115557600080fd5b505af4158015611169573d6000803e3d6000fd5b505050506040513d602081101561117f57600080fd5b5051905061018163ffffffff8216101561128c5760818163ffffffff1610156112165760208163ffffffff1610156111e45763ffffffff81166111c657610d038585611447565b8063ffffffff16600114156111df57610d038585610f7f565b610d28565b8063ffffffff16608014156111fd57610d038585610bd5565b8063ffffffff1660201415610d2857610d038585610e92565b60818163ffffffff161115611273578063ffffffff16610100141561123f57610d038585610b17565b8063ffffffff16610180141561125957610d038585610ad5565b8063ffffffff166101011415610d2857610d038585610aa7565b8063ffffffff1660811415610d8857610d038585610a07565b6101818163ffffffff1611156113c6576102a08163ffffffff161015611324578063ffffffff1661020014156112c657610d03858561140a565b6102018163ffffffff16111561130a578063ffffffff1661028014156112f057610d0385856113e0565b8063ffffffff1661028114156111df57610d0385856110a5565b8063ffffffff166102011415610d2857610d038585610f07565b6102a08163ffffffff1611156113ac576103808163ffffffff161015611378578063ffffffff16610300141561135e57610d038585610eee565b8063ffffffff1661030114156111df57610d038585610fdb565b8063ffffffff16610381141561139257610d0385856109b5565b8063ffffffff166103801415610d2857610d038585610fc2565b8063ffffffff166102a01415610d8857610d038585611423565b8063ffffffff166101811415610e2f57610d038585610bff565b60008060006113ef8585611460565b6001600160401b03909116603f9091161c9250505092915050565b60008060006114198585611460565b1895945050505050565b60008060006114328585611460565b60079190910b603f9091161d95945050505050565b60008060006114568585611460565b0195945050505050565b600080836001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf866040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b1580156114c757600080fd5b505af41580156114db573d6000803e3d6000fd5b505050506040513d60208110156114f157600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b15801561153757600080fd5b505af115801561154b573d6000803e3d6000fd5b505050506040513d602081101561156157600080fd5b5051604080516377edfa4d60e11b815263ffffffff8616600482015290519193506001600160a01b03861691636232e59c9173__$1ab68dcaeb0d61096d66d8aa9a04b20861$__9163efdbf49a91602480820192602092909190829003018186803b1580156115cf57600080fd5b505af41580156115e3573d6000803e3d6000fd5b505050506040513d60208110156115f957600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b15801561163f57600080fd5b505af1158015611653573d6000803e3d6000fd5b505050506040513d602081101561166957600080fd5b505191949193509091505056fea2646970667358221220c7b35f5c612ddc8086bb3d53bc1fc0dbbdfef05daf6787c994ca1641b7c650c964736f6c63430007040033",
  "linkReferences": {
    "contracts/RiscVDecoder.sol": {
      "RiscVDecoder": [
        {
          "length": 20,
          "start": 3188
        },
        {
          "length": 20,
          "start": 4392
        },
        {
          "length": 20,
          "start": 5274
        },
        {
          "length": 20,
          "start": 5563
        }
      ]
    }
  },
  "deployedLinkReferences": {
    "contracts/RiscVDecoder.sol": {
      "RiscVDecoder": [
        {
          "length": 20,
          "start": 3150
        },
        {
          "length": 20,
          "start": 4354
        },
        {
          "length": 20,
          "start": 5236
        },
        {
          "length": 20,
          "start": 5525
        }
      ]
    }
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {
        "contracts/RiscVDecoder.sol": {
          "RiscVDecoder": [
            {
              "length": 20,
              "start": 3188
            },
            {
              "length": 20,
              "start": 4392
            },
            {
              "length": 20,
              "start": 5274
            },
            {
              "length": 20,
              "start": 5563
            }
          ]
        }
      },
      "opcodes": "PUSH2 0x16AC PUSH2 0x26 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x19 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F90DDC6 GT PUSH2 0x10E JUMPI DUP1 PUSH4 0xB5E9A8D1 GT PUSH2 0xAC JUMPI DUP1 PUSH4 0xE7D68D09 GT PUSH2 0x7B JUMPI DUP1 PUSH4 0xE7D68D09 EQ PUSH2 0x88E JUMPI DUP1 PUSH4 0xE81B5455 EQ PUSH2 0x8CD JUMPI DUP1 PUSH4 0xF0532FB0 EQ PUSH2 0x90C JUMPI DUP1 PUSH4 0xF6353C07 EQ PUSH2 0x94B JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0xB5E9A8D1 EQ PUSH2 0x792 JUMPI DUP1 PUSH4 0xCF36DFC7 EQ PUSH2 0x7D1 JUMPI DUP1 PUSH4 0xD2AB5FCC EQ PUSH2 0x810 JUMPI DUP1 PUSH4 0xD8F22F08 EQ PUSH2 0x84F JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0xA8E48F10 GT PUSH2 0xE8 JUMPI DUP1 PUSH4 0xA8E48F10 EQ PUSH2 0x696 JUMPI DUP1 PUSH4 0xAB1136EA EQ PUSH2 0x6D5 JUMPI DUP1 PUSH4 0xAC4E71BD EQ PUSH2 0x714 JUMPI DUP1 PUSH4 0xB4ADC2E9 EQ PUSH2 0x753 JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x8F90DDC6 EQ PUSH2 0x5D9 JUMPI DUP1 PUSH4 0xA21E3483 EQ PUSH2 0x618 JUMPI DUP1 PUSH4 0xA5C7D349 EQ PUSH2 0x657 JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x380755BD GT PUSH2 0x186 JUMPI DUP1 PUSH4 0x72A68BEF GT PUSH2 0x155 JUMPI DUP1 PUSH4 0x72A68BEF EQ PUSH2 0x4BA JUMPI DUP1 PUSH4 0x72DF41B4 EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x746C335B EQ PUSH2 0x55B JUMPI DUP1 PUSH4 0x7C14B337 EQ PUSH2 0x59A JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x380755BD EQ PUSH2 0x3BE JUMPI DUP1 PUSH4 0x598F6362 EQ PUSH2 0x3FD JUMPI DUP1 PUSH4 0x5BA15358 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x646651AC EQ PUSH2 0x47B JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x17909E17 GT PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x17909E17 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x1B259245 EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x27F5C9D9 EQ PUSH2 0x340 JUMPI DUP1 PUSH4 0x2E099FD0 EQ PUSH2 0x37F JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x65060BF EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0x10FB4330 EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0x14808E89 EQ PUSH2 0x283 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x98A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9B5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xA07 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xA2E JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xAA7 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x34C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xAD5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB17 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB3E JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB5B JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xBD5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xBFF JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xC2B JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x538 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xC47 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x567 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xE3F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xE92 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xEAC JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x624 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x63B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xED2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x663 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x67A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xEEE JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x6A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF07 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF7F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x737 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF98 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x75F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x776 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xFC2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x7B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xFDB JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x7DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1052 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x10A5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x85B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x538 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x10FB JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x89A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x13E0 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x8D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x140A JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x92F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1423 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x957 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x96E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1447 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x999 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x1F SWAP1 SWAP2 AND SHR PUSH1 0x3 SIGNEXTEND SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9C4 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x0 EQ ISZERO PUSH2 0x9E2 JUMPI POP SWAP1 POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 PUSH2 0x9FD JUMPI INVALID JUMPDEST MOD SWAP3 POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA16 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x7 SWAP2 DUP3 SIGNEXTEND SWAP2 SIGNEXTEND MUL PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA3D DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH1 0x3 DUP2 SWAP1 SIGNEXTEND PUSH2 0xA5B JUMPI POP PUSH1 0x3 SIGNEXTEND SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 DUP3 SWAP1 SIGNEXTEND PUSH4 0x7FFFFFFF NOT EQ DUP1 ISZERO PUSH2 0xA77 JUMPI POP DUP1 PUSH1 0x3 SIGNEXTEND PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0xA89 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH1 0x3 SIGNEXTEND DUP3 PUSH1 0x3 SIGNEXTEND DUP2 PUSH2 0xA98 JUMPI INVALID JUMPDEST SMOD PUSH1 0x3 SIGNEXTEND SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xAB6 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x7 SWAP2 SWAP1 SWAP2 SIGNEXTEND MUL PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xAE4 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT PUSH2 0xB08 JUMPI PUSH1 0x0 PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB26 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x7 SIGNEXTEND DUP3 PUSH1 0x7 SIGNEXTEND SLT PUSH2 0xB08 JUMPI PUSH1 0x0 PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB4D DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SUB PUSH1 0x3 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB6A DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH1 0x3 DUP2 SWAP1 SIGNEXTEND PUSH2 0xB88 JUMPI PUSH1 0x0 NOT SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x3 DUP3 SWAP1 SIGNEXTEND PUSH4 0x7FFFFFFF NOT EQ DUP1 ISZERO PUSH2 0xBA4 JUMPI POP DUP1 PUSH1 0x3 SIGNEXTEND PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0xBB7 JUMPI POP PUSH1 0x3 SIGNEXTEND SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x3 SIGNEXTEND DUP3 PUSH1 0x3 SIGNEXTEND DUP2 PUSH2 0xBC6 JUMPI INVALID JUMPDEST SDIV PUSH1 0x3 SIGNEXTEND SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xBE4 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0x3F SWAP1 SWAP2 AND SHL SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC0E DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND SWAP2 AND MUL PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC3A DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST MUL PUSH1 0x3 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0xC920257B DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xCB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x280 PUSH4 0xFFFFFFFF DUP3 AND LT ISZERO PUSH2 0xD8D JUMPI PUSH1 0x20 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0xD2D JUMPI PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0xD0F JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xED2 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0xE38 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xC2B JUMP JUMPDEST PUSH2 0xD88 JUMP JUMPDEST PUSH1 0x20 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0xD6F JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x80 EQ ISZERO PUSH2 0xD55 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xF98 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x201 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xB5B JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x20 EQ ISZERO PUSH2 0xD88 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xB3E JUMP JUMPDEST PUSH2 0xE2F JUMP JUMPDEST PUSH2 0x280 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0xE15 JUMPI PUSH2 0x301 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0xDE1 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x281 EQ ISZERO PUSH2 0xDC7 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x1052 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x2A0 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xEAC JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x381 EQ ISZERO PUSH2 0xDFB JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xE3F JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x301 EQ ISZERO PUSH2 0xD88 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xA2E JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x280 EQ ISZERO PUSH2 0xE2F JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x98A JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xE4E DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0xE6E JUMPI POP PUSH1 0x3 SIGNEXTEND SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND DUP3 PUSH4 0xFFFFFFFF AND DUP2 PUSH2 0xE83 JUMPI INVALID JUMPDEST MOD PUSH1 0x3 SIGNEXTEND SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SUB SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xEBB DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x3 SWAP2 DUP3 SIGNEXTEND PUSH1 0x1F SWAP1 SWAP2 AND SAR SWAP1 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xEE1 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST ADD PUSH1 0x3 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xEFD DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST OR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF16 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH1 0x7 DUP2 SWAP1 SIGNEXTEND PUSH2 0xF34 JUMPI PUSH1 0x0 NOT SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x7 DUP3 SWAP1 SIGNEXTEND PUSH8 0x7FFFFFFFFFFFFFFF NOT EQ DUP1 ISZERO PUSH2 0xF54 JUMPI POP DUP1 PUSH1 0x7 SIGNEXTEND PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0xF64 JUMPI POP SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x7 SIGNEXTEND DUP3 PUSH1 0x7 SIGNEXTEND DUP2 PUSH2 0xF73 JUMPI INVALID JUMPDEST SDIV SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF8E DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST MUL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFA7 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x1F SWAP1 SWAP2 AND SHL PUSH1 0x3 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFD1 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFEA DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH1 0x7 DUP2 SWAP1 SIGNEXTEND PUSH2 0x1005 JUMPI POP SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 DUP3 SWAP1 SIGNEXTEND PUSH8 0x7FFFFFFFFFFFFFFF NOT EQ DUP1 ISZERO PUSH2 0x1025 JUMPI POP DUP1 PUSH1 0x7 SIGNEXTEND PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0x1037 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH1 0x7 SIGNEXTEND DUP3 PUSH1 0x7 SIGNEXTEND DUP2 PUSH2 0x1046 JUMPI INVALID JUMPDEST SMOD SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1061 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x1081 JUMPI PUSH1 0x0 NOT SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND DUP3 PUSH4 0xFFFFFFFF AND DUP2 PUSH2 0x1096 JUMPI INVALID JUMPDEST DIV PUSH1 0x3 SIGNEXTEND SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x10B4 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x0 EQ ISZERO PUSH2 0x10D6 JUMPI PUSH1 0x0 NOT SWAP3 POP POP POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 PUSH2 0x10F1 JUMPI INVALID JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0xC920257B DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1169 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x117F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x181 PUSH4 0xFFFFFFFF DUP3 AND LT ISZERO PUSH2 0x128C JUMPI PUSH1 0x81 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x1216 JUMPI PUSH1 0x20 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x11E4 JUMPI PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x11C6 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x1447 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0x11DF JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xF7F JUMP JUMPDEST PUSH2 0xD28 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x80 EQ ISZERO PUSH2 0x11FD JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xBD5 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x20 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x81 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x1273 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x100 EQ ISZERO PUSH2 0x123F JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xB17 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x180 EQ ISZERO PUSH2 0x1259 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xAD5 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x101 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xAA7 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x81 EQ ISZERO PUSH2 0xD88 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xA07 JUMP JUMPDEST PUSH2 0x181 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x13C6 JUMPI PUSH2 0x2A0 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x1324 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x200 EQ ISZERO PUSH2 0x12C6 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x140A JUMP JUMPDEST PUSH2 0x201 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x130A JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x280 EQ ISZERO PUSH2 0x12F0 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x13E0 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x281 EQ ISZERO PUSH2 0x11DF JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x10A5 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x201 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xF07 JUMP JUMPDEST PUSH2 0x2A0 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x13AC JUMPI PUSH2 0x380 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x1378 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x300 EQ ISZERO PUSH2 0x135E JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xEEE JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x301 EQ ISZERO PUSH2 0x11DF JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xFDB JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x381 EQ ISZERO PUSH2 0x1392 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x9B5 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x380 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xFC2 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x2A0 EQ ISZERO PUSH2 0xD88 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x1423 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x181 EQ ISZERO PUSH2 0xE2F JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xBFF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x13EF DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0x3F SWAP1 SWAP2 AND SHR SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1419 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST XOR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1432 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x7 SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x3F SWAP1 SWAP2 AND SAR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1456 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x154B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x77EDFA4D PUSH1 0xE1 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH4 0x6232E59C SWAP2 PUSH20 0x0 SWAP2 PUSH4 0xEFDBF49A SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x15E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x163F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1653 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xB3 0x5F 0x5C PUSH2 0x2DDC DUP1 DUP7 0xBB RETURNDATASIZE MSTORE8 0xBC 0x1F 0xC0 0xDB 0xBD INVALID CREATE 0x5D 0xAF PUSH8 0x87C994CA1641B7C6 POP 0xC9 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
      "sourceMap": "1265:14248:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {
        "contracts/RiscVDecoder.sol": {
          "RiscVDecoder": [
            {
              "length": 20,
              "start": 3150
            },
            {
              "length": 20,
              "start": 4354
            },
            {
              "length": 20,
              "start": 5236
            },
            {
              "length": 20,
              "start": 5525
            }
          ]
        }
      },
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F90DDC6 GT PUSH2 0x10E JUMPI DUP1 PUSH4 0xB5E9A8D1 GT PUSH2 0xAC JUMPI DUP1 PUSH4 0xE7D68D09 GT PUSH2 0x7B JUMPI DUP1 PUSH4 0xE7D68D09 EQ PUSH2 0x88E JUMPI DUP1 PUSH4 0xE81B5455 EQ PUSH2 0x8CD JUMPI DUP1 PUSH4 0xF0532FB0 EQ PUSH2 0x90C JUMPI DUP1 PUSH4 0xF6353C07 EQ PUSH2 0x94B JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0xB5E9A8D1 EQ PUSH2 0x792 JUMPI DUP1 PUSH4 0xCF36DFC7 EQ PUSH2 0x7D1 JUMPI DUP1 PUSH4 0xD2AB5FCC EQ PUSH2 0x810 JUMPI DUP1 PUSH4 0xD8F22F08 EQ PUSH2 0x84F JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0xA8E48F10 GT PUSH2 0xE8 JUMPI DUP1 PUSH4 0xA8E48F10 EQ PUSH2 0x696 JUMPI DUP1 PUSH4 0xAB1136EA EQ PUSH2 0x6D5 JUMPI DUP1 PUSH4 0xAC4E71BD EQ PUSH2 0x714 JUMPI DUP1 PUSH4 0xB4ADC2E9 EQ PUSH2 0x753 JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x8F90DDC6 EQ PUSH2 0x5D9 JUMPI DUP1 PUSH4 0xA21E3483 EQ PUSH2 0x618 JUMPI DUP1 PUSH4 0xA5C7D349 EQ PUSH2 0x657 JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x380755BD GT PUSH2 0x186 JUMPI DUP1 PUSH4 0x72A68BEF GT PUSH2 0x155 JUMPI DUP1 PUSH4 0x72A68BEF EQ PUSH2 0x4BA JUMPI DUP1 PUSH4 0x72DF41B4 EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x746C335B EQ PUSH2 0x55B JUMPI DUP1 PUSH4 0x7C14B337 EQ PUSH2 0x59A JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x380755BD EQ PUSH2 0x3BE JUMPI DUP1 PUSH4 0x598F6362 EQ PUSH2 0x3FD JUMPI DUP1 PUSH4 0x5BA15358 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x646651AC EQ PUSH2 0x47B JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x17909E17 GT PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x17909E17 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x1B259245 EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x27F5C9D9 EQ PUSH2 0x340 JUMPI DUP1 PUSH4 0x2E099FD0 EQ PUSH2 0x37F JUMPI PUSH2 0x1E4 JUMP JUMPDEST DUP1 PUSH4 0x65060BF EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0x10FB4330 EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0x14808E89 EQ PUSH2 0x283 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x98A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x9B5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xA07 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xA2E JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xAA7 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x34C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xAD5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB17 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB3E JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB5B JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xBD5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xBFF JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xC2B JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x538 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xC47 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x567 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xE3F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xE92 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xEAC JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x624 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x63B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xED2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x663 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x67A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xEEE JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x6A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF07 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF7F JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x737 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xF98 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x75F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x776 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xFC2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x7B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0xFDB JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x7DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1052 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x10A5 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x85B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x538 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x10FB JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x89A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x13E0 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x8D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x140A JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x92F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1423 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x957 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x96E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1447 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x999 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x1F SWAP1 SWAP2 AND SHR PUSH1 0x3 SIGNEXTEND SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9C4 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x0 EQ ISZERO PUSH2 0x9E2 JUMPI POP SWAP1 POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 PUSH2 0x9FD JUMPI INVALID JUMPDEST MOD SWAP3 POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA16 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x7 SWAP2 DUP3 SIGNEXTEND SWAP2 SIGNEXTEND MUL PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA3D DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH1 0x3 DUP2 SWAP1 SIGNEXTEND PUSH2 0xA5B JUMPI POP PUSH1 0x3 SIGNEXTEND SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 DUP3 SWAP1 SIGNEXTEND PUSH4 0x7FFFFFFF NOT EQ DUP1 ISZERO PUSH2 0xA77 JUMPI POP DUP1 PUSH1 0x3 SIGNEXTEND PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0xA89 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH1 0x3 SIGNEXTEND DUP3 PUSH1 0x3 SIGNEXTEND DUP2 PUSH2 0xA98 JUMPI INVALID JUMPDEST SMOD PUSH1 0x3 SIGNEXTEND SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xAB6 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x7 SWAP2 SWAP1 SWAP2 SIGNEXTEND MUL PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xAE4 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT PUSH2 0xB08 JUMPI PUSH1 0x0 PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB26 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x7 SIGNEXTEND DUP3 PUSH1 0x7 SIGNEXTEND SLT PUSH2 0xB08 JUMPI PUSH1 0x0 PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB4D DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SUB PUSH1 0x3 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB6A DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH1 0x3 DUP2 SWAP1 SIGNEXTEND PUSH2 0xB88 JUMPI PUSH1 0x0 NOT SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x3 DUP3 SWAP1 SIGNEXTEND PUSH4 0x7FFFFFFF NOT EQ DUP1 ISZERO PUSH2 0xBA4 JUMPI POP DUP1 PUSH1 0x3 SIGNEXTEND PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0xBB7 JUMPI POP PUSH1 0x3 SIGNEXTEND SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x3 SIGNEXTEND DUP3 PUSH1 0x3 SIGNEXTEND DUP2 PUSH2 0xBC6 JUMPI INVALID JUMPDEST SDIV PUSH1 0x3 SIGNEXTEND SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xBE4 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0x3F SWAP1 SWAP2 AND SHL SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC0E DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND SWAP2 AND MUL PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC3A DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST MUL PUSH1 0x3 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0xC920257B DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xCB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x280 PUSH4 0xFFFFFFFF DUP3 AND LT ISZERO PUSH2 0xD8D JUMPI PUSH1 0x20 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0xD2D JUMPI PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0xD0F JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xED2 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0xE38 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xC2B JUMP JUMPDEST PUSH2 0xD88 JUMP JUMPDEST PUSH1 0x20 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0xD6F JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x80 EQ ISZERO PUSH2 0xD55 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xF98 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x201 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xB5B JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x20 EQ ISZERO PUSH2 0xD88 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xB3E JUMP JUMPDEST PUSH2 0xE2F JUMP JUMPDEST PUSH2 0x280 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0xE15 JUMPI PUSH2 0x301 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0xDE1 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x281 EQ ISZERO PUSH2 0xDC7 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x1052 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x2A0 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xEAC JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x381 EQ ISZERO PUSH2 0xDFB JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xE3F JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x301 EQ ISZERO PUSH2 0xD88 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xA2E JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x280 EQ ISZERO PUSH2 0xE2F JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x98A JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xE4E DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0xE6E JUMPI POP PUSH1 0x3 SIGNEXTEND SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND DUP3 PUSH4 0xFFFFFFFF AND DUP2 PUSH2 0xE83 JUMPI INVALID JUMPDEST MOD PUSH1 0x3 SIGNEXTEND SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SUB SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xEBB DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x3 SWAP2 DUP3 SIGNEXTEND PUSH1 0x1F SWAP1 SWAP2 AND SAR SWAP1 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xEE1 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST ADD PUSH1 0x3 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xEFD DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST OR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF16 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH1 0x7 DUP2 SWAP1 SIGNEXTEND PUSH2 0xF34 JUMPI PUSH1 0x0 NOT SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x7 DUP3 SWAP1 SIGNEXTEND PUSH8 0x7FFFFFFFFFFFFFFF NOT EQ DUP1 ISZERO PUSH2 0xF54 JUMPI POP DUP1 PUSH1 0x7 SIGNEXTEND PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0xF64 JUMPI POP SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x7 SIGNEXTEND DUP3 PUSH1 0x7 SIGNEXTEND DUP2 PUSH2 0xF73 JUMPI INVALID JUMPDEST SDIV SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF8E DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST MUL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFA7 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x1F SWAP1 SWAP2 AND SHL PUSH1 0x3 SIGNEXTEND SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFD1 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFEA DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH1 0x7 DUP2 SWAP1 SIGNEXTEND PUSH2 0x1005 JUMPI POP SWAP3 POP PUSH2 0x9AF SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 DUP3 SWAP1 SIGNEXTEND PUSH8 0x7FFFFFFFFFFFFFFF NOT EQ DUP1 ISZERO PUSH2 0x1025 JUMPI POP DUP1 PUSH1 0x7 SIGNEXTEND PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0x1037 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH1 0x7 SIGNEXTEND DUP3 PUSH1 0x7 SIGNEXTEND DUP2 PUSH2 0x1046 JUMPI INVALID JUMPDEST SMOD SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1061 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP2 PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x1081 JUMPI PUSH1 0x0 NOT SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND DUP3 PUSH4 0xFFFFFFFF AND DUP2 PUSH2 0x1096 JUMPI INVALID JUMPDEST DIV PUSH1 0x3 SIGNEXTEND SWAP5 POP POP POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x10B4 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x0 EQ ISZERO PUSH2 0x10D6 JUMPI PUSH1 0x0 NOT SWAP3 POP POP POP PUSH2 0x9AF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 PUSH2 0x10F1 JUMPI INVALID JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0xC920257B DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1169 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x117F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x181 PUSH4 0xFFFFFFFF DUP3 AND LT ISZERO PUSH2 0x128C JUMPI PUSH1 0x81 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x1216 JUMPI PUSH1 0x20 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x11E4 JUMPI PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x11C6 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x1447 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0x11DF JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xF7F JUMP JUMPDEST PUSH2 0xD28 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x80 EQ ISZERO PUSH2 0x11FD JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xBD5 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x20 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x81 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x1273 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x100 EQ ISZERO PUSH2 0x123F JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xB17 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x180 EQ ISZERO PUSH2 0x1259 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xAD5 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x101 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xAA7 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x81 EQ ISZERO PUSH2 0xD88 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xA07 JUMP JUMPDEST PUSH2 0x181 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x13C6 JUMPI PUSH2 0x2A0 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x1324 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x200 EQ ISZERO PUSH2 0x12C6 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x140A JUMP JUMPDEST PUSH2 0x201 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x130A JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x280 EQ ISZERO PUSH2 0x12F0 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x13E0 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x281 EQ ISZERO PUSH2 0x11DF JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x10A5 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x201 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xF07 JUMP JUMPDEST PUSH2 0x2A0 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x13AC JUMPI PUSH2 0x380 DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x1378 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x300 EQ ISZERO PUSH2 0x135E JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xEEE JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x301 EQ ISZERO PUSH2 0x11DF JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xFDB JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x381 EQ ISZERO PUSH2 0x1392 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x9B5 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x380 EQ ISZERO PUSH2 0xD28 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xFC2 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x2A0 EQ ISZERO PUSH2 0xD88 JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0x1423 JUMP JUMPDEST DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x181 EQ ISZERO PUSH2 0xE2F JUMPI PUSH2 0xD03 DUP6 DUP6 PUSH2 0xBFF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x13EF DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0x3F SWAP1 SWAP2 AND SHR SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1419 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST XOR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1432 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST PUSH1 0x7 SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x3F SWAP1 SWAP2 AND SAR SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1456 DUP6 DUP6 PUSH2 0x1460 JUMP JUMPDEST ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6232E59C PUSH20 0x0 PUSH4 0x287B44BF DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x154B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x77EDFA4D PUSH1 0xE1 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH4 0x6232E59C SWAP2 PUSH20 0x0 SWAP2 PUSH4 0xEFDBF49A SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x15E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x163F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1653 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xB3 0x5F 0x5C PUSH2 0x2DDC DUP1 DUP7 0xBB RETURNDATASIZE MSTORE8 0xBC 0x1F 0xC0 0xDB 0xBD INVALID CREATE 0x5D 0xAF PUSH8 0x87C994CA1641B7C6 POP 0xC9 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
      "sourceMap": "1265:14248:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7131:228;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7131:228:16;;-1:-1:-1;;;;;7131:228:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;7131:228:16;;;;;;;;;;;;;;6102:248;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6102:248:16;;-1:-1:-1;;;;;6102:248:16;;;;;;;;:::i;4179:300::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4179:300:16;;-1:-1:-1;;;;;4179:300:16;;;;;;;;:::i;8631:432::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8631:432:16;;-1:-1:-1;;;;;8631:432:16;;;;;;;;:::i;4485:237::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4485:237:16;;-1:-1:-1;;;;;4485:237:16;;;;;;;;:::i;2577:207::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2577:207:16;;-1:-1:-1;;;;;2577:207:16;;;;;;;;:::i;2352:219::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2352:219:16;;-1:-1:-1;;;;;2352:219:16;;;;;;;;:::i;6639:246::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6639:246:16;;-1:-1:-1;;;;;6639:246:16;;;;;;;;:::i;7843:432::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7843:432:16;;-1:-1:-1;;;;;7843:432:16;;;;;;;;:::i;2126:220::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2126:220:16;;-1:-1:-1;;;;;2126:220:16;;;;;;;;:::i;4728:202::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4728:202:16;;-1:-1:-1;;;;;4728:202:16;;;;;;;;:::i;7591:246::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7591:246:16;;-1:-1:-1;;;;;7591:246:16;;;;;;;;:::i;13403:2108::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13403:2108:16;;-1:-1:-1;;;;;13403:2108:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;13403:2108:16;;;;;;;;;;;;;;;;;;;;;9069:354;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9069:354:16;;-1:-1:-1;;;;;9069:354:16;;;;;;;;:::i;1878:242::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1878:242:16;;-1:-1:-1;;;;;1878:242:16;;;;;;;;:::i;7365:220::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7365:220:16;;-1:-1:-1;;;;;7365:220:16;;;;;;;;:::i;6356:277::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6356:277:16;;-1:-1:-1;;;;;6356:277:16;;;;;;;;:::i;3445:196::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3445:196:16;;-1:-1:-1;;;;;3445:196:16;;;;;;;;:::i;4936:463::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4936:463:16;;-1:-1:-1;;;;;4936:463:16;;;;;;;;:::i;3851:322::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3851:322:16;;-1:-1:-1;;;;;3851:322:16;;;;;;;;:::i;6891:234::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6891:234:16;;-1:-1:-1;;;;;6891:234:16;;;;;;;;:::i;3647:198::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3647:198:16;;-1:-1:-1;;;;;3647:198:16;;;;;;;;:::i;5666:430::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5666:430:16;;-1:-1:-1;;;;;5666:430:16;;;;;;;;:::i;8281:344::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8281:344:16;;-1:-1:-1;;;;;8281:344:16;;;;;;;;:::i;5405:255::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5405:255:16;;-1:-1:-1;;;;;5405:255:16;;;;;;;;:::i;9614:3596::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9614:3596:16;;-1:-1:-1;;;;;9614:3596:16;;;;;;;;:::i;2994:212::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2994:212:16;;-1:-1:-1;;;;;2994:212:16;;;;;;;;:::i;2790:198::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2790:198:16;;-1:-1:-1;;;;;2790:198:16;;;;;;;;:::i;3212:227::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3212:227:16;;-1:-1:-1;;;;;3212:227:16;;;;;;;;:::i;1630:242::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1630:242:16;;-1:-1:-1;;;;;1630:242:16;;;;;;;;:::i;7131:228::-;7202:6;7221:10;7233;7247:19;7257:2;7261:4;7247:9;:19::i;:::-;7296:25;;;;7318:2;7312:8;;;7296:25;7340:12;;;-1:-1:-1;;;7131:228:16;;;;;:::o;6102:248::-;6173:6;6192:10;6204;6218:19;6228:2;6232:4;6218:9;:19::i;:::-;6191:46;;;;6252:3;-1:-1:-1;;;;;6252:8:16;6259:1;6252:8;6248:96;;;-1:-1:-1;6283:3:16;-1:-1:-1;6276:10:16;;6248:96;6330:3;-1:-1:-1;;;;;6324:9:16;:3;-1:-1:-1;;;;;6324:9:16;;;;;;;6317:16;;;;;;4179:300;4250:6;4300:10;4312;4326:19;4336:2;4340:4;4326:9;:19::i;:::-;4452:12;4437;;;4452;;4437:27;4436:35;;4469:2;4436:35;;-1:-1:-1;;;4179:300:16;;;;:::o;8631:432::-;8702:6;8721:10;8733;8747:19;8757:2;8761:4;8747:9;:19::i;:::-;8720:46;;-1:-1:-1;8720:46:16;-1:-1:-1;8720:46:16;;8848:9;;;;8844:213;;-1:-1:-1;8880:12:16;;;-1:-1:-1;8873:19:16;;-1:-1:-1;;8873:19:16;8844:213;8922:20;8913:30;;;-1:-1:-1;;8913:30:16;:44;;;;;8947:4;:10;;-1:-1:-1;;8947:10:16;8913:44;8909:148;;;8987:1;8973:16;;;;;;;;8909:148;9041:4;9034:11;;:4;:11;;;;;;;;9027:19;;9020:26;;;;;;;;4485:237;4558:6;4577:10;4589;4603:19;4613:2;4617:4;4603:9;:19::i;:::-;-1:-1:-1;;;;;4696:11:16;4681:12;;;;;:26;4680:34;;4712:2;4680:34;;4485:237;-1:-1:-1;;;;;4485:237:16:o;2577:207::-;2648:6;2698:10;2710;2724:19;2734:2;2738:4;2724:9;:19::i;:::-;2697:46;;;;2768:3;-1:-1:-1;;;;;2762:9:16;:3;-1:-1:-1;;;;;2762:9:16;;2761:16;;2776:1;2761:16;;;2774:1;2761:16;2754:23;;;2577:207;-1:-1:-1;;;;;2577:207:16:o;2352:219::-;2422:6;2471:10;2483;2497:19;2507:2;2511:4;2497:9;:19::i;:::-;2470:46;;;;2554:3;2535:23;;2541:3;2535:23;;;2534:30;;2563:1;2534:30;;6639:246;6710:6;6729:10;6741;6755:19;6765:2;6769:4;6755:9;:19::i;:::-;6866:11;;6859:19;;;6639:246;-1:-1:-1;;;;;6639:246:16:o;7843:432::-;7914:6;7933:10;7945;7959:19;7969:2;7973:4;7959:9;:19::i;:::-;7932:46;;-1:-1:-1;7932:46:16;-1:-1:-1;7932:46:16;;8059:9;;;;8055:214;;-1:-1:-1;;8084:17:16;;;;;;;;8055:214;8131:20;8122:30;;;-1:-1:-1;;8122:30:16;:44;;;;;8156:4;:10;;-1:-1:-1;;8156:10:16;8122:44;8118:151;;;-1:-1:-1;8189:12:16;;;-1:-1:-1;8182:19:16;;-1:-1:-1;;8182:19:16;8118:151;8253:4;8246:11;;:4;:11;;;;;;;;8239:19;;8232:26;;;;;;;;2126:220;2196:6;2245:10;2257;2271:19;2281:2;2285:4;2271:9;:19::i;:::-;-1:-1:-1;;;;;2308:31:16;;;2329:8;2316:22;;;2308:31;;-1:-1:-1;;;2126:220:16;;;;:::o;4728:202::-;4800:6;4819:10;4831;4845:19;4855:2;4859:4;4845:9;:19::i;:::-;-1:-1:-1;;;;;4904:11:16;;;4890;;:25;4889:33;;4920:2;4889:33;;4728:202;-1:-1:-1;;;;;4728:202:16:o;7591:246::-;7662:6;7681:10;7693;7707:19;7717:2;7721:4;7707:9;:19::i;:::-;7818:11;7811:19;;;7591:246;-1:-1:-1;;;;;7591:246:16:o;13403:2108::-;13491:6;13499:4;13520:19;13542:12;:29;13572:4;13542:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13542:35:16;;-1:-1:-1;13607:6:16;13592:21;;;;13588:1857;;;13648:6;13633:12;:21;;;13629:890;;;13678:22;;;13674:310;;13779:21;13791:2;13795:4;13779:11;:21::i;:::-;13802:4;13771:36;;;;;;;13674:310;13836:12;:22;;13852:6;13836:22;13832:152;;;13937:21;13949:2;13953:4;13937:11;:21::i;13832:152::-;13629:890;;;14023:6;14008:12;:21;;;14004:515;;;14053:12;:22;;14069:6;14053:22;14049:310;;;14154:21;14166:2;14170:4;14154:11;:21::i;14049:310::-;14211:12;:22;;14227:6;14211:22;14207:152;;;14312:21;14324:2;14328:4;14312:11;:21::i;14004:515::-;14383:12;:22;;14399:6;14383:22;14379:140;;;14476:21;14488:2;14492:4;14476:11;:21::i;14379:140::-;13588:1857;;;14554:6;14539:12;:21;;;14535:910;;;14595:6;14580:12;:21;;;14576:696;;;14625:12;:22;;14641:6;14625:22;14621:311;;;14726:22;14739:2;14743:4;14726:12;:22::i;14621:311::-;14784:12;:22;;14800:6;14784:22;14780:152;;;14885:21;14897:2;14901:4;14885:11;:21::i;14576:696::-;14956:12;:22;;14972:6;14956:22;14952:320;;;15049:22;15062:2;15066:4;15049:12;:22::i;14952:320::-;15103:12;:22;;15119:6;15103:22;15099:173;;;15229:21;15241:2;15245:4;15229:11;:21::i;14535:910::-;15292:12;:22;;15308:6;15292:22;15288:157;;;15406:21;15418:2;15422:4;15406:11;:21::i;15288:157::-;15495:1;15498:5;15487:17;;;;;13403:2108;;;;;;:::o;9069:354::-;9141:6;9160:10;9172;9186:19;9196:2;9200:4;9186:9;:19::i;:::-;9159:46;;-1:-1:-1;9159:46:16;-1:-1:-1;9159:46:16;;9291:9;;;9287:130;;-1:-1:-1;9323:19:16;;;-1:-1:-1;9316:26:16;;-1:-1:-1;;9316:26:16;9287:130;9400:4;9393:11;;:4;:11;;;;;;;;9380:26;;9373:33;;;;;;;;1878:242;1948:6;1997:10;2009;2023:19;2033:2;2037:4;2023:9;:19::i;:::-;2104:9;;;1878:242;-1:-1:-1;;;;;1878:242:16:o;7365:220::-;7436:6;7455:10;7467;7481:19;7491:2;7495:4;7481:9;:19::i;:::-;7524:24;;;;7545:2;7539:8;;;7524:24;7566:12;;;-1:-1:-1;;;7365:220:16;;;;:::o;6356:277::-;6427:6;6477:10;6489;6503:19;6513:2;6517:4;6503:9;:19::i;:::-;6614:11;6607:19;;;6356:277;-1:-1:-1;;;;;6356:277:16:o;3445:196::-;3514:6;3562:10;3574;3588:19;3598:2;3602:4;3588:9;:19::i;:::-;3625:9;;3445:196;-1:-1:-1;;;;;3445:196:16:o;4936:463::-;5006:6;5055:10;5067;5081:19;5091:2;5095:4;5081:9;:19::i;:::-;5054:46;;-1:-1:-1;5054:46:16;-1:-1:-1;5054:46:16;;5181:9;;;;5177:216;;-1:-1:-1;;5206:17:16;;;;;;;;5177:216;5244:32;;;;-1:-1:-1;;5244:32:16;:46;;;;;5280:4;:10;;-1:-1:-1;;5280:10:16;5244:46;5240:153;;;-1:-1:-1;5320:4:16;-1:-1:-1;5306:19:16;;-1:-1:-1;;5306:19:16;5240:153;5377:4;5370:11;;:4;:11;;;;;;;;5356:26;;;;;;;;3851:322;3921:6;3970:10;3982;3996:19;4006:2;4010:4;3996:9;:19::i;:::-;4154:11;;3851:322;-1:-1:-1;;;;;3851:322:16:o;6891:234::-;6962:6;6981:10;6993;7007:19;7017:2;7021:4;7007:9;:19::i;:::-;7056:31;;;;7084:2;7078:8;;;7056:31;7106:12;;;-1:-1:-1;;;6891:234:16;;;;:::o;3647:198::-;3717:6;3766:10;3778;3792:19;3802:2;3806:4;3792:9;:19::i;:::-;3829:9;;3647:198;-1:-1:-1;;;;;3647:198:16:o;5666:430::-;5736:6;5755:10;5767;5781:19;5791:2;5795:4;5781:9;:19::i;:::-;5754:46;;-1:-1:-1;5754:46:16;-1:-1:-1;5754:46:16;;5881:9;;;;5877:213;;-1:-1:-1;5920:4:16;-1:-1:-1;5906:19:16;;-1:-1:-1;;5906:19:16;5877:213;5946:38;;;;-1:-1:-1;;5946:38:16;:52;;;;;5988:4;:10;;-1:-1:-1;;5988:10:16;5946:52;5942:148;;;6021:1;6014:8;;;;;;;;5942:148;6074:4;6067:11;;:4;:11;;;;;;;;6053:26;;;;;;;;8281:344;8353:6;8372:10;8384;8398:19;8408:2;8412:4;8398:9;:19::i;:::-;8371:46;;-1:-1:-1;8371:46:16;-1:-1:-1;8371:46:16;;8502:9;;;8498:121;;-1:-1:-1;;8527:17:16;;;;;;;;8498:121;8602:4;8595:11;;:4;:11;;;;;;;;8582:26;;8575:33;;;;;;;;5405:255;5476:6;5495:10;5507;5521:19;5531:2;5535:4;5521:9;:19::i;:::-;5494:46;;;;5555:3;-1:-1:-1;;;;;5555:8:16;5562:1;5555:8;5551:103;;;-1:-1:-1;;5579:17:16;;;;;;5551:103;5640:3;-1:-1:-1;;;;;5634:9:16;:3;-1:-1:-1;;;;;5634:9:16;;;;;;;5627:16;;;;;;9614:3596;9696:6;9704:4;9720:19;9742:12;:29;9772:4;9742:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9742:35:16;;-1:-1:-1;9806:6:16;9791:21;;;;9787:3390;;;9847:6;9832:12;:21;;;9828:1453;;;9892:6;9877:12;:21;;;9873:713;;;9926:22;;;9922:332;;10035:20;10046:2;10050:4;10035:10;:20::i;9922:332::-;10095:12;:22;;10111:6;10095:22;10091:163;;;10204:20;10215:2;10219:4;10204:10;:20::i;10091:163::-;9873:713;;;10282:12;:22;;10298:6;10282:22;10278:308;;;10383:20;10394:2;10398:4;10383:10;:20::i;10278:308::-;10439:12;:22;;10455:6;10439:22;10435:151;;;10540:20;10551:2;10555:4;10540:10;:20::i;9828:1453::-;10625:6;10610:12;:21;;;10606:675;;;10655:12;:22;;10671:6;10655:22;10651:469;;;10756:20;10767:2;10771:4;10756:10;:20::i;10651:469::-;10812:12;:22;;10828:6;10812:22;10808:312;;;10913:21;10925:2;10929:4;10913:11;:21::i;10808:312::-;10970:12;:22;;10986:6;10970:22;10966:154;;;11071:23;11085:2;11089:4;11071:13;:23::i;10606:675::-;11144:12;:22;;11160:6;11144:22;11140:141;;;11238:21;11250:2;11254:4;11238:11;:21::i;9787:3390::-;11316:6;11301:12;:21;;;11297:1880;;;11357:6;11342:12;:21;;;11338:1694;;;11387:12;:22;;11403:6;11387:22;11383:714;;;11488:20;11499:2;11503:4;11488:10;:20::i;11383:714::-;11559:6;11544:12;:21;;;11540:557;;;11593:12;:22;;11609:6;11593:22;11589:333;;;11702:20;11713:2;11717:4;11702:10;:20::i;11589:333::-;11762:12;:22;;11778:6;11762:22;11758:164;;;11871:21;11883:2;11887:4;11871:11;:21::i;11540:557::-;11950:12;:22;;11966:6;11950:22;11946:151;;;12051:20;12062:2;12066:4;12051:10;:20::i;11338:1694::-;12135:6;12120:12;:21;;;12116:916;;;12180:6;12165:12;:21;;;12161:712;;;12214:12;:22;;12230:6;12214:22;12210:331;;;12323:19;12333:2;12337:4;12323:9;:19::i;12210:331::-;12382:12;:22;;12398:6;12382:22;12378:163;;;12491:20;12502:2;12506:4;12491:10;:20::i;12161:712::-;12569:12;:22;;12585:6;12569:22;12565:308;;;12670:21;12682:2;12686:4;12670:11;:21::i;12565:308::-;12727:12;:21;;12743:5;12727:21;12723:150;;;12827:20;12838:2;12842:4;12827:10;:20::i;12116:916::-;12897:12;:22;;12913:6;12897:22;12893:139;;;12990:20;13001:2;13005:4;12990:10;:20::i;11297:1880::-;13052:12;:22;;13068:6;13052:22;13048:129;;;13137:22;13150:2;13154:4;13137:12;:22::i;2994:212::-;3064:6;3113:10;3125;3139:19;3149:2;3153:4;3139:9;:19::i;:::-;-1:-1:-1;;;;;3176:23:16;;;3191:6;3184:14;;;3176:23;;-1:-1:-1;;;2994:212:16;;;;:::o;2790:198::-;2860:6;2909:10;2921;2935:19;2945:2;2949:4;2935:9;:19::i;:::-;2972:9;;2790:198;-1:-1:-1;;;;;2790:198:16:o;3212:227::-;3282:6;3331:10;3343;3357:19;3367:2;3371:4;3357:9;:19::i;:::-;3401:30;;;;;3423:6;3416:14;;;3401:30;;3212:227;-1:-1:-1;;;;;3212:227:16:o;1630:242::-;1700:6;1749:10;1761;1775:19;1785:2;1789:4;1775:9;:19::i;:::-;1856:9;;1630:242;-1:-1:-1;;;;;1630:242:16:o;1411:213::-;1485:10;1497;1529:2;-1:-1:-1;;;;;1529:8:16;;1538:12;:20;1559:4;1538:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1538:26:16;1529:36;;;-1:-1:-1;;;;;;1529:36:16;;;;;;;;;;;;;;;;;;;;;1538:26;;1529:36;;;;;;;-1:-1:-1;1529:36:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1529:36:16;1590:26;;;-1:-1:-1;;;1590:26:16;;;;;;;;;;;1529:36;;-1:-1:-1;;;;;;1581:8:16;;;;;1590:12;;:20;;:26;;;;;1529:36;;1590:26;;;;;;;;:12;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1590:26:16;1581:36;;;-1:-1:-1;;;;;;1581:36:16;;;;;;;;;;;;;;;;;;;;;1590:26;;1581:36;;;;;;;-1:-1:-1;1581:36:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1581:36:16;1411:213;;1581:36;;-1:-1:-1;1411:213:16;;-1:-1:-1;;1411:213:16:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1160800",
        "executionCost": "1232",
        "totalCost": "1162032"
      },
      "external": {
        "arithmetic32Funct3Funct7(MemoryInteractor,uint32)": "infinite",
        "arithmeticFunct3Funct7(MemoryInteractor,uint32)": "infinite",
        "executeADD(MemoryInteractor,uint32)": "infinite",
        "executeADDW(MemoryInteractor,uint32)": "infinite",
        "executeAND(MemoryInteractor,uint32)": "infinite",
        "executeDIV(MemoryInteractor,uint32)": "infinite",
        "executeDIVU(MemoryInteractor,uint32)": "infinite",
        "executeDIVUW(MemoryInteractor,uint32)": "infinite",
        "executeDIVW(MemoryInteractor,uint32)": "infinite",
        "executeMUL(MemoryInteractor,uint32)": "infinite",
        "executeMULH(MemoryInteractor,uint32)": "infinite",
        "executeMULHSU(MemoryInteractor,uint32)": "infinite",
        "executeMULHU(MemoryInteractor,uint32)": "infinite",
        "executeMULW(MemoryInteractor,uint32)": "infinite",
        "executeOR(MemoryInteractor,uint32)": "infinite",
        "executeREM(MemoryInteractor,uint32)": "infinite",
        "executeREMU(MemoryInteractor,uint32)": "infinite",
        "executeREMUW(MemoryInteractor,uint32)": "infinite",
        "executeREMW(MemoryInteractor,uint32)": "infinite",
        "executeSLL(MemoryInteractor,uint32)": "infinite",
        "executeSLLW(MemoryInteractor,uint32)": "infinite",
        "executeSLT(MemoryInteractor,uint32)": "infinite",
        "executeSLTU(MemoryInteractor,uint32)": "infinite",
        "executeSRA(MemoryInteractor,uint32)": "infinite",
        "executeSRAW(MemoryInteractor,uint32)": "infinite",
        "executeSRL(MemoryInteractor,uint32)": "infinite",
        "executeSRLW(MemoryInteractor,uint32)": "infinite",
        "executeSUB(MemoryInteractor,uint32)": "infinite",
        "executeSUBW(MemoryInteractor,uint32)": "infinite",
        "executeXOR(MemoryInteractor,uint32)": "infinite"
      },
      "internal": {
        "getRs1Rs2(contract MemoryInteractor,uint32)": "infinite"
      }
    },
    "methodIdentifiers": {
      "arithmetic32Funct3Funct7(MemoryInteractor,uint32)": "72df41b4",
      "arithmeticFunct3Funct7(MemoryInteractor,uint32)": "d8f22f08",
      "executeADD(MemoryInteractor,uint32)": "f6353c07",
      "executeADDW(MemoryInteractor,uint32)": "a21e3483",
      "executeAND(MemoryInteractor,uint32)": "b4adc2e9",
      "executeDIV(MemoryInteractor,uint32)": "a8e48f10",
      "executeDIVU(MemoryInteractor,uint32)": "d2ab5fcc",
      "executeDIVUW(MemoryInteractor,uint32)": "cf36dfc7",
      "executeDIVW(MemoryInteractor,uint32)": "598f6362",
      "executeMUL(MemoryInteractor,uint32)": "ab1136ea",
      "executeMULH(MemoryInteractor,uint32)": "14808e89",
      "executeMULHSU(MemoryInteractor,uint32)": "1b259245",
      "executeMULHU(MemoryInteractor,uint32)": "646651ac",
      "executeMULW(MemoryInteractor,uint32)": "72a68bef",
      "executeOR(MemoryInteractor,uint32)": "a5c7d349",
      "executeREM(MemoryInteractor,uint32)": "b5e9a8d1",
      "executeREMU(MemoryInteractor,uint32)": "10fb4330",
      "executeREMUW(MemoryInteractor,uint32)": "746c335b",
      "executeREMW(MemoryInteractor,uint32)": "17909e17",
      "executeSLL(MemoryInteractor,uint32)": "5ba15358",
      "executeSLLW(MemoryInteractor,uint32)": "ac4e71bd",
      "executeSLT(MemoryInteractor,uint32)": "2e099fd0",
      "executeSLTU(MemoryInteractor,uint32)": "27f5c9d9",
      "executeSRA(MemoryInteractor,uint32)": "f0532fb0",
      "executeSRAW(MemoryInteractor,uint32)": "8f90ddc6",
      "executeSRL(MemoryInteractor,uint32)": "e7d68d09",
      "executeSRLW(MemoryInteractor,uint32)": "065060bf",
      "executeSUB(MemoryInteractor,uint32)": "7c14b337",
      "executeSUBW(MemoryInteractor,uint32)": "380755bd",
      "executeXOR(MemoryInteractor,uint32)": "e81b5455"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"arithmetic32Funct3Funct7(MemoryInteractor,uint32)\":{\"notice\":\"Given an arithmetic32 funct3 funct7 insn, finds the associated func.\"},\"arithmeticFunct3Funct7(MemoryInteractor,uint32)\":{\"notice\":\"Given a arithmetic funct3 funct7 insn, finds the func associated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RiscVInstructions/ArithmeticInstructions.sol\":\"ArithmeticInstructions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/BitsManipulationLibrary.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title Bits Manipulation Library\\n/// @author Felipe Argento / Stephen Chen\\n/// @notice Implements bit manipulation helper functions\\nlibrary BitsManipulationLibrary {\\n\\n    /// @notice Sign extend a shorter signed value to the full int32\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function int32SignExtension(int32 number, uint32 wordSize)\\n    public pure returns(int32)\\n    {\\n        uint32 uNumber = uint32(number);\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint32 mask = ((uint32(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return int32(uNumber);\\n    }\\n\\n    /// @notice Sign extend a shorter signed value to the full uint64\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function uint64SignExtension(uint64 number, uint64 wordSize)\\n    public pure returns(uint64)\\n    {\\n        uint64 uNumber = number;\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint64 mask = ((uint64(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return uNumber;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 64 bytes\\n    /// @param num number to have bytes swapped\\n    function uint64SwapEndian(uint64 num) public pure returns(uint64) {\\n        uint64 output = ((num & 0x00000000000000ff) << 56)|\\n            ((num & 0x000000000000ff00) << 40)|\\n            ((num & 0x0000000000ff0000) << 24)|\\n            ((num & 0x00000000ff000000) << 8) |\\n            ((num & 0x000000ff00000000) >> 8) |\\n            ((num & 0x0000ff0000000000) >> 24)|\\n            ((num & 0x00ff000000000000) >> 40)|\\n            ((num & 0xff00000000000000) >> 56);\\n\\n        return output;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 32 bytes\\n    /// @param num number to have bytes swapped\\n    function uint32SwapEndian(uint32 num) public pure returns(uint32) {\\n        uint32 output = ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);\\n        return output;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x95b97e0ae364fb91a3fdcf8132e7b61c745c23dd4e5beb980f396c05a69bbd08\",\"license\":\"Apache-2.0\"},\"contracts/CLINT.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./RealTimeClock.sol\\\";\\n\\n\\n/// @title CLINT\\n/// @author Felipe Argento\\n/// @notice Implements the Core Local Interruptor functionalities\\n/// @dev CLINT active addresses are 0x0200bff8(mtime) and 0x02004000(mtimecmp)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary CLINT {\\n\\n    uint64 constant CLINT_MSIP0_ADDR = 0x02000000;\\n    uint64 constant CLINT_MTIMECMP_ADDR = 0x02004000;\\n    uint64 constant CLINT_MTIME_ADDR = 0x0200bff8;\\n\\n    /// @notice reads clint\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function clintRead(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            return clintReadMsip(mi, wordSize);\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            return clintReadMtime(mi, wordSize);\\n        } else if (offset == CLINT_MTIME_ADDR) {\\n            return clintReadMtimecmp(mi, wordSize);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write to clint\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param val to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function clintWrite(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 val,\\n        uint64 wordSize)\\n    public returns (bool)\\n    {\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            if (wordSize == 32) {\\n                if ((val & 1) != 0) {\\n                    mi.setMip(RiscVConstants.getMipMsipMask());\\n                } else {\\n                    mi.resetMip(RiscVConstants.getMipMsipMask());\\n                }\\n                return true;\\n            }\\n            return false;\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            if (wordSize == 64) {\\n                mi.writeClintMtimecmp(val);\\n                mi.resetMip(RiscVConstants.getMipMsipMask());\\n                return true;\\n            }\\n            // partial mtimecmp is not supported\\n            return false;\\n        }\\n        return false;\\n    }\\n\\n    // internal functions\\n    function clintReadMsip(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 32) {\\n            if ((mi.readMip() & RiscVConstants.getMipMsipMask()) == RiscVConstants.getMipMsipMask()) {\\n                return(true, 1);\\n            } else {\\n                return (true, 0);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtime(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, RealTimeClock.rtcCycleToTime(mi.readMcycle()));\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtimecmp(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, mi.readClintMtimecmp());\\n        }\\n        return (false, 0);\\n    }\\n\\n    // getters\\n    function getClintMtimecmp() public pure returns (uint64) {\\n        return CLINT_MTIMECMP_ADDR;\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x89a1c4305fc05859156cbd73380aa63ce16a48aba24ce44d4b862b5f415d6362\",\"license\":\"Apache-2.0\"},\"contracts/HTIF.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title HTIF\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\n\\n\\n/// @title HTIF\\n/// @author Felipe Argento\\n/// @notice Host-Target-Interface (HTIF) mediates communcation with external world.\\n/// @dev Its active addresses are 0x40000000(tohost) and 0x40000008(from host)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary HTIF {\\n\\n    uint64 constant HTIF_TOHOST_ADDR_CONST = 0x40008000;\\n    uint64 constant HTIF_FROMHOST_ADDR_CONST = 0x40008008;\\n    uint64 constant HTIF_IYIELD_ADDR_CONST = 0x40008020;\\n\\n    // [c++] enum HTIF_devices\\n    uint64 constant HTIF_DEVICE_HALT = 0;        //< Used to halt machine\\n    uint64 constant HTIF_DEVICE_CONSOLE = 1;     //< Used for console input and output\\n    uint64 constant HTIF_DEVICE_YIELD = 2;       //< Used to yield control back to host\\n\\n    // [c++] enum HTIF_commands\\n    uint64 constant HTIF_HALT_HALT = 0;\\n    uint64 constant HTIF_CONSOLE_GETCHAR = 0;\\n    uint64 constant HTIF_CONSOLE_PUTCHAR = 1;\\n    uint64 constant HTIF_YIELD_PROGRESS = 0;\\n    uint64 constant HTIF_YIELD_ROLLUP = 1;\\n\\n    /// @notice reads htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function htifRead(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n        // HTIF reads must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return (false, 0);\\n        }\\n\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return (true, mi.readHtifTohost());\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            return (true, mi.readHtifFromhost());\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param val value to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function htifWrite(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 val,\\n        uint64 wordSize\\n    )\\n    public returns (bool)\\n    {\\n        // HTIF writes must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return false;\\n        }\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return htifWriteTohost(mi, val);\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            mi.writeHtifFromhost(val);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Internal functions\\n    function htifWriteFromhost(MemoryInteractor mi, uint64 val)\\n    internal returns (bool)\\n    {\\n        mi.writeHtifFromhost(val);\\n        // TO-DO: check if h is interactive? reset from host? pollConsole?\\n        return true;\\n    }\\n\\n    function htifWriteTohost(MemoryInteractor mi, uint64 tohost)\\n    internal returns (bool)\\n    {\\n        uint32 device = uint32(tohost >> 56);\\n        uint32 cmd = uint32((tohost >> 48) & 0xff);\\n        uint64 payload = uint32((tohost & (~(uint256(1) >> 16))));\\n\\n        mi.writeHtifTohost(tohost);\\n\\n        if (device == HTIF_DEVICE_HALT) {\\n            return htifHalt(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_CONSOLE) {\\n            return htifConsole(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_YIELD) {\\n            return htifYield(\\n                mi,\\n                cmd,\\n                payload);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function htifHalt(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_HALT_HALT && ((payload & 1) == 1) ) {\\n            //set iflags to halted\\n            mi.setIflagsH(true);\\n        }\\n        return true;\\n    }\\n\\n    function htifYield(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        // If yield command is enabled, yield\\n        if ((mi.readHtifIYield() >> cmd) & 1 == 1) {\\n            mi.setIflagsY(true);\\n            mi.writeHtifFromhost((HTIF_DEVICE_YIELD << 56) | cmd << 48);\\n        }\\n\\n        return true;\\n    }\\n\\n    function htifConsole(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_CONSOLE_PUTCHAR) {\\n            htifPutchar(mi);\\n        } else if (cmd == HTIF_CONSOLE_GETCHAR) {\\n            htifGetchar(mi);\\n        } else {\\n            // Unknown HTIF console commands are silently ignored\\n            return true;\\n        }\\n    }\\n\\n    function htifPutchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        // TO-DO: what to do in the blockchain? Generate event?\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_PUTCHAR) << 48);\\n        return true;\\n    }\\n\\n    function htifGetchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_GETCHAR) << 48);\\n        return true;\\n    }\\n\\n    // getters\\n    function getHtifToHostAddr() public pure returns (uint64) {\\n        return HTIF_TOHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifFromHostAddr() public pure returns (uint64) {\\n        return HTIF_FROMHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifIYieldAddr() public pure returns (uint64) {\\n        return HTIF_IYIELD_ADDR_CONST;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x269d377ff4e5c3d0c65bb18d949f249c7e56ab2c208d8fb3f9376ac4d0b5f8f8\",\"license\":\"Apache-2.0\"},\"contracts/MemoryInteractor.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title MemoryInteractor.sol\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ShadowAddresses.sol\\\";\\nimport \\\"./HTIF.sol\\\";\\nimport \\\"./CLINT.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title MemoryInteractor\\n/// @author Felipe Argento\\n/// @notice Bridge between Memory Manager and Step\\n/// @dev Every read performed by mi.memoryRead or mi.write should be followed by an\\n/// @dev endianess swap from little endian to big endian. This is the case because\\n/// @dev EVM is big endian but RiscV is little endian.\\n/// @dev Reference: riscv-spec-v2.2.pdf - Preface to Version 2.0\\n/// @dev Reference: Ethereum yellowpaper - Version 69351d5\\n/// @dev    Appendix H. Virtual Machine Specification\\ncontract MemoryInteractor {\\n\\n    uint256 rwIndex; // read write index\\n    uint64[] rwPositions; // read write positions\\n    bytes8[] rwValues; // read write values\\n    bool[] isRead; // true if access is read, false if its write\\n\\n    function initializeMemory(\\n        uint64[] memory _rwPositions,\\n        bytes8[] memory _rwValues,\\n        bool[] memory _isRead\\n    ) virtual public\\n    {\\n        require(_rwPositions.length == _rwValues.length, \\\"Read/write arrays are not the same size\\\");\\n        require(_rwPositions.length == _isRead.length, \\\"Read/write arrays are not the same size\\\");\\n        rwIndex = 0;\\n        rwPositions = _rwPositions;\\n        rwValues = _rwValues;\\n        isRead = _isRead;\\n    }\\n\\n    function getRWIndex() public view returns (uint256) {\\n        return rwIndex;\\n    }\\n    // Reads\\n    function readX(uint64 registerIndex) public returns (uint64) {\\n        return memoryRead(registerIndex * 8);\\n    }\\n\\n    function readClintMtimecmp() public returns (uint64) {\\n        return memoryRead(CLINT.getClintMtimecmp());\\n    }\\n\\n    function readHtifFromhost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifFromHostAddr());\\n    }\\n\\n    function readHtifTohost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifToHostAddr());\\n    }\\n\\n    function readHtifIYield() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifIYieldAddr());\\n    }\\n\\n    function readMie() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMie());\\n    }\\n\\n    function readMcause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcause());\\n    }\\n\\n    function readMinstret() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMinstret());\\n    }\\n\\n    function readMcycle() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcycle());\\n    }\\n\\n    function readMcounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcounteren());\\n    }\\n\\n    function readMepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMepc());\\n    }\\n\\n    function readMip() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMip());\\n    }\\n\\n    function readMtval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtval());\\n    }\\n\\n    function readMvendorid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMvendorid());\\n    }\\n\\n    function readMarchid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMarchid());\\n    }\\n\\n    function readMimpid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMimpid());\\n    }\\n\\n    function readMscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMscratch());\\n    }\\n\\n    function readSatp() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSatp());\\n    }\\n\\n    function readScause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScause());\\n    }\\n\\n    function readSepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSepc());\\n    }\\n\\n    function readScounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScounteren());\\n    }\\n\\n    function readStval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStval());\\n    }\\n\\n    function readMideleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMideleg());\\n    }\\n\\n    function readMedeleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMedeleg());\\n    }\\n\\n    function readMtvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtvec());\\n    }\\n\\n    function readIlrsc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIlrsc());\\n    }\\n\\n    function readPc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getPc());\\n    }\\n\\n    function readSscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSscratch());\\n    }\\n\\n    function readStvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStvec());\\n    }\\n\\n    function readMstatus() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMstatus());\\n    }\\n\\n    function readMisa() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMisa());\\n    }\\n\\n    function readIflags() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIflags());\\n    }\\n\\n    function readIflagsPrv() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsPrvMask()) >> RiscVConstants.getIflagsPrvShift();\\n    }\\n\\n    function readIflagsH() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsHMask()) >> RiscVConstants.getIflagsHShift();\\n    }\\n\\n    function readIflagsY() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsYMask()) >> RiscVConstants.getIflagsYShift();\\n    }\\n\\n    function readMemory(uint64 paddr, uint64 wordSize) public returns (uint64) {\\n        // get relative address from unaligned paddr\\n        uint64 closestStartAddr = paddr & uint64(~7);\\n        uint64 relAddr = paddr - closestStartAddr;\\n\\n        // value just like its on MM, without endianess swap\\n        uint64 val = pureMemoryRead(closestStartAddr);\\n\\n        // mask to clean a piece of the value that was on memory\\n        uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n        val = BitsManipulationLibrary.uint64SwapEndian(val & valueMask) >> relAddr*8;\\n        return val;\\n    }\\n\\n    // Sets\\n    function setPriv(uint64 newPriv) public {\\n        writeIflagsPrv(newPriv);\\n        writeIlrsc(uint64(-1)); // invalidate reserved address\\n    }\\n\\n    function setIflagsI(bool idle) public {\\n        uint64 iflags = readIflags();\\n\\n        if (idle) {\\n            iflags = (iflags | RiscVConstants.getIflagsIMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsIMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip |= mask;\\n\\n        writeMip(mip);\\n\\n        setIflagsI(false);\\n    }\\n\\n    function resetMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip &= ~mask;\\n        writeMip(mip);\\n    }\\n\\n    // Writes\\n    function writeMie(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMie(), value);\\n    }\\n\\n    function writeStvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStvec(), value);\\n    }\\n\\n    function writeSscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSscratch(), value);\\n    }\\n\\n    function writeMip(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMip(), value);\\n    }\\n\\n    function writeSatp(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSatp(), value);\\n    }\\n\\n    function writeMedeleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMedeleg(), value);\\n    }\\n\\n    function writeMideleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMideleg(), value);\\n    }\\n\\n    function writeMtvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtvec(), value);\\n    }\\n\\n    function writeMcounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcounteren(), value);\\n    }\\n\\n    function writeMcycle(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcycle(), value);\\n    }\\n\\n    function writeMinstret(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMinstret(), value);\\n    }\\n\\n    function writeMscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMscratch(), value);\\n    }\\n\\n    function writeScounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScounteren(), value);\\n    }\\n\\n    function writeScause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScause(), value);\\n    }\\n\\n    function writeSepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSepc(), value);\\n    }\\n\\n    function writeStval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStval(), value);\\n    }\\n\\n    function writeMstatus(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMstatus(), value);\\n    }\\n\\n    function writeMcause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcause(), value);\\n    }\\n\\n    function writeMepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMepc(), value);\\n    }\\n\\n    function writeMtval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtval(), value);\\n    }\\n\\n    function writePc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getPc(), value);\\n    }\\n\\n    function writeIlrsc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getIlrsc(), value);\\n    }\\n\\n    function writeClintMtimecmp(uint64 value) public {\\n        memoryWrite(CLINT.getClintMtimecmp(), value);\\n    }\\n\\n    function writeHtifFromhost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifFromHostAddr(), value);\\n    }\\n\\n    function writeHtifTohost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifToHostAddr(), value);\\n    }\\n\\n    function setIflagsH(bool halt) public {\\n        uint64 iflags = readIflags();\\n\\n        if (halt) {\\n            iflags = (iflags | RiscVConstants.getIflagsHMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsHMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setIflagsY(bool isYield) public {\\n        uint64 iflags = readIflags();\\n\\n        if (isYield) {\\n            iflags = (iflags | RiscVConstants.getIflagsYMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsYMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeIflagsPrv(uint64 newPriv) public {\\n        uint64 iflags = readIflags();\\n\\n        // Clears bits 3 and 2 of iflags and use or to set new value\\n        iflags = (iflags & (~RiscVConstants.getIflagsPrvMask())) | (newPriv << RiscVConstants.getIflagsPrvShift());\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeMemory(\\n        uint64 paddr,\\n        uint64 value,\\n        uint64 wordSize\\n    ) public\\n    {\\n        uint64 numberOfBytes = wordSize / 8;\\n\\n        if (numberOfBytes == 8) {\\n            memoryWrite(paddr, value);\\n        } else {\\n            // get relative address from unaligned paddr\\n            uint64 closestStartAddr = paddr & uint64(~7);\\n            uint64 relAddr = paddr - closestStartAddr;\\n\\n            // oldvalue just like its on MM, without endianess swap\\n            uint64 oldVal = pureMemoryRead(closestStartAddr);\\n\\n            // Mask to clean a piece of the value that was on memory\\n            uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n\\n            // value is big endian, need to swap before further operation\\n            uint64 valueSwap = BitsManipulationLibrary.uint64SwapEndian(value & ((uint64(2) ** wordSize) - 1));\\n\\n            uint64 newvalue = ((oldVal & ~valueMask) | (valueSwap >> relAddr*8));\\n\\n            newvalue = BitsManipulationLibrary.uint64SwapEndian(newvalue);\\n            memoryWrite(closestStartAddr, newvalue);\\n        }\\n    }\\n\\n    function writeX(uint64 registerindex, uint64 value) public {\\n        memoryWrite(registerindex * 8, value);\\n    }\\n\\n    // Internal functions\\n    function memoryRead(uint64 _readAddress) public returns (uint64) {\\n        return BitsManipulationLibrary.uint64SwapEndian(\\n            uint64(memoryAccessManager(_readAddress, true))\\n        );\\n    }\\n\\n    function memoryWrite(uint64 _writeAddress, uint64 _value) virtual public {\\n        bytes8 bytesvalue = bytes8(BitsManipulationLibrary.uint64SwapEndian(_value));\\n        require(memoryAccessManager(_writeAddress, false) == bytesvalue, \\\"Written value does not match\\\");\\n    }\\n\\n    // Memory Write without endianess swap\\n    function pureMemoryWrite(uint64 _writeAddress, uint64 _value) virtual internal {\\n        require(\\n            memoryAccessManager(_writeAddress, false) == bytes8(_value),\\n            \\\"Written value does not match\\\"\\n        );\\n    }\\n\\n    // Memory Read without endianess swap\\n    function pureMemoryRead(uint64 _readAddress) internal returns (uint64) {\\n        return uint64(memoryAccessManager(_readAddress, true));\\n    }\\n\\n   // Private functions\\n\\n    // takes care of read/write access\\n    function memoryAccessManager(uint64 _address, bool _accessIsRead) internal virtual returns (bytes8) {\\n        require(isRead[rwIndex] == _accessIsRead, \\\"Access was not the correct type\\\");\\n\\n        uint64 position = rwPositions[rwIndex];\\n        bytes8 value = rwValues[rwIndex];\\n        rwIndex++;\\n\\n        require((position & 7) == 0, \\\"Position is not aligned\\\");\\n        require(position == _address, \\\"Position and read address do not match\\\");\\n\\n        return value;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x172ace0eab16d875b5dc342bf9fd15aeca8a493a4e7b0ab6b1667ae22361e78f\",\"license\":\"Apache-2.0\"},\"contracts/RealTimeClock.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title RealTimeClock\\npragma solidity ^0.7.0;\\n\\n/// @title RealTimeClock\\n/// @author Felipe Argento\\n/// @notice Real Time clock simulator\\nlibrary RealTimeClock {\\n    uint64 constant RTC_FREQ_DIV = 100;\\n    \\n    /// @notice Converts from cycle count to time count\\n    /// @param cycle Cycle count\\n    /// @return Time count\\n    function rtcCycleToTime(uint64 cycle) public pure returns (uint64) {\\n        return cycle / RTC_FREQ_DIV;\\n    }\\n\\n    /// @notice Converts from time count to cycle count\\n    /// @param  time Time count\\n    /// @return Cycle count\\n    function rtcTimeToCycle(uint64 time) public pure returns (uint64) {\\n        return time * RTC_FREQ_DIV;\\n    }\\n}\\n\",\"keccak256\":\"0x07a038d80a3f50c9cb153f63ff8d251a5704a2cd1c74863c9f5aeeb0aee247fd\",\"license\":\"Apache-2.0\"},\"contracts/RiscVConstants.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title RiscVConstants\\n/// @author Felipe Argento\\n/// @notice Defines getters for important constants\\nlibrary RiscVConstants {\\n    //iflags shifts\\n    function getIflagsHShift()  public pure returns(uint64) {return 0;}\\n    function getIflagsYShift()  public pure returns(uint64) {return 1;}\\n    function getIflagsIShift()  public pure returns(uint64) {return 2;}\\n    function getIflagsPrvShift()  public pure returns(uint64) {return 3;}\\n\\n    //iflags masks\\n    function getIflagsHMask()  public pure returns(uint64) {return uint64(1) << getIflagsHShift();}\\n    function getIflagsYMask()  public pure returns(uint64) {return uint64(1) << getIflagsYShift();}\\n    function getIflagsIMask()  public pure returns(uint64) {return uint64(1) << getIflagsIShift();}\\n    function getIflagsPrvMask()  public pure returns(uint64) {return uint64(3) << getIflagsPrvShift();}\\n\\n    //general purpose\\n    function getXlen() public pure returns(uint64) {return 64;}\\n    function getMxl()  public pure returns(uint64) {return 2;}\\n\\n    //privilege levels\\n    function getPrvU() public pure returns(uint64) {return 0;}\\n    function getPrvS() public pure returns(uint64) {return 1;}\\n    function getPrvH() public pure returns(uint64) {return 2;}\\n    function getPrvM() public pure returns(uint64) {return 3;}\\n\\n    //mstatus shifts\\n    function getMstatusUieShift()  public pure returns(uint64) {return 0;}\\n    function getMstatusSieShift()  public pure returns(uint64) {return 1;}\\n    function getMstatusHieShift()  public pure returns(uint64) {return 2;}\\n    function getMstatusMieShift()  public pure returns(uint64) {return 3;}\\n    function getMstatusUpieShift() public pure returns(uint64) {return 4;}\\n    function getMstatusSpieShift() public pure returns(uint64) {return 5;}\\n    function getMstatusMpieShift() public pure returns(uint64) {return 7;}\\n    function getMstatusSppShift()  public pure returns(uint64) {return 8;}\\n    function getMstatusMppShift()  public pure returns(uint64) {return 11;}\\n    function getMstatusFsShift()   public pure returns(uint64) {return 13;}\\n\\n    function getMstatusXsShift()   public pure returns(uint64) {return 15;}\\n    function getMstatusMprvShift() public pure returns(uint64) {return 17;}\\n    function getMstatusSumShift()  public pure returns(uint64) {return 18;}\\n    function getMstatusMxrShift()  public pure returns(uint64) {return 19;}\\n    function getMstatusTvmShift()  public pure returns(uint64) {return 20;}\\n    function getMstatusTwShift()   public pure returns(uint64) {return 21;}\\n    function getMstatusTsrShift()  public pure returns(uint64) {return 22;}\\n\\n\\n    function getMstatusUxlShift()  public pure returns(uint64) {return 32;}\\n    function getMstatusSxlShift()  public pure returns(uint64) {return 34;}\\n\\n    function getMstatusSdShift()   public pure returns(uint64) {return getXlen() - 1;}\\n\\n    //mstatus masks\\n    function getMstatusUieMask()  public pure returns(uint64) {return (uint64(1) << getMstatusUieShift());}\\n    function getMstatusSieMask()  public pure returns(uint64) {return uint64(1) << getMstatusSieShift();}\\n    function getMstatusMieMask()  public pure returns(uint64) {return uint64(1) << getMstatusMieShift();}\\n    function getMstatusUpieMask() public pure returns(uint64) {return uint64(1) << getMstatusUpieShift();}\\n    function getMstatusSpieMask() public pure returns(uint64) {return uint64(1) << getMstatusSpieShift();}\\n    function getMstatusMpieMask() public pure returns(uint64) {return uint64(1) << getMstatusMpieShift();}\\n    function getMstatusSppMask()  public pure returns(uint64) {return uint64(1) << getMstatusSppShift();}\\n    function getMstatusMppMask()  public pure returns(uint64) {return uint64(3) << getMstatusMppShift();}\\n    function getMstatusFsMask()   public pure returns(uint64) {return uint64(3) << getMstatusFsShift();}\\n    function getMstatusXsMask()   public pure returns(uint64) {return uint64(3) << getMstatusXsShift();}\\n    function getMstatusMprvMask() public pure returns(uint64) {return uint64(1) << getMstatusMprvShift();}\\n    function getMstatusSumMask()  public pure returns(uint64) {return uint64(1) << getMstatusSumShift();}\\n    function getMstatusMxrMask()  public pure returns(uint64) {return uint64(1) << getMstatusMxrShift();}\\n    function getMstatusTvmMask()  public pure returns(uint64) {return uint64(1) << getMstatusTvmShift();}\\n    function getMstatusTwMask()   public pure returns(uint64) {return uint64(1) << getMstatusTwShift();}\\n    function getMstatusTsrMask()  public pure returns(uint64) {return uint64(1) << getMstatusTsrShift();}\\n\\n    function getMstatusUxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusUxlShift();}\\n    function getMstatusSxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusSxlShift();}\\n    function getMstatusSdMask()   public pure returns(uint64) {return uint64(1) << getMstatusSdShift();}\\n\\n    // mstatus read/writes\\n    function getMstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()\\n        );\\n    }\\n\\n    function getMstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // sstatus read/writes\\n    function getSstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()\\n        );\\n    }\\n\\n    function getSstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // mcause for exceptions\\n    function getMcauseInsnAddressMisaligned() public pure returns(uint64) {return 0x0;} ///< instruction address misaligned\\n    function getMcauseInsnAccessFault() public pure returns(uint64) {return 0x1;} ///< instruction access fault\\n    function getMcauseIllegalInsn() public pure returns(uint64) {return 0x2;} ///< illegal instruction\\n    function getMcauseBreakpoint() public pure returns(uint64) {return 0x3;} ///< breakpoint\\n    function getMcauseLoadAddressMisaligned() public pure returns(uint64) {return 0x4;} ///< load address misaligned\\n    function getMcauseLoadAccessFault() public pure returns(uint64) {return 0x5;} ///< load access fault\\n    function getMcauseStoreAmoAddressMisaligned() public pure returns(uint64) {return 0x6;} ///< store/amo address misaligned\\n    function getMcauseStoreAmoAccessFault() public pure returns(uint64) {return 0x7;} ///< store/amo access fault\\n    ///< environment call (+0: from u-mode, +1: from s-mode, +3: from m-mode)\\n    function getMcauseEcallBase() public pure returns(uint64) { return 0x8;}\\n    function getMcauseFetchPageFault() public pure returns(uint64) {return 0xc;} ///< instruction page fault\\n    function getMcauseLoadPageFault() public pure returns(uint64) {return 0xd;} ///< load page fault\\n    function getMcauseStoreAmoPageFault() public pure returns(uint64) {return 0xf;} ///< store/amo page fault\\n\\n    function getMcauseInterruptFlag() public pure returns(uint64) {return uint64(1) << (getXlen() - 1);} ///< interrupt flag\\n\\n    // mcounteren constants\\n    function getMcounterenCyShift() public pure returns(uint64) {return 0;}\\n    function getMcounterenTmShift() public pure returns(uint64) {return 1;}\\n    function getMcounterenIrShift() public pure returns(uint64) {return 2;}\\n\\n    function getMcounterenCyMask() public pure returns(uint64) {return uint64(1) << getMcounterenCyShift();}\\n    function getMcounterenTmMask() public pure returns(uint64) {return uint64(1) << getMcounterenTmShift();}\\n    function getMcounterenIrMask() public pure returns(uint64) {return uint64(1) << getMcounterenIrShift();}\\n\\n    function getMcounterenRwMask() public pure returns(uint64) {return getMcounterenCyMask() | getMcounterenTmMask() | getMcounterenIrMask();}\\n    function getScounterenRwMask() public pure returns(uint64) {return getMcounterenRwMask();}\\n\\n    //paging constants\\n    function getPgShift() public pure returns(uint64) {return 12;}\\n    function getPgMask()  public pure returns(uint64) {((uint64(1) << getPgShift()) - 1);}\\n\\n    function getPteVMask() public pure returns(uint64) {return (1 << 0);}\\n    function getPteUMask() public pure returns(uint64) {return (1 << 4);}\\n    function getPteAMask() public pure returns(uint64) {return (1 << 6);}\\n    function getPteDMask() public pure returns(uint64) {return (1 << 7);}\\n\\n    function getPteXwrReadShift() public pure returns(uint64) {return 0;}\\n    function getPteXwrWriteShift() public pure returns(uint64) {return 1;}\\n    function getPteXwrCodeShift() public pure returns(uint64) {return 2;}\\n\\n    // page masks\\n    function getPageNumberShift() public pure returns(uint64) {return 12;}\\n\\n    function getPageOffsetMask() public pure returns(uint64) {return ((uint64(1) << getPageNumberShift()) - 1);}\\n\\n    // mip shifts:\\n    function getMipUsipShift() public pure returns(uint64) {return 0;}\\n    function getMipSsipShift() public pure returns(uint64) {return 1;}\\n    function getMipMsipShift() public pure returns(uint64) {return 3;}\\n    function getMipUtipShift() public pure returns(uint64) {return 4;}\\n    function getMipStipShift() public pure returns(uint64) {return 5;}\\n    function getMipMtipShift() public pure returns(uint64) {return 7;}\\n    function getMipUeipShift() public pure returns(uint64) {return 8;}\\n    function getMipSeipShift() public pure returns(uint64) {return 9;}\\n    function getMipMeipShift() public pure returns(uint64) {return 11;}\\n\\n    function getMipUsipMask() public pure returns(uint64) {return uint64(1) << getMipUsipShift();}\\n    function getMipSsipMask() public pure returns(uint64) {return uint64(1) << getMipSsipShift();}\\n    function getMipMsipMask() public pure returns(uint64) {return uint64(1) << getMipMsipShift();}\\n    function getMipUtipMask() public pure returns(uint64) {return uint64(1) << getMipUtipShift();}\\n    function getMipStipMask() public pure returns(uint64) {return uint64(1) << getMipStipShift();}\\n    function getMipMtipMask() public pure returns(uint64) {return uint64(1) << getMipMtipShift();}\\n    function getMipUeipMask() public pure returns(uint64) {return uint64(1) << getMipUeipShift();}\\n    function getMipSeipMask() public pure returns(uint64) {return uint64(1) << getMipSeipShift();}\\n    function getMipMeipMask() public pure returns(uint64) {return uint64(1) << getMipMeipShift();}\\n}\\n\",\"keccak256\":\"0xfd9070a43036eb37831d90fd3770640225fe8fd31e0dbe93034b247933b9a9c1\",\"license\":\"Apache-2.0\"},\"contracts/RiscVDecoder.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title RiscVDecoder\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title RiscVDecoder\\n/// @author Felipe Argento\\n/// @notice Contract responsible for decoding the riscv's instructions\\n//      It applies different bitwise operations and masks to reach\\n//      specific positions and use that positions to identify the\\n//      correct function to be executed\\nlibrary RiscVDecoder {\\n    /// @notice Get the instruction's RD\\n    /// @param insn Instruction\\n    function insnRd(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 7) & 0x1F;\\n    }\\n\\n    /// @notice Get the instruction's RS1\\n    /// @param insn Instruction\\n    function insnRs1(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 15) & 0x1F;\\n    }\\n\\n    /// @notice Get the instruction's RS2\\n    /// @param insn Instruction\\n    function insnRs2(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 20) & 0x1F;\\n    }\\n\\n    /// @notice Get the I-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnIImm(uint32 insn) public pure returns(int32) {\\n        return int32(insn) >> 20;\\n    }\\n\\n    /// @notice Get the I-type instruction's unsigned immediate value\\n    /// @param insn Instruction\\n    function insnIUimm(uint32 insn) public pure returns(uint32) {\\n        return insn >> 20;\\n    }\\n\\n    /// @notice Get the U-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnUImm(uint32 insn) public pure returns(int32) {\\n        return int32(insn & 0xfffff000);\\n    }\\n\\n    /// @notice Get the B-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnBImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(\\n            ((insn >> (31 - 12)) & (1 << 12)) |\\n            ((insn >> (25 - 5)) & 0x7e0) |\\n            ((insn >> (8 - 1)) & 0x1e) |\\n            ((insn << (11 - 7)) & (1 << 11))\\n        );\\n        return BitsManipulationLibrary.int32SignExtension(imm, 13);\\n    }\\n\\n    /// @notice Get the J-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnJImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(\\n            ((insn >> (31 - 20)) & (1 << 20)) |\\n            ((insn >> (21 - 1)) & 0x7fe) |\\n            ((insn >> (20 - 11)) & (1 << 11)) |\\n            (insn & 0xff000)\\n        );\\n        return BitsManipulationLibrary.int32SignExtension(imm, 21);\\n    }\\n\\n    /// @notice Get the S-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnSImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(((insn & 0xfe000000) >> (25 - 5)) | ((insn >> 7) & 0x1F));\\n        return BitsManipulationLibrary.int32SignExtension(imm, 12);\\n    }\\n\\n    /// @notice Get the instruction's opcode field\\n    /// @param insn Instruction\\n    function insnOpcode(uint32 insn) public pure returns (uint32) {\\n        return insn & 0x7F;\\n    }\\n\\n    /// @notice Get the instruction's funct3 field\\n    /// @param insn Instruction\\n    function insnFunct3(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 12) & 0x07;\\n    }\\n\\n    /// @notice Get the concatenation of instruction's funct3 and funct7 fields\\n    /// @param insn Instruction\\n    function insnFunct3Funct7(uint32 insn) public pure returns (uint32) {\\n        return ((insn >> 5) & 0x380) | (insn >> 25);\\n    }\\n\\n    /// @notice Get the concatenation of instruction's funct3 and funct5 fields\\n    /// @param insn Instruction\\n    function insnFunct3Funct5(uint32 insn) public pure returns (uint32) {\\n        return ((insn >> 7) & 0xE0) | (insn >> 27);\\n    }\\n\\n    /// @notice Get the instruction's funct7 field\\n    /// @param insn Instruction\\n    function insnFunct7(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 25) & 0x7F;\\n    }\\n\\n    /// @notice Get the instruction's funct6 field\\n    /// @param insn Instruction\\n    function insnFunct6(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 26) & 0x3F;\\n    }\\n}\\n\",\"keccak256\":\"0xd908b1ffb6386732728562ea6cc57d5ffe71dc2134e8b0f79857882c8a3eac3c\",\"license\":\"Apache-2.0\"},\"contracts/RiscVInstructions/ArithmeticInstructions.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title ArithmeticInstructions\\n\\npragma solidity ^0.7.0;\\n\\n// Overflow/Underflow behaviour in solidity is to allow them to happen freely.\\n// This mimics the RiscV behaviour, so we can use the arithmetic operators normally.\\n// RiscV-spec-v2.2 - Section 2.4:\\n// https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf\\n// Solidity docs Twos Complement/Underflow/Overflow:\\n// https://solidity.readthedocs.io/en/latest/security-considerations.html?highlight=overflow#two-s-complement-underflows-overflows\\nimport \\\"../MemoryInteractor.sol\\\";\\nimport \\\"../RiscVDecoder.sol\\\";\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n\\nlibrary ArithmeticInstructions {\\n    // TO-DO: move XLEN to its own library\\n    uint constant XLEN = 64;\\n\\n    // event Print(string message);\\n    function getRs1Rs2(MemoryInteractor mi, uint32 insn) internal\\n    returns(uint64 rs1, uint64 rs2)\\n    {\\n        rs1 = mi.readX(RiscVDecoder.insnRs1(insn));\\n        rs2 = mi.readX(RiscVDecoder.insnRs2(insn));\\n    }\\n\\n    function executeADD(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"ADD\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n        //BuiltinAddOverflow(rs1, rs2, &val)\\n        return rs1 + rs2;\\n    }\\n\\n    function executeSUB(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"SUB\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n        //BuiltinSubOverflow(rs1, rs2, &val)\\n        return rs1 - rs2;\\n    }\\n\\n    function executeSLL(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"SLL\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return rs1 << (rs2 & uint64(XLEN - 1));\\n    }\\n\\n    function executeSLT(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"SLT\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return (int64(rs1) < int64(rs2))? 1:0;\\n    }\\n\\n    function executeSLTU(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"SLTU\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return (rs1 < rs2)? 1:0;\\n    }\\n\\n    function executeXOR(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"XOR\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return rs1 ^ rs2;\\n    }\\n\\n    function executeSRL(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"SRL\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return rs1 >> (rs2 & (XLEN-1));\\n    }\\n\\n    function executeSRA(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"SRA\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return uint64(int64(rs1) >> (rs2 & (XLEN-1)));\\n    }\\n\\n    function executeOR(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"OR\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return rs1 | rs2;\\n    }\\n\\n    function executeAND(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"AND\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return rs1 & rs2;\\n    }\\n\\n    function executeMUL(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"MUL\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n        int64 srs1 = int64(rs1);\\n        int64 srs2 = int64(rs2);\\n        //BuiltinMulOverflow(srs1, srs2, &val);\\n\\n        return uint64(srs1 * srs2);\\n    }\\n\\n    function executeMULH(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"MULH\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n        int64 srs1 = int64(rs1);\\n        int64 srs2 = int64(rs2);\\n\\n        return uint64((int128(srs1) * int128(srs2)) >> 64);\\n    }\\n\\n    function executeMULHSU(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n        int64 srs1 = int64(rs1);\\n\\n        return uint64((int128(srs1) * int128(rs2)) >> 64);\\n    }\\n\\n    function executeMULHU(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        return uint64((int128(rs1) * int128(rs2)) >> 64);\\n    }\\n\\n    function executeDIV(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"DIV\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n        int64 srs1 = int64(rs1);\\n        int64 srs2 = int64(rs2);\\n\\n        if (srs2 == 0) {\\n            return uint64(-1);\\n        } else if (srs1 == (int64(1 << (XLEN - 1))) && srs2 == -1) {\\n            return uint64(srs1);\\n        } else {\\n            return uint64(srs1 / srs2);\\n        }\\n    }\\n\\n    function executeDIVU(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        if (rs2 == 0) {\\n            return uint64(-1);\\n        } else {\\n            return rs1 / rs2;\\n        }\\n    }\\n\\n    function executeREM(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n        int64 srs1 = int64(rs1);\\n        int64 srs2 = int64(rs2);\\n\\n        if (srs2 == 0) {\\n            return uint64(srs1);\\n        } else if (srs1 == (int64(1 << uint64(XLEN - 1))) && srs2 == -1) {\\n            return 0;\\n        } else {\\n            return uint64(srs1 % srs2);\\n        }\\n    }\\n\\n    function executeREMU(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        if (rs2 == 0) {\\n            return rs1;\\n        } else {\\n            return rs1 % rs2;\\n        }\\n    }\\n\\n    function executeADDW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        // emit Print(\\\"REMU\\\");\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        int32 rs1w = int32(rs1);\\n        int32 rs2w = int32(rs2);\\n\\n        return uint64(rs1w + rs2w);\\n    }\\n\\n    function executeSUBW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        int32 rs1w = int32(rs1);\\n        int32 rs2w = int32(rs2);\\n\\n        return uint64(rs1w - rs2w);\\n    }\\n\\n    function executeSLLW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        int32 rs1w = int32(uint32(rs1) << uint32(rs2 & 31));\\n\\n        return uint64(rs1w);\\n    }\\n\\n    function executeSRLW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        int32 rs1w = int32(uint32(rs1) >> (rs2 & 31));\\n\\n        return uint64(rs1w);\\n    }\\n\\n    function executeSRAW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        int32 rs1w = int32(rs1) >> (rs2 & 31);\\n\\n        return uint64(rs1w);\\n    }\\n\\n    function executeMULW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        int32 rs1w = int32(rs1);\\n        int32 rs2w = int32(rs2);\\n\\n        return uint64(rs1w * rs2w);\\n    }\\n\\n    function executeDIVW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        int32 rs1w = int32(rs1);\\n        int32 rs2w = int32(rs2);\\n        if (rs2w == 0) {\\n            return uint64(-1);\\n        } else if (rs1w == (int32(1) << (32 - 1)) && rs2w == -1) {\\n            return uint64(rs1w);\\n        } else {\\n            return uint64(rs1w / rs2w);\\n        }\\n    }\\n\\n    function executeDIVUW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        uint32 rs1w = uint32(rs1);\\n        uint32 rs2w = uint32(rs2);\\n        if (rs2w == 0) {\\n            return uint64(-1);\\n        } else {\\n            return uint64(int32(rs1w / rs2w));\\n        }\\n    }\\n\\n    function executeREMW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        int32 rs1w = int32(rs1);\\n        int32 rs2w = int32(rs2);\\n\\n        if (rs2w == 0) {\\n            return uint64(rs1w);\\n        } else if (rs1w == (int32(1) << (32 - 1)) && rs2w == -1) {\\n            return uint64(0);\\n        } else {\\n            return uint64(rs1w % rs2w);\\n        }\\n    }\\n\\n    function executeREMUW(MemoryInteractor mi, uint32 insn) public returns (uint64) {\\n        (uint64 rs1, uint64 rs2) = getRs1Rs2(mi, insn);\\n\\n        uint32 rs1w = uint32(rs1);\\n        uint32 rs2w = uint32(rs2);\\n\\n        if (rs2w == 0) {\\n            return uint64(int32(rs1w));\\n        } else {\\n            return uint64(int32(rs1w % rs2w));\\n        }\\n    }\\n\\n    /// @notice Given a arithmetic funct3 funct7 insn, finds the func associated.\\n    //  Uses binary search for performance.\\n    //  @param insn for arithmetic 32 funct3 funct7 field.\\n    function arithmeticFunct3Funct7(MemoryInteractor mi, uint32 insn) public returns (uint64, bool) {\\n        uint32 funct3Funct7 = RiscVDecoder.insnFunct3Funct7(insn);\\n        if (funct3Funct7 < 0x0181) {\\n            if (funct3Funct7 < 0x0081) {\\n                if (funct3Funct7 < 0x0020) {\\n                    if (funct3Funct7 == 0x0000) {\\n                        /*funct3Funct7 == 0x0000*/\\n                        return (executeADD(mi, insn), true);\\n                    } else if (funct3Funct7 == 0x0001) {\\n                        /*funct3Funct7 == 0x0001*/\\n                        return (executeMUL(mi, insn), true);\\n                    }\\n                } else if (funct3Funct7 == 0x0080) {\\n                    /*funct3Funct7 == 0x0080*/\\n                    return (executeSLL(mi, insn), true);\\n                } else if (funct3Funct7 == 0x0020) {\\n                    /*funct3Funct7 == 0x0020*/\\n                    return (executeSUB(mi, insn), true);\\n                }\\n            } else if (funct3Funct7 > 0x0081) {\\n                if (funct3Funct7 == 0x0100) {\\n                    /*funct3Funct7 == 0x0100*/\\n                    return (executeSLT(mi, insn), true);\\n                } else if (funct3Funct7 == 0x0180) {\\n                    /*funct3Funct7 == 0x0180*/\\n                    return (executeSLTU(mi, insn), true);\\n                } else if (funct3Funct7 == 0x0101) {\\n                    /*funct3Funct7 == 0x0101*/\\n                    return (executeMULHSU(mi, insn), true);\\n                }\\n            } else if (funct3Funct7 == 0x0081) {\\n                /* funct3Funct7 == 0x0081*/\\n                return (executeMULH(mi, insn), true);\\n            }\\n        } else if (funct3Funct7 > 0x0181) {\\n            if (funct3Funct7 < 0x02a0) {\\n                if (funct3Funct7 == 0x0200) {\\n                    /*funct3Funct7 == 0x0200*/\\n                    return (executeXOR(mi, insn), true);\\n                } else if (funct3Funct7 > 0x0201) {\\n                    if (funct3Funct7 == 0x0280) {\\n                        /*funct3Funct7 == 0x0280*/\\n                        return (executeSRL(mi, insn), true);\\n                    } else if (funct3Funct7 == 0x0281) {\\n                        /*funct3Funct7 == 0x0281*/\\n                        return (executeDIVU(mi, insn), true);\\n                    }\\n                } else if (funct3Funct7 == 0x0201) {\\n                    /*funct3Funct7 == 0x0201*/\\n                    return (executeDIV(mi, insn), true);\\n                }\\n            }else if (funct3Funct7 > 0x02a0) {\\n                if (funct3Funct7 < 0x0380) {\\n                    if (funct3Funct7 == 0x0300) {\\n                        /*funct3Funct7 == 0x0300*/\\n                        return (executeOR(mi, insn), true);\\n                    } else if (funct3Funct7 == 0x0301) {\\n                        /*funct3Funct7 == 0x0301*/\\n                        return (executeREM(mi, insn), true);\\n                    }\\n                } else if (funct3Funct7 == 0x0381) {\\n                    /*funct3Funct7 == 0x0381*/\\n                    return (executeREMU(mi, insn), true);\\n                } else if (funct3Funct7 == 0x380) {\\n                    /*funct3Funct7 == 0x0380*/\\n                    return (executeAND(mi, insn), true);\\n                }\\n            } else if (funct3Funct7 == 0x02a0) {\\n                /*funct3Funct7 == 0x02a0*/\\n                return (executeSRA(mi, insn), true);\\n            }\\n        } else if (funct3Funct7 == 0x0181) {\\n            /*funct3Funct7 == 0x0181*/\\n            return (executeMULHU(mi, insn), true);\\n        }\\n        return (0, false);\\n    }\\n\\n    /// @notice Given an arithmetic32 funct3 funct7 insn, finds the associated func.\\n    //  Uses binary search for performance.\\n    //  @param insn for arithmetic32 funct3 funct7 field.\\n    function arithmetic32Funct3Funct7(MemoryInteractor mi, uint32 insn)\\n    public returns (uint64, bool)\\n    {\\n\\n        uint32 funct3Funct7 = RiscVDecoder.insnFunct3Funct7(insn);\\n\\n        if (funct3Funct7 < 0x0280) {\\n            if (funct3Funct7 < 0x0020) {\\n                if (funct3Funct7 == 0x0000) {\\n                    /*funct3Funct7 == 0x0000*/\\n                    return (executeADDW(mi, insn), true);\\n                } else if (funct3Funct7 == 0x0001) {\\n                    /*funct3Funct7 == 0x0001*/\\n                    return (executeMULW(mi, insn), true);\\n                }\\n            } else if (funct3Funct7 > 0x0020) {\\n                if (funct3Funct7 == 0x0080) {\\n                    /*funct3Funct7 == 0x0080*/\\n                    return (executeSLLW(mi, insn), true);\\n                } else if (funct3Funct7 == 0x0201) {\\n                    /*funct3Funct7 == 0x0201*/\\n                    return (executeDIVW(mi, insn), true);\\n                }\\n            } else if (funct3Funct7 == 0x0020) {\\n                /*funct3Funct7 == 0x0020*/\\n                return (executeSUBW(mi, insn), true);\\n            }\\n        } else if (funct3Funct7 > 0x0280) {\\n            if (funct3Funct7 < 0x0301) {\\n                if (funct3Funct7 == 0x0281) {\\n                    /*funct3Funct7 == 0x0281*/\\n                    return (executeDIVUW(mi, insn), true);\\n                } else if (funct3Funct7 == 0x02a0) {\\n                    /*funct3Funct7 == 0x02a0*/\\n                    return (executeSRAW(mi, insn), true);\\n                }\\n            } else if (funct3Funct7 == 0x0381) {\\n                /*funct3Funct7 == 0x0381*/\\n                return (executeREMUW(mi, insn), true);\\n            } else if (funct3Funct7 == 0x0301) {\\n                /*funct3Funct7 == 0x0301*/\\n                //return \\\"REMW\\\";\\n                return (executeREMW(mi, insn), true);\\n            }\\n        } else if (funct3Funct7 == 0x0280) {\\n            /*funct3Funct7 == 0x0280*/\\n            //return \\\"SRLW\\\";\\n            return (executeSRLW(mi, insn), true);\\n        }\\n        //return \\\"illegal insn\\\";\\n        return (0, false);\\n    }\\n}\\n\",\"keccak256\":\"0x421d1cb57b52d61516ff165457834676f9d18001c271be4cb3ac8f39eaee3a65\",\"license\":\"Apache-2.0\"},\"contracts/ShadowAddresses.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\n/// @title ShadowAddresses\\n/// @author Felipe Argento\\n/// @notice Defines the processor state. Memory-mapped to the lowest 512 bytes in pm\\n/// @dev Defined on Cartesi techpaper version 1.02 - Section 3 - table 2 \\n/// Source: https://cartesi.io/cartesi_whitepaper.pdf \\nlibrary ShadowAddresses {\\n    uint64 constant PC         = 0x100;\\n    uint64 constant MVENDORID  = 0x108;\\n    uint64 constant MARCHID    = 0x110;\\n    uint64 constant MIMPID     = 0x118;\\n    uint64 constant MCYCLE     = 0x120;\\n    uint64 constant MINSTRET   = 0x128;\\n    uint64 constant MSTATUS    = 0x130;\\n    uint64 constant MTVEC      = 0x138;\\n    uint64 constant MSCRATCH   = 0x140;\\n    uint64 constant MEPC       = 0x148;\\n    uint64 constant MCAUSE     = 0x150;\\n    uint64 constant MTVAL      = 0x158;\\n    uint64 constant MISA       = 0x160;\\n    uint64 constant MIE        = 0x168;\\n    uint64 constant MIP        = 0x170;\\n    uint64 constant MEDELEG    = 0x178;\\n    uint64 constant MIDELEG    = 0x180;\\n    uint64 constant MCOUNTEREN = 0x188;\\n    uint64 constant STVEC      = 0x190;\\n    uint64 constant SSCRATCH   = 0x198;\\n    uint64 constant SEPC       = 0x1a0;\\n    uint64 constant SCAUSE     = 0x1a8;\\n    uint64 constant STVAL      = 0x1b0;\\n    uint64 constant SATP       = 0x1b8;\\n    uint64 constant SCOUNTEREN = 0x1c0;\\n    uint64 constant ILRSC      = 0x1c8;\\n    uint64 constant IFLAGS     = 0x1d0;\\n\\n    //getters - contracts cant access constants directly\\n    function getPc()         public pure returns(uint64) {return PC;}\\n    function getMvendorid()  public pure returns(uint64) {return MVENDORID;}\\n    function getMarchid()    public pure returns(uint64) {return MARCHID;}\\n    function getMimpid()     public pure returns(uint64) {return MIMPID;}\\n    function getMcycle()     public pure returns(uint64) {return MCYCLE;}\\n    function getMinstret()   public pure returns(uint64) {return MINSTRET;}\\n    function getMstatus()    public pure returns(uint64) {return MSTATUS;}\\n    function getMtvec()      public pure returns(uint64) {return MTVEC;}\\n    function getMscratch()   public pure returns(uint64) {return MSCRATCH;}\\n    function getMepc()       public pure returns(uint64) {return MEPC;}\\n    function getMcause()     public pure returns(uint64) {return MCAUSE;}\\n    function getMtval()      public pure returns(uint64) {return MTVAL;}\\n    function getMisa()       public pure returns(uint64) {return MISA;}\\n    function getMie()        public pure returns(uint64) {return MIE;}\\n    function getMip()        public pure returns(uint64) {return MIP;}\\n    function getMedeleg()    public pure returns(uint64) {return MEDELEG;}\\n    function getMideleg()    public pure returns(uint64) {return MIDELEG;}\\n    function getMcounteren() public pure returns(uint64) {return MCOUNTEREN;}\\n    function getStvec()      public pure returns(uint64) {return STVEC;}\\n    function getSscratch()   public pure returns(uint64) {return SSCRATCH;}\\n    function getSepc()       public pure returns(uint64) {return SEPC;}\\n    function getScause()     public pure returns(uint64) {return SCAUSE;}\\n    function getStval()      public pure returns(uint64) {return STVAL;}\\n    function getSatp()       public pure returns(uint64) {return SATP;}\\n    function getScounteren() public pure returns(uint64) {return SCOUNTEREN;}\\n    function getIlrsc()      public pure returns(uint64) {return ILRSC;}\\n    function getIflags()     public pure returns(uint64) {return IFLAGS;}\\n}\\n\",\"keccak256\":\"0xbfd187bab76a2802de777406cdddc9fe0cbf79ab8cb6f76075da7db664a9e9ae\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "arithmetic32Funct3Funct7(MemoryInteractor,uint32)": {
        "notice": "Given an arithmetic32 funct3 funct7 insn, finds the associated func."
      },
      "arithmeticFunct3Funct7(MemoryInteractor,uint32)": {
        "notice": "Given a arithmetic funct3 funct7 insn, finds the func associated."
      }
    },
    "version": 1
  }
}