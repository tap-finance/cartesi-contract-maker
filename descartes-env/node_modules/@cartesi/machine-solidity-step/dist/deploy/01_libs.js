"use strict";
// Copyright (C) 2020 Cartesi Pte. Ltd.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tags = void 0;
var func = function (bre) { return __awaiter(void 0, void 0, void 0, function () {
    var deployments, getNamedAccounts, network, deploy, get, deployer, BitsManipulationLibrary, ShadowAddresses, RiscVConstants, RiscVDecoder, RealTimeClock, BranchInstructions, ArithmeticInstructions, ArithmeticImmediateInstructions, StandAloneInstructions, PMA, CSRReads, CLINT, HTIF, CSR, CSRExecute, Exceptions, EnvTrapIntInstructions, VirtualMemory, S_Instructions, AtomicInstructions, Fetch, Interrupts, Execute, MemoryInteractor, miAddress, TestMemoryInteractor, Step;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                deployments = bre.deployments, getNamedAccounts = bre.getNamedAccounts, network = bre.network;
                deploy = deployments.deploy, get = deployments.get;
                return [4 /*yield*/, getNamedAccounts()];
            case 1:
                deployer = (_a.sent()).deployer;
                return [4 /*yield*/, get('BitsManipulationLibrary')];
            case 2:
                BitsManipulationLibrary = _a.sent();
                return [4 /*yield*/, deploy("ShadowAddresses", {
                        from: deployer,
                        log: true
                    })];
            case 3:
                ShadowAddresses = _a.sent();
                return [4 /*yield*/, deploy("RiscVConstants", {
                        from: deployer,
                        log: true
                    })];
            case 4:
                RiscVConstants = _a.sent();
                return [4 /*yield*/, deploy("RiscVDecoder", {
                        from: deployer,
                        libraries: {
                            BitsManipulationLibrary: BitsManipulationLibrary.address
                        },
                        log: true
                    })];
            case 5:
                RiscVDecoder = _a.sent();
                return [4 /*yield*/, deploy("RealTimeClock", {
                        from: deployer,
                        log: true
                    })];
            case 6:
                RealTimeClock = _a.sent();
                return [4 /*yield*/, deploy("BranchInstructions", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address
                        },
                        log: true
                    })];
            case 7:
                BranchInstructions = _a.sent();
                return [4 /*yield*/, deploy("ArithmeticInstructions", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address
                        },
                        log: true
                    })];
            case 8:
                ArithmeticInstructions = _a.sent();
                return [4 /*yield*/, deploy("ArithmeticImmediateInstructions", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address
                        },
                        log: true
                    })];
            case 9:
                ArithmeticImmediateInstructions = _a.sent();
                return [4 /*yield*/, deploy("StandAloneInstructions", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address
                        },
                        log: true
                    })];
            case 10:
                StandAloneInstructions = _a.sent();
                return [4 /*yield*/, deploy("PMA", {
                        from: deployer,
                        log: true
                    })];
            case 11:
                PMA = _a.sent();
                return [4 /*yield*/, deploy("CSRReads", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address,
                            RealTimeClock: RealTimeClock.address
                        },
                        log: true
                    })];
            case 12:
                CSRReads = _a.sent();
                return [4 /*yield*/, deploy("CLINT", {
                        from: deployer,
                        libraries: {
                            RiscVConstants: RiscVConstants.address,
                            RealTimeClock: RealTimeClock.address
                        },
                        log: true
                    })];
            case 13:
                CLINT = _a.sent();
                return [4 /*yield*/, deploy("HTIF", {
                        from: deployer,
                        libraries: {
                            RiscVConstants: RiscVConstants.address,
                            RealTimeClock: RealTimeClock.address
                        },
                        log: true
                    })];
            case 14:
                HTIF = _a.sent();
                return [4 /*yield*/, deploy("CSR", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address,
                            RealTimeClock: RealTimeClock.address,
                            CSRReads: CSRReads.address
                        },
                        log: true
                    })];
            case 15:
                CSR = _a.sent();
                return [4 /*yield*/, deploy("CSRExecute", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address,
                            RealTimeClock: RealTimeClock.address,
                            CSRReads: CSRReads.address,
                            CSR: CSR.address
                        },
                        log: true
                    })];
            case 16:
                CSRExecute = _a.sent();
                return [4 /*yield*/, deploy("Exceptions", {
                        from: deployer,
                        libraries: {
                            RiscVConstants: RiscVConstants.address
                        },
                        log: true
                    })];
            case 17:
                Exceptions = _a.sent();
                return [4 /*yield*/, deploy("EnvTrapIntInstructions", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address,
                            Exceptions: Exceptions.address
                        },
                        log: true
                    })];
            case 18:
                EnvTrapIntInstructions = _a.sent();
                return [4 /*yield*/, deploy("VirtualMemory", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address,
                            ShadowAddresses: ShadowAddresses.address,
                            PMA: PMA.address,
                            CLINT: CLINT.address,
                            HTIF: HTIF.address,
                            Exceptions: Exceptions.address
                        },
                        log: true
                    })];
            case 19:
                VirtualMemory = _a.sent();
                return [4 /*yield*/, deploy("S_Instructions", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            VirtualMemory: VirtualMemory.address
                        },
                        log: true
                    })];
            case 20:
                S_Instructions = _a.sent();
                return [4 /*yield*/, deploy("AtomicInstructions", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            VirtualMemory: VirtualMemory.address
                        },
                        log: true
                    })];
            case 21:
                AtomicInstructions = _a.sent();
                return [4 /*yield*/, deploy("Fetch", {
                        from: deployer,
                        libraries: {
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address,
                            ShadowAddresses: ShadowAddresses.address,
                            PMA: PMA.address,
                            VirtualMemory: VirtualMemory.address,
                            Exceptions: Exceptions.address
                        },
                        log: true
                    })];
            case 22:
                Fetch = _a.sent();
                return [4 /*yield*/, deploy("Interrupts", {
                        from: deployer,
                        libraries: {
                            RiscVConstants: RiscVConstants.address,
                            ShadowAddresses: ShadowAddresses.address,
                            Exceptions: Exceptions.address
                        },
                        log: true
                    })];
            case 23:
                Interrupts = _a.sent();
                return [4 /*yield*/, deploy("Execute", {
                        from: deployer,
                        libraries: {
                            BitsManipulationLibrary: BitsManipulationLibrary.address,
                            RiscVDecoder: RiscVDecoder.address,
                            RiscVConstants: RiscVConstants.address,
                            ShadowAddresses: ShadowAddresses.address,
                            BranchInstructions: BranchInstructions.address,
                            ArithmeticInstructions: ArithmeticInstructions.address,
                            ArithmeticImmediateInstructions: ArithmeticImmediateInstructions.address,
                            AtomicInstructions: AtomicInstructions.address,
                            EnvTrapIntInstructions: EnvTrapIntInstructions.address,
                            StandAloneInstructions: StandAloneInstructions.address,
                            CSRExecute: CSRExecute.address,
                            CSR: CSR.address,
                            Exceptions: Exceptions.address,
                            S_Instructions: S_Instructions.address,
                            VirtualMemory: VirtualMemory.address
                        },
                        log: true
                    })];
            case 24:
                Execute = _a.sent();
                return [4 /*yield*/, deploy("MemoryInteractor", {
                        from: deployer,
                        libraries: {
                            BitsManipulationLibrary: BitsManipulationLibrary.address,
                            RiscVConstants: RiscVConstants.address,
                            ShadowAddresses: ShadowAddresses.address,
                            HTIF: HTIF.address,
                            CLINT: CLINT.address
                        },
                        log: true,
                    })];
            case 25:
                MemoryInteractor = _a.sent();
                miAddress = MemoryInteractor.address;
                if (!(network.name == "ramtest")) return [3 /*break*/, 27];
                console.log("    Deploying TestRam contracts...");
                return [4 /*yield*/, deploy("TestMemoryInteractor", {
                        from: deployer,
                        libraries: {
                            BitsManipulationLibrary: BitsManipulationLibrary.address,
                        },
                        log: true
                    })];
            case 26:
                TestMemoryInteractor = _a.sent();
                miAddress = TestMemoryInteractor.address;
                _a.label = 27;
            case 27: return [4 /*yield*/, deploy("Step", {
                    from: deployer,
                    libraries: {
                        RiscVDecoder: RiscVDecoder.address,
                        RiscVConstants: RiscVConstants.address,
                        ShadowAddresses: ShadowAddresses.address,
                        Fetch: Fetch.address,
                        Interrupts: Interrupts.address,
                        Execute: Execute.address
                    },
                    log: true,
                    args: [miAddress]
                })];
            case 28:
                Step = _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.default = func;
exports.tags = ["Libs"];
