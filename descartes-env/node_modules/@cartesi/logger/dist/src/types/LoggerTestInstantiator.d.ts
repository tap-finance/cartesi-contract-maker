/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LoggerTestInstantiatorInterface extends ethers.utils.Interface {
  functions: {
    "claimDownloading(uint256,bytes32)": FunctionFragment;
    "claimFinished(uint256)": FunctionFragment;
    "claimSubmitting(uint256)": FunctionFragment;
    "currentIndex()": FunctionFragment;
    "getCurrentState(uint256)": FunctionFragment;
    "getNonce(uint256)": FunctionFragment;
    "getState(uint256,address)": FunctionFragment;
    "getSubInstances(uint256,address)": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "isConcerned(uint256,address)": FunctionFragment;
    "stateIsDownloading(uint256)": FunctionFragment;
    "stateIsFinished(uint256)": FunctionFragment;
    "stateIsSubmitting(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimDownloading",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFinished",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSubmitting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubInstances",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConcerned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsDownloading",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsFinished",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateIsSubmitting",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimDownloading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSubmitting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConcerned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsDownloading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateIsSubmitting",
    data: BytesLike
  ): Result;

  events: {
    "LoggerTestCreated(uint256,address)": EventFragment;
    "LoggerTestFinished(uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoggerTestCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoggerTestFinished"): EventFragment;
}

export class LoggerTestInstantiator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LoggerTestInstantiatorInterface;

  functions: {
    claimDownloading(
      _index: BigNumberish,
      _submittedHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimDownloading(uint256,bytes32)"(
      _index: BigNumberish,
      _submittedHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimFinished(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFinished(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimSubmitting(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimSubmitting(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentNonce: BigNumber }>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentNonce: BigNumber }>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        _user: string;
        _hash: string;
        _currentState: string;
      }
    >;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        _user: string;
        _hash: string;
        _currentState: string;
      }
    >;

    getSubInstances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getSubInstances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsDownloading(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsDownloading(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsFinished(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsFinished(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stateIsSubmitting(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "stateIsSubmitting(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  claimDownloading(
    _index: BigNumberish,
    _submittedHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimDownloading(uint256,bytes32)"(
    _index: BigNumberish,
    _submittedHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimFinished(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFinished(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimSubmitting(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimSubmitting(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentState(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCurrentState(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNonce(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getState(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      _user: string;
      _hash: string;
      _currentState: string;
    }
  >;

  "getState(uint256,address)"(
    _index: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      _user: string;
      _hash: string;
      _currentState: string;
    }
  >;

  getSubInstances(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  "getSubInstances(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isActive(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isConcerned(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConcerned(uint256,address)"(
    _index: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsDownloading(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsDownloading(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsFinished(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsFinished(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stateIsSubmitting(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateIsSubmitting(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    claimDownloading(
      _index: BigNumberish,
      _submittedHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimDownloading(uint256,bytes32)"(
      _index: BigNumberish,
      _submittedHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFinished(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFinished(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSubmitting(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimSubmitting(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        _user: string;
        _hash: string;
        _currentState: string;
      }
    >;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        _user: string;
        _hash: string;
        _currentState: string;
      }
    >;

    getSubInstances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getSubInstances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    isActive(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsDownloading(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsDownloading(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsFinished(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsFinished(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateIsSubmitting(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateIsSubmitting(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    LoggerTestCreated(
      _index: null,
      _user: null
    ): TypedEventFilter<
      [BigNumber, string],
      { _index: BigNumber; _user: string }
    >;

    LoggerTestFinished(
      _index: null,
      _state: null
    ): TypedEventFilter<
      [BigNumber, number],
      { _index: BigNumber; _state: number }
    >;
  };

  estimateGas: {
    claimDownloading(
      _index: BigNumberish,
      _submittedHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimDownloading(uint256,bytes32)"(
      _index: BigNumberish,
      _submittedHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimFinished(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimFinished(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimSubmitting(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimSubmitting(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "currentIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubInstances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubInstances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsDownloading(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsDownloading(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsFinished(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsFinished(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateIsSubmitting(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateIsSubmitting(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimDownloading(
      _index: BigNumberish,
      _submittedHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimDownloading(uint256,bytes32)"(
      _index: BigNumberish,
      _submittedHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimFinished(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFinished(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimSubmitting(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimSubmitting(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentState(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentState(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getState(uint256,address)"(
      _index: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubInstances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubInstances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActive(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConcerned(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConcerned(uint256,address)"(
      _index: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsDownloading(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsDownloading(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsFinished(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsFinished(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateIsSubmitting(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateIsSubmitting(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
