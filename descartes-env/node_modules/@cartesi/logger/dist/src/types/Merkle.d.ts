/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MerkleInterface extends ethers.utils.Interface {
  functions: {
    "calculateRootFromPowerOfTwo(bytes32[])": FunctionFragment;
    "getLog2Floor(uint256)": FunctionFragment;
    "getPristineHash(uint8)": FunctionFragment;
    "getRoot(uint64,bytes8,bytes32[])": FunctionFragment;
    "getRootWithDrive(uint64,uint8,bytes32,bytes32[])": FunctionFragment;
    "isPowerOf2(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateRootFromPowerOfTwo",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLog2Floor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPristineHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoot",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRootWithDrive",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPowerOf2",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateRootFromPowerOfTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLog2Floor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPristineHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRootWithDrive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPowerOf2", data: BytesLike): Result;

  events: {};
}

export class Merkle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerkleInterface;

  functions: {
    calculateRootFromPowerOfTwo(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "calculateRootFromPowerOfTwo(bytes32[])"(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLog2Floor(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getLog2Floor(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPristineHash(
      _log2Size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPristineHash(uint8)"(
      _log2Size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoot(
      _position: BigNumberish,
      _value: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoot(uint64,bytes8,bytes32[])"(
      _position: BigNumberish,
      _value: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRootWithDrive(
      _position: BigNumberish,
      _logOfSize: BigNumberish,
      _drive: BytesLike,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRootWithDrive(uint64,uint8,bytes32,bytes32[])"(
      _position: BigNumberish,
      _logOfSize: BigNumberish,
      _drive: BytesLike,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    isPowerOf2(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPowerOf2(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  calculateRootFromPowerOfTwo(
    hashes: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  "calculateRootFromPowerOfTwo(bytes32[])"(
    hashes: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  getLog2Floor(
    number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "getLog2Floor(uint256)"(
    number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getPristineHash(
    _log2Size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPristineHash(uint8)"(
    _log2Size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoot(
    _position: BigNumberish,
    _value: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoot(uint64,bytes8,bytes32[])"(
    _position: BigNumberish,
    _value: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  getRootWithDrive(
    _position: BigNumberish,
    _logOfSize: BigNumberish,
    _drive: BytesLike,
    siblings: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  "getRootWithDrive(uint64,uint8,bytes32,bytes32[])"(
    _position: BigNumberish,
    _logOfSize: BigNumberish,
    _drive: BytesLike,
    siblings: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  isPowerOf2(number: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isPowerOf2(uint256)"(
    number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    calculateRootFromPowerOfTwo(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "calculateRootFromPowerOfTwo(bytes32[])"(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    getLog2Floor(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getLog2Floor(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getPristineHash(
      _log2Size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPristineHash(uint8)"(
      _log2Size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoot(
      _position: BigNumberish,
      _value: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoot(uint64,bytes8,bytes32[])"(
      _position: BigNumberish,
      _value: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    getRootWithDrive(
      _position: BigNumberish,
      _logOfSize: BigNumberish,
      _drive: BytesLike,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "getRootWithDrive(uint64,uint8,bytes32,bytes32[])"(
      _position: BigNumberish,
      _logOfSize: BigNumberish,
      _drive: BytesLike,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    isPowerOf2(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPowerOf2(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    calculateRootFromPowerOfTwo(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateRootFromPowerOfTwo(bytes32[])"(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLog2Floor(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLog2Floor(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPristineHash(
      _log2Size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPristineHash(uint8)"(
      _log2Size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      _position: BigNumberish,
      _value: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoot(uint64,bytes8,bytes32[])"(
      _position: BigNumberish,
      _value: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootWithDrive(
      _position: BigNumberish,
      _logOfSize: BigNumberish,
      _drive: BytesLike,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRootWithDrive(uint64,uint8,bytes32,bytes32[])"(
      _position: BigNumberish,
      _logOfSize: BigNumberish,
      _drive: BytesLike,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPowerOf2(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPowerOf2(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateRootFromPowerOfTwo(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateRootFromPowerOfTwo(bytes32[])"(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLog2Floor(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLog2Floor(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPristineHash(
      _log2Size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPristineHash(uint8)"(
      _log2Size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(
      _position: BigNumberish,
      _value: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoot(uint64,bytes8,bytes32[])"(
      _position: BigNumberish,
      _value: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRootWithDrive(
      _position: BigNumberish,
      _logOfSize: BigNumberish,
      _drive: BytesLike,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRootWithDrive(uint64,uint8,bytes32,bytes32[])"(
      _position: BigNumberish,
      _logOfSize: BigNumberish,
      _drive: BytesLike,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPowerOf2(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPowerOf2(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
